Index.PACKAGES = {"algebra.instances" : [{"name" : "algebra.instances.AllInstances", "members_trait" : [{"label" : "unitRing", "tail" : ": CommutativeRing[Unit]", "member" : "algebra.instances.UnitInstances.unitRing", "link" : "algebra\/instances\/AllInstances.html#unitRing:algebra.ring.CommutativeRing[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdAlgebraForUnit", "tail" : ": cats.kernel.BoundedSemilattice[Unit] with cats.kernel.CommutativeGroup[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdAlgebraForUnit", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdAlgebraForUnit:cats.kernel.BoundedSemilattice[Unit]withcats.kernel.CommutativeGroup[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUnit", "tail" : ": cats.kernel.Order[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdOrderForUnit", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForUnit:cats.kernel.Order[Unit]", "kind" : "implicit val"}, {"label" : "tuple22Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17], A18: Semiring[A18], A19: Semiring[A19], A20: Semiring[A20], A21: Semiring[A21]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "algebra.instances.TupleInstances.tuple22Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple22Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17],implicitA18:algebra.ring.Semiring[A18],implicitA19:algebra.ring.Semiring[A19],implicitA20:algebra.ring.Semiring[A20],implicitA21:algebra.ring.Semiring[A21]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple22Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17], A18: Rng[A18], A19: Rng[A19], A20: Rng[A20], A21: Rng[A21]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "algebra.instances.TupleInstances.tuple22Rng", "link" : "algebra\/instances\/AllInstances.html#tuple22Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17],implicitA18:algebra.ring.Rng[A18],implicitA19:algebra.ring.Rng[A19],implicitA20:algebra.ring.Rng[A20],implicitA21:algebra.ring.Rng[A21]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple22Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17], A18: Ring[A18], A19: Ring[A19], A20: Ring[A20], A21: Ring[A21]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "algebra.instances.TupleInstances.tuple22Ring", "link" : "algebra\/instances\/AllInstances.html#tuple22Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17],implicitA18:algebra.ring.Ring[A18],implicitA19:algebra.ring.Ring[A19],implicitA20:algebra.ring.Ring[A20],implicitA21:algebra.ring.Ring[A21]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple22Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17], A18: Rig[A18], A19: Rig[A19], A20: Rig[A20], A21: Rig[A21]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "algebra.instances.TupleInstances.tuple22Rig", "link" : "algebra\/instances\/AllInstances.html#tuple22Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17],implicitA18:algebra.ring.Rig[A18],implicitA19:algebra.ring.Rig[A19],implicitA20:algebra.ring.Rig[A20],implicitA21:algebra.ring.Rig[A21]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple21Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17], A18: Semiring[A18], A19: Semiring[A19], A20: Semiring[A20]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "algebra.instances.TupleInstances.tuple21Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple21Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17],implicitA18:algebra.ring.Semiring[A18],implicitA19:algebra.ring.Semiring[A19],implicitA20:algebra.ring.Semiring[A20]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple21Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17], A18: Rng[A18], A19: Rng[A19], A20: Rng[A20]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "algebra.instances.TupleInstances.tuple21Rng", "link" : "algebra\/instances\/AllInstances.html#tuple21Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17],implicitA18:algebra.ring.Rng[A18],implicitA19:algebra.ring.Rng[A19],implicitA20:algebra.ring.Rng[A20]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple21Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17], A18: Ring[A18], A19: Ring[A19], A20: Ring[A20]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "algebra.instances.TupleInstances.tuple21Ring", "link" : "algebra\/instances\/AllInstances.html#tuple21Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17],implicitA18:algebra.ring.Ring[A18],implicitA19:algebra.ring.Ring[A19],implicitA20:algebra.ring.Ring[A20]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple21Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17], A18: Rig[A18], A19: Rig[A19], A20: Rig[A20]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "algebra.instances.TupleInstances.tuple21Rig", "link" : "algebra\/instances\/AllInstances.html#tuple21Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17],implicitA18:algebra.ring.Rig[A18],implicitA19:algebra.ring.Rig[A19],implicitA20:algebra.ring.Rig[A20]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple20Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17], A18: Semiring[A18], A19: Semiring[A19]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "algebra.instances.TupleInstances.tuple20Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple20Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17],implicitA18:algebra.ring.Semiring[A18],implicitA19:algebra.ring.Semiring[A19]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple20Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17], A18: Rng[A18], A19: Rng[A19]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "algebra.instances.TupleInstances.tuple20Rng", "link" : "algebra\/instances\/AllInstances.html#tuple20Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17],implicitA18:algebra.ring.Rng[A18],implicitA19:algebra.ring.Rng[A19]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple20Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17], A18: Ring[A18], A19: Ring[A19]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "algebra.instances.TupleInstances.tuple20Ring", "link" : "algebra\/instances\/AllInstances.html#tuple20Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17],implicitA18:algebra.ring.Ring[A18],implicitA19:algebra.ring.Ring[A19]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple20Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17], A18: Rig[A18], A19: Rig[A19]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "algebra.instances.TupleInstances.tuple20Rig", "link" : "algebra\/instances\/AllInstances.html#tuple20Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17],implicitA18:algebra.ring.Rig[A18],implicitA19:algebra.ring.Rig[A19]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple19Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17], A18: Semiring[A18]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "algebra.instances.TupleInstances.tuple19Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple19Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17],implicitA18:algebra.ring.Semiring[A18]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple19Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17], A18: Rng[A18]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "algebra.instances.TupleInstances.tuple19Rng", "link" : "algebra\/instances\/AllInstances.html#tuple19Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17],implicitA18:algebra.ring.Rng[A18]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple19Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17], A18: Ring[A18]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "algebra.instances.TupleInstances.tuple19Ring", "link" : "algebra\/instances\/AllInstances.html#tuple19Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17],implicitA18:algebra.ring.Ring[A18]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple19Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17], A18: Rig[A18]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "algebra.instances.TupleInstances.tuple19Rig", "link" : "algebra\/instances\/AllInstances.html#tuple19Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17],implicitA18:algebra.ring.Rig[A18]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple18Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "algebra.instances.TupleInstances.tuple18Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple18Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple18Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "algebra.instances.TupleInstances.tuple18Rng", "link" : "algebra\/instances\/AllInstances.html#tuple18Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple18Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "algebra.instances.TupleInstances.tuple18Ring", "link" : "algebra\/instances\/AllInstances.html#tuple18Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple18Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "algebra.instances.TupleInstances.tuple18Rig", "link" : "algebra\/instances\/AllInstances.html#tuple18Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple17Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "algebra.instances.TupleInstances.tuple17Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple17Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple17Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "algebra.instances.TupleInstances.tuple17Rng", "link" : "algebra\/instances\/AllInstances.html#tuple17Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple17Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "algebra.instances.TupleInstances.tuple17Ring", "link" : "algebra\/instances\/AllInstances.html#tuple17Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple17Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "algebra.instances.TupleInstances.tuple17Rig", "link" : "algebra\/instances\/AllInstances.html#tuple17Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple16Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "algebra.instances.TupleInstances.tuple16Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple16Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple16Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "algebra.instances.TupleInstances.tuple16Rng", "link" : "algebra\/instances\/AllInstances.html#tuple16Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple16Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "algebra.instances.TupleInstances.tuple16Ring", "link" : "algebra\/instances\/AllInstances.html#tuple16Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple16Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "algebra.instances.TupleInstances.tuple16Rig", "link" : "algebra\/instances\/AllInstances.html#tuple16Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple15Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "algebra.instances.TupleInstances.tuple15Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple15Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple15Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "algebra.instances.TupleInstances.tuple15Rng", "link" : "algebra\/instances\/AllInstances.html#tuple15Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple15Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "algebra.instances.TupleInstances.tuple15Ring", "link" : "algebra\/instances\/AllInstances.html#tuple15Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple15Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "algebra.instances.TupleInstances.tuple15Rig", "link" : "algebra\/instances\/AllInstances.html#tuple15Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple14Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "algebra.instances.TupleInstances.tuple14Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple14Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple14Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "algebra.instances.TupleInstances.tuple14Rng", "link" : "algebra\/instances\/AllInstances.html#tuple14Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple14Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "algebra.instances.TupleInstances.tuple14Ring", "link" : "algebra\/instances\/AllInstances.html#tuple14Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple14Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "algebra.instances.TupleInstances.tuple14Rig", "link" : "algebra\/instances\/AllInstances.html#tuple14Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple13Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "algebra.instances.TupleInstances.tuple13Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple13Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple13Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "algebra.instances.TupleInstances.tuple13Rng", "link" : "algebra\/instances\/AllInstances.html#tuple13Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple13Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "algebra.instances.TupleInstances.tuple13Ring", "link" : "algebra\/instances\/AllInstances.html#tuple13Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple13Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "algebra.instances.TupleInstances.tuple13Rig", "link" : "algebra\/instances\/AllInstances.html#tuple13Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple12Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "algebra.instances.TupleInstances.tuple12Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple12Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple12Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "algebra.instances.TupleInstances.tuple12Rng", "link" : "algebra\/instances\/AllInstances.html#tuple12Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple12Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "algebra.instances.TupleInstances.tuple12Ring", "link" : "algebra\/instances\/AllInstances.html#tuple12Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple12Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "algebra.instances.TupleInstances.tuple12Rig", "link" : "algebra\/instances\/AllInstances.html#tuple12Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple11Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "algebra.instances.TupleInstances.tuple11Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple11Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple11Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "algebra.instances.TupleInstances.tuple11Rng", "link" : "algebra\/instances\/AllInstances.html#tuple11Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple11Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "algebra.instances.TupleInstances.tuple11Ring", "link" : "algebra\/instances\/AllInstances.html#tuple11Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple11Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "algebra.instances.TupleInstances.tuple11Rig", "link" : "algebra\/instances\/AllInstances.html#tuple11Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple10Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "algebra.instances.TupleInstances.tuple10Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple10Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple10Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "algebra.instances.TupleInstances.tuple10Rng", "link" : "algebra\/instances\/AllInstances.html#tuple10Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple10Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "algebra.instances.TupleInstances.tuple10Ring", "link" : "algebra\/instances\/AllInstances.html#tuple10Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple10Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "algebra.instances.TupleInstances.tuple10Rig", "link" : "algebra\/instances\/AllInstances.html#tuple10Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple9Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "algebra.instances.TupleInstances.tuple9Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple9Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple9Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "algebra.instances.TupleInstances.tuple9Rng", "link" : "algebra\/instances\/AllInstances.html#tuple9Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple9Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "algebra.instances.TupleInstances.tuple9Ring", "link" : "algebra\/instances\/AllInstances.html#tuple9Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple9Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "algebra.instances.TupleInstances.tuple9Rig", "link" : "algebra\/instances\/AllInstances.html#tuple9Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple8Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "algebra.instances.TupleInstances.tuple8Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple8Semiring[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple8Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "algebra.instances.TupleInstances.tuple8Rng", "link" : "algebra\/instances\/AllInstances.html#tuple8Rng[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple8Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "algebra.instances.TupleInstances.tuple8Ring", "link" : "algebra\/instances\/AllInstances.html#tuple8Ring[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple8Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "algebra.instances.TupleInstances.tuple8Rig", "link" : "algebra\/instances\/AllInstances.html#tuple8Rig[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple7Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6]): Semiring[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "algebra.instances.TupleInstances.tuple7Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple7Semiring[A0,A1,A2,A3,A4,A5,A6](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple7Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6]): Rng[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "algebra.instances.TupleInstances.tuple7Rng", "link" : "algebra\/instances\/AllInstances.html#tuple7Rng[A0,A1,A2,A3,A4,A5,A6](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple7Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6]): Ring[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "algebra.instances.TupleInstances.tuple7Ring", "link" : "algebra\/instances\/AllInstances.html#tuple7Ring[A0,A1,A2,A3,A4,A5,A6](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple7Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6]): Rig[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "algebra.instances.TupleInstances.tuple7Rig", "link" : "algebra\/instances\/AllInstances.html#tuple7Rig[A0,A1,A2,A3,A4,A5,A6](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple6Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5]): Semiring[(A0, A1, A2, A3, A4, A5)]", "member" : "algebra.instances.TupleInstances.tuple6Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple6Semiring[A0,A1,A2,A3,A4,A5](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple6Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5]): Rng[(A0, A1, A2, A3, A4, A5)]", "member" : "algebra.instances.TupleInstances.tuple6Rng", "link" : "algebra\/instances\/AllInstances.html#tuple6Rng[A0,A1,A2,A3,A4,A5](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple6Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5]): Ring[(A0, A1, A2, A3, A4, A5)]", "member" : "algebra.instances.TupleInstances.tuple6Ring", "link" : "algebra\/instances\/AllInstances.html#tuple6Ring[A0,A1,A2,A3,A4,A5](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple6Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5]): Rig[(A0, A1, A2, A3, A4, A5)]", "member" : "algebra.instances.TupleInstances.tuple6Rig", "link" : "algebra\/instances\/AllInstances.html#tuple6Rig[A0,A1,A2,A3,A4,A5](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple5Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4]): Semiring[(A0, A1, A2, A3, A4)]", "member" : "algebra.instances.TupleInstances.tuple5Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple5Semiring[A0,A1,A2,A3,A4](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4]):algebra.ring.Semiring[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple5Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4]): Rng[(A0, A1, A2, A3, A4)]", "member" : "algebra.instances.TupleInstances.tuple5Rng", "link" : "algebra\/instances\/AllInstances.html#tuple5Rng[A0,A1,A2,A3,A4](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4]):algebra.ring.Rng[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple5Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4]): Ring[(A0, A1, A2, A3, A4)]", "member" : "algebra.instances.TupleInstances.tuple5Ring", "link" : "algebra\/instances\/AllInstances.html#tuple5Ring[A0,A1,A2,A3,A4](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4]):algebra.ring.Ring[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple5Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4]): Rig[(A0, A1, A2, A3, A4)]", "member" : "algebra.instances.TupleInstances.tuple5Rig", "link" : "algebra\/instances\/AllInstances.html#tuple5Rig[A0,A1,A2,A3,A4](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4]):algebra.ring.Rig[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple4Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3]): Semiring[(A0, A1, A2, A3)]", "member" : "algebra.instances.TupleInstances.tuple4Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple4Semiring[A0,A1,A2,A3](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3]):algebra.ring.Semiring[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple4Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3]): Rng[(A0, A1, A2, A3)]", "member" : "algebra.instances.TupleInstances.tuple4Rng", "link" : "algebra\/instances\/AllInstances.html#tuple4Rng[A0,A1,A2,A3](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3]):algebra.ring.Rng[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple4Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3]): Ring[(A0, A1, A2, A3)]", "member" : "algebra.instances.TupleInstances.tuple4Ring", "link" : "algebra\/instances\/AllInstances.html#tuple4Ring[A0,A1,A2,A3](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3]):algebra.ring.Ring[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple4Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3]): Rig[(A0, A1, A2, A3)]", "member" : "algebra.instances.TupleInstances.tuple4Rig", "link" : "algebra\/instances\/AllInstances.html#tuple4Rig[A0,A1,A2,A3](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3]):algebra.ring.Rig[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple3Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2]): Semiring[(A0, A1, A2)]", "member" : "algebra.instances.TupleInstances.tuple3Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple3Semiring[A0,A1,A2](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2]):algebra.ring.Semiring[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple3Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2]): Rng[(A0, A1, A2)]", "member" : "algebra.instances.TupleInstances.tuple3Rng", "link" : "algebra\/instances\/AllInstances.html#tuple3Rng[A0,A1,A2](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2]):algebra.ring.Rng[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple3Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2]): Ring[(A0, A1, A2)]", "member" : "algebra.instances.TupleInstances.tuple3Ring", "link" : "algebra\/instances\/AllInstances.html#tuple3Ring[A0,A1,A2](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2]):algebra.ring.Ring[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple3Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2]): Rig[(A0, A1, A2)]", "member" : "algebra.instances.TupleInstances.tuple3Rig", "link" : "algebra\/instances\/AllInstances.html#tuple3Rig[A0,A1,A2](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2]):algebra.ring.Rig[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple2Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1]): Semiring[(A0, A1)]", "member" : "algebra.instances.TupleInstances.tuple2Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple2Semiring[A0,A1](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1]):algebra.ring.Semiring[(A0,A1)]", "kind" : "implicit def"}, {"label" : "tuple2Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1]): Rng[(A0, A1)]", "member" : "algebra.instances.TupleInstances.tuple2Rng", "link" : "algebra\/instances\/AllInstances.html#tuple2Rng[A0,A1](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1]):algebra.ring.Rng[(A0,A1)]", "kind" : "implicit def"}, {"label" : "tuple2Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1]): Ring[(A0, A1)]", "member" : "algebra.instances.TupleInstances.tuple2Ring", "link" : "algebra\/instances\/AllInstances.html#tuple2Ring[A0,A1](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1]):algebra.ring.Ring[(A0,A1)]", "kind" : "implicit def"}, {"label" : "tuple2Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1]): Rig[(A0, A1)]", "member" : "algebra.instances.TupleInstances.tuple2Rig", "link" : "algebra\/instances\/AllInstances.html#tuple2Rig[A0,A1](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1]):algebra.ring.Rig[(A0,A1)]", "kind" : "implicit def"}, {"label" : "tuple1Semiring", "tail" : "(A0: Semiring[A0]): Semiring[(A0)]", "member" : "algebra.instances.TupleInstances.tuple1Semiring", "link" : "algebra\/instances\/AllInstances.html#tuple1Semiring[A0](implicitA0:algebra.ring.Semiring[A0]):algebra.ring.Semiring[(A0,)]", "kind" : "implicit def"}, {"label" : "tuple1Rng", "tail" : "(A0: Rng[A0]): Rng[(A0)]", "member" : "algebra.instances.TupleInstances.tuple1Rng", "link" : "algebra\/instances\/AllInstances.html#tuple1Rng[A0](implicitA0:algebra.ring.Rng[A0]):algebra.ring.Rng[(A0,)]", "kind" : "implicit def"}, {"label" : "tuple1Ring", "tail" : "(A0: Ring[A0]): Ring[(A0)]", "member" : "algebra.instances.TupleInstances.tuple1Ring", "link" : "algebra\/instances\/AllInstances.html#tuple1Ring[A0](implicitA0:algebra.ring.Ring[A0]):algebra.ring.Ring[(A0,)]", "kind" : "implicit def"}, {"label" : "tuple1Rig", "tail" : "(A0: Rig[A0]): Rig[(A0)]", "member" : "algebra.instances.TupleInstances.tuple1Rig", "link" : "algebra\/instances\/AllInstances.html#tuple1Rig[A0](implicitA0:algebra.ring.Rig[A0]):algebra.ring.Rig[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple22", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17], A18: cats.kernel.Semilattice[A18], A19: cats.kernel.Semilattice[A19], A20: cats.kernel.Semilattice[A20], A21: cats.kernel.Semilattice[A21]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple22", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20],implicitA21:cats.kernel.Semilattice[A21]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple22", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17], A18: cats.kernel.Semigroup[A18], A19: cats.kernel.Semigroup[A19], A20: cats.kernel.Semigroup[A20], A21: cats.kernel.Semigroup[A21]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple22", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20],implicitA21:cats.kernel.Semigroup[A21]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple22", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17], A18: cats.kernel.PartialOrder[A18], A19: cats.kernel.PartialOrder[A19], A20: cats.kernel.PartialOrder[A20], A21: cats.kernel.PartialOrder[A21]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple22", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20],implicitA21:cats.kernel.PartialOrder[A21]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple22", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17], A18: cats.kernel.Order[A18], A19: cats.kernel.Order[A19], A20: cats.kernel.Order[A20], A21: cats.kernel.Order[A21]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple22", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20],implicitA21:cats.kernel.Order[A21]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple22", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17], A18: cats.kernel.Monoid[A18], A19: cats.kernel.Monoid[A19], A20: cats.kernel.Monoid[A20], A21: cats.kernel.Monoid[A21]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple22", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20],implicitA21:cats.kernel.Monoid[A21]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple22", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17], A18: cats.kernel.Eq[A18], A19: cats.kernel.Eq[A19], A20: cats.kernel.Eq[A20], A21: cats.kernel.Eq[A21]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple22", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20],implicitA21:cats.kernel.Eq[A21]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple22", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17], A18: cats.kernel.Group[A18], A19: cats.kernel.Group[A19], A20: cats.kernel.Group[A20], A21: cats.kernel.Group[A21]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple22", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20],implicitA21:cats.kernel.Group[A21]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple22", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17], A18: cats.kernel.Band[A18], A19: cats.kernel.Band[A19], A20: cats.kernel.Band[A20], A21: cats.kernel.Band[A21]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple22", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20],implicitA21:cats.kernel.Band[A21]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple21", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17], A18: cats.kernel.Semilattice[A18], A19: cats.kernel.Semilattice[A19], A20: cats.kernel.Semilattice[A20]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple21", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple21", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17], A18: cats.kernel.Semigroup[A18], A19: cats.kernel.Semigroup[A19], A20: cats.kernel.Semigroup[A20]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple21", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple21", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17], A18: cats.kernel.PartialOrder[A18], A19: cats.kernel.PartialOrder[A19], A20: cats.kernel.PartialOrder[A20]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple21", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple21", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17], A18: cats.kernel.Order[A18], A19: cats.kernel.Order[A19], A20: cats.kernel.Order[A20]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple21", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple21", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17], A18: cats.kernel.Monoid[A18], A19: cats.kernel.Monoid[A19], A20: cats.kernel.Monoid[A20]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple21", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple21", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17], A18: cats.kernel.Eq[A18], A19: cats.kernel.Eq[A19], A20: cats.kernel.Eq[A20]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple21", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple21", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17], A18: cats.kernel.Group[A18], A19: cats.kernel.Group[A19], A20: cats.kernel.Group[A20]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple21", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple21", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17], A18: cats.kernel.Band[A18], A19: cats.kernel.Band[A19], A20: cats.kernel.Band[A20]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple21", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple20", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17], A18: cats.kernel.Semilattice[A18], A19: cats.kernel.Semilattice[A19]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple20", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple20", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17], A18: cats.kernel.Semigroup[A18], A19: cats.kernel.Semigroup[A19]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple20", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple20", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17], A18: cats.kernel.PartialOrder[A18], A19: cats.kernel.PartialOrder[A19]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple20", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple20", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17], A18: cats.kernel.Order[A18], A19: cats.kernel.Order[A19]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple20", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple20", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17], A18: cats.kernel.Monoid[A18], A19: cats.kernel.Monoid[A19]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple20", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple20", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17], A18: cats.kernel.Eq[A18], A19: cats.kernel.Eq[A19]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple20", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple20", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17], A18: cats.kernel.Group[A18], A19: cats.kernel.Group[A19]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple20", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple20", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17], A18: cats.kernel.Band[A18], A19: cats.kernel.Band[A19]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple20", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple19", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17], A18: cats.kernel.Semilattice[A18]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple19", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple19", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17], A18: cats.kernel.Semigroup[A18]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple19", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple19", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17], A18: cats.kernel.PartialOrder[A18]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple19", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple19", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17], A18: cats.kernel.Order[A18]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple19", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple19", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17], A18: cats.kernel.Monoid[A18]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple19", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple19", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17], A18: cats.kernel.Eq[A18]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple19", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple19", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17], A18: cats.kernel.Group[A18]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple19", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple19", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17], A18: cats.kernel.Band[A18]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple19", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple18", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple18", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple18", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple18", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple18", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple18", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple18", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple18", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple18", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple18", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple18", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple18", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple18", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple18", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple18", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple18", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple17", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple17", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple17", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple17", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple17", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple17", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple17", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple17", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple17", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple17", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple17", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple17", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple17", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple17", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple17", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple17", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple16", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple16", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple16", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple16", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple16", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple16", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple16", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple16", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple16", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple16", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple16", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple16", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple16", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple16", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple16", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple16", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple15", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple15", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple15", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple15", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple15", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple15", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple15", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple15", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple15", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple15", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple15", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple15", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple15", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple15", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple15", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple15", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple14", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple14", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple14", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple14", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple14", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple14", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple14", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple14", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple14", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple14", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple14", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple14", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple14", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple14", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple14", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple14", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple13", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple13", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple13", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple13", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple13", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple13", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple13", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple13", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple13", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple13", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple13", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple13", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple13", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple13", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple13", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple13", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple12", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple12", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple12", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple12", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple12", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple12", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple12", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple12", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple12", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple12", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple12", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple12", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple12", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple12", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple12", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple12", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple11", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple11", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple11", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple11", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple11", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple11", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple11", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple11", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple11", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple11", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple11", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple11", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple11", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple11", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple11", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple11", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple10", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple10", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple10", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple10", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple10", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple10", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple10", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple10", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple10", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple10", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple10", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple10", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple10", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple10", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple10", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple10", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple9", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple9", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple9", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple9", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple9", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple9", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple9", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple9", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple9", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple9", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple9", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple9", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple9", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple9", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple9", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple9", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple8", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple8", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple8", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple8", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple8", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple8", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple8", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple8", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple8", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple8", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple8", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple8", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple8", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple8", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple8", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple8", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple7", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple7", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple7", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple7", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple7", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple7", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple7", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple7", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple7", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple7", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple7", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple7", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple7", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple7", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple7", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple7", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple6", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple6", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple6", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple6", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple6", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple6", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple6", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple6", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple6", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple6", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple6", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple6", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple6", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple6", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple6", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple6", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple5", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple5", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple5", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple5", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple5", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple5", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple5", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4]): cats.kernel.Order[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple5", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4]):cats.kernel.Order[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple5", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4]): cats.kernel.Monoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple5", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4]):cats.kernel.Monoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple5", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4]): cats.kernel.Eq[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple5", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4]):cats.kernel.Eq[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple5", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4]): cats.kernel.Group[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple5", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4]):cats.kernel.Group[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple5", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4]): cats.kernel.Band[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple5", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4]):cats.kernel.Band[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple4", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3]): cats.kernel.Semilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple4", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3]):cats.kernel.Semilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple4", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3]): cats.kernel.Semigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple4", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3]):cats.kernel.Semigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple4", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3]): cats.kernel.PartialOrder[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple4", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3]):cats.kernel.PartialOrder[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple4", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3]): cats.kernel.Order[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple4", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3]):cats.kernel.Order[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple4", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3]): cats.kernel.Monoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple4", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3]):cats.kernel.Monoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple4", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3]): cats.kernel.Eq[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple4", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3]):cats.kernel.Eq[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple4", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3]): cats.kernel.Group[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple4", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3]):cats.kernel.Group[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple4", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3]): cats.kernel.Band[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple4", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3]):cats.kernel.Band[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple3", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2]): cats.kernel.Semilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple3", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2]):cats.kernel.Semilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple3", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2]): cats.kernel.Semigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple3", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2]):cats.kernel.Semigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple3", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2]): cats.kernel.PartialOrder[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple3", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2]):cats.kernel.PartialOrder[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple3", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2]): cats.kernel.Order[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple3", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2]):cats.kernel.Order[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple3", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2]): cats.kernel.Monoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple3", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2]):cats.kernel.Monoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple3", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2]): cats.kernel.Eq[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple3", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple3[A0,A1,A2](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2]):cats.kernel.Eq[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple3", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2]): cats.kernel.Group[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple3", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2]):cats.kernel.Group[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple3", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2]): cats.kernel.Band[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple3", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple3[A0,A1,A2](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2]):cats.kernel.Band[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple2", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1]): cats.kernel.Semilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple2", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1]):cats.kernel.Semilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple2", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1]): cats.kernel.Semigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple2", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1]):cats.kernel.Semigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple2", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1]): cats.kernel.PartialOrder[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple2", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple2[A0,A1](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1]):cats.kernel.PartialOrder[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple2", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1]): cats.kernel.Order[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple2", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple2[A0,A1](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1]):cats.kernel.Order[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple2", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1]): cats.kernel.Monoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple2", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple2[A0,A1](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1]):cats.kernel.Monoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple2", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1]): cats.kernel.Eq[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple2", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple2[A0,A1](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1]):cats.kernel.Eq[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple2", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1]): cats.kernel.Group[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple2", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple2[A0,A1](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1]):cats.kernel.Group[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple2", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1]): cats.kernel.Band[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple2", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple2[A0,A1](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1]):cats.kernel.Band[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple1", "tail" : "(A0: cats.kernel.Semilattice[A0]): cats.kernel.Semilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple1", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForTuple1[A0](implicitA0:cats.kernel.Semilattice[A0]):cats.kernel.Semilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple1", "tail" : "(A0: cats.kernel.Semigroup[A0]): cats.kernel.Semigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple1", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemigroupForTuple1[A0](implicitA0:cats.kernel.Semigroup[A0]):cats.kernel.Semigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple1", "tail" : "(A0: cats.kernel.PartialOrder[A0]): cats.kernel.PartialOrder[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple1", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForTuple1[A0](implicitA0:cats.kernel.PartialOrder[A0]):cats.kernel.PartialOrder[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple1", "tail" : "(A0: cats.kernel.Order[A0]): cats.kernel.Order[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple1", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForTuple1[A0](implicitA0:cats.kernel.Order[A0]):cats.kernel.Order[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple1", "tail" : "(A0: cats.kernel.Monoid[A0]): cats.kernel.Monoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple1", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForTuple1[A0](implicitA0:cats.kernel.Monoid[A0]):cats.kernel.Monoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple1", "tail" : "(A0: cats.kernel.Eq[A0]): cats.kernel.Eq[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple1", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForTuple1[A0](implicitA0:cats.kernel.Eq[A0]):cats.kernel.Eq[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple1", "tail" : "(A0: cats.kernel.Group[A0]): cats.kernel.Group[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple1", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForTuple1[A0](implicitA0:cats.kernel.Group[A0]):cats.kernel.Group[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple1", "tail" : "(A0: cats.kernel.Band[A0]): cats.kernel.Band[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple1", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdBandForTuple1[A0](implicitA0:cats.kernel.Band[A0]):cats.kernel.Band[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": cats.kernel.Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": cats.kernel.Order[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForString:cats.kernel.Order[String]", "kind" : "implicit val"}, {"label" : "ShortMinMaxLattice", "tail" : ": BoundedDistributiveLattice[Short]", "member" : "algebra.instances.ShortInstances.ShortMinMaxLattice", "link" : "algebra\/instances\/AllInstances.html#ShortMinMaxLattice:algebra.lattice.BoundedDistributiveLattice[Short]", "kind" : "val"}, {"label" : "shortAlgebra", "tail" : ": ShortAlgebra", "member" : "algebra.instances.ShortInstances.shortAlgebra", "link" : "algebra\/instances\/AllInstances.html#shortAlgebra:algebra.instances.ShortAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForShort", "tail" : ": cats.kernel.CommutativeGroup[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdGroupForShort", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForShort:cats.kernel.CommutativeGroup[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForShort", "tail" : ": cats.kernel.Order[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdOrderForShort", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForShort:cats.kernel.Order[Short]", "kind" : "implicit val"}, {"label" : "setBoolRng", "tail" : "(): BoolRng[Set[A]]", "member" : "algebra.instances.SetInstances.setBoolRng", "link" : "algebra\/instances\/AllInstances.html#setBoolRng[A]:algebra.ring.BoolRng[Set[A]]", "kind" : "def"}, {"label" : "setSemiring", "tail" : "(): Semiring[Set[A]]", "member" : "algebra.instances.SetInstances.setSemiring", "link" : "algebra\/instances\/AllInstances.html#setSemiring[A]:algebra.ring.Semiring[Set[A]]", "kind" : "implicit def"}, {"label" : "setLattice", "tail" : "(): GenBool[Set[A]]", "member" : "algebra.instances.SetInstances.setLattice", "link" : "algebra\/instances\/AllInstances.html#setLattice[A]:algebra.lattice.GenBool[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForSet", "tail" : "(): cats.kernel.BoundedSemilattice[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdSemilatticeForSet", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForSet[A]:cats.kernel.BoundedSemilattice[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForSet", "tail" : "(): cats.kernel.PartialOrder[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdPartialOrderForSet", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForSet[A]:cats.kernel.PartialOrder[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForOption", "tail" : "(arg0: cats.kernel.Semigroup[A]): cats.kernel.Monoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdMonoidForOption", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForOption[A](implicitevidence$2:cats.kernel.Semigroup[A]):cats.kernel.Monoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForOption", "tail" : "(arg0: cats.kernel.Order[A]): cats.kernel.Order[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdOrderForOption", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForOption[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForOption", "tail" : "(arg0: cats.kernel.PartialOrder[A]): cats.kernel.PartialOrder[Option[A]]", "member" : "cats.kernel.instances.OptionInstances1.catsKernelStdPartialOrderForOption", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForOption[A](implicitevidence$3:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForOption", "tail" : "(arg0: cats.kernel.Eq[A]): cats.kernel.Eq[Option[A]]", "member" : "cats.kernel.instances.OptionInstances0.catsKernelStdEqForOption", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForOption[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Option[A]]", "kind" : "implicit def"}, {"label" : "mapSemiring", "tail" : "(arg0: Semiring[V]): MapSemiring[K, V]", "member" : "algebra.instances.MapInstances2.mapSemiring", "link" : "algebra\/instances\/AllInstances.html#mapSemiring[K,V](implicitevidence$1:algebra.ring.Semiring[V]):algebra.instances.MapSemiring[K,V]", "kind" : "implicit def"}, {"label" : "mapAdditiveMonoid", "tail" : "(arg0: AdditiveSemigroup[V]): MapAdditiveMonoid[K, V]", "member" : "algebra.instances.MapInstances0.mapAdditiveMonoid", "link" : "algebra\/instances\/AllInstances.html#mapAdditiveMonoid[K,V](implicitevidence$2:algebra.ring.AdditiveSemigroup[V]):algebra.instances.MapAdditiveMonoid[K,V]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForMap", "tail" : "(arg0: cats.kernel.Semigroup[V]): cats.kernel.Monoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdMonoidForMap", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForMap[K,V](implicitevidence$2:cats.kernel.Semigroup[V]):cats.kernel.Monoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForMap", "tail" : "(arg0: cats.kernel.Eq[V]): cats.kernel.Eq[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdEqForMap", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForMap[K,V](implicitevidence$1:cats.kernel.Eq[V]):cats.kernel.Eq[Map[K,V]]", "kind" : "implicit def"}, {"label" : "LongMinMaxLattice", "tail" : ": BoundedDistributiveLattice[Long]", "member" : "algebra.instances.LongInstances.LongMinMaxLattice", "link" : "algebra\/instances\/AllInstances.html#LongMinMaxLattice:algebra.lattice.BoundedDistributiveLattice[Long]", "kind" : "val"}, {"label" : "longAlgebra", "tail" : ": LongAlgebra", "member" : "algebra.instances.LongInstances.longAlgebra", "link" : "algebra\/instances\/AllInstances.html#longAlgebra:algebra.instances.LongAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": cats.kernel.CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": cats.kernel.Order[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForList", "tail" : "(): cats.kernel.Monoid[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdMonoidForList", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdMonoidForList[A]:cats.kernel.Monoid[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForList", "tail" : "(arg0: cats.kernel.Order[A]): cats.kernel.Order[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdOrderForList", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForList", "tail" : "(arg0: cats.kernel.PartialOrder[A]): cats.kernel.PartialOrder[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdPartialOrderForList", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForList", "tail" : "(arg0: cats.kernel.Eq[A]): cats.kernel.Eq[List[A]]", "member" : "cats.kernel.instances.ListInstances2.catsKernelStdEqForList", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdEqForList[A](implicitevidence$3:cats.kernel.Eq[A]):cats.kernel.Eq[List[A]]", "kind" : "implicit def"}, {"label" : "IntMinMaxLattice", "tail" : ": BoundedDistributiveLattice[Int]", "member" : "algebra.instances.IntInstances.IntMinMaxLattice", "link" : "algebra\/instances\/AllInstances.html#IntMinMaxLattice:algebra.lattice.BoundedDistributiveLattice[Int]", "kind" : "val"}, {"label" : "intAlgebra", "tail" : ": IntAlgebra", "member" : "algebra.instances.IntInstances.intAlgebra", "link" : "algebra\/instances\/AllInstances.html#intAlgebra:algebra.instances.IntAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": cats.kernel.CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": cats.kernel.Order[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]", "kind" : "implicit val"}, {"label" : "FloatMinMaxLattice", "tail" : ": DistributiveLattice[Float]", "member" : "algebra.instances.FloatInstances.FloatMinMaxLattice", "link" : "algebra\/instances\/AllInstances.html#FloatMinMaxLattice:algebra.lattice.DistributiveLattice[Float]", "kind" : "val"}, {"label" : "floatAlgebra", "tail" : ": Field[Float]", "member" : "algebra.instances.FloatInstances.floatAlgebra", "link" : "algebra\/instances\/AllInstances.html#floatAlgebra:algebra.ring.Field[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": cats.kernel.CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": cats.kernel.Order[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]", "kind" : "implicit val"}, {"label" : "DoubleMinMaxLattice", "tail" : ": DistributiveLattice[Double]", "member" : "algebra.instances.DoubleInstances.DoubleMinMaxLattice", "link" : "algebra\/instances\/AllInstances.html#DoubleMinMaxLattice:algebra.lattice.DistributiveLattice[Double]", "kind" : "val"}, {"label" : "doubleAlgebra", "tail" : ": Field[Double]", "member" : "algebra.instances.DoubleInstances.doubleAlgebra", "link" : "algebra\/instances\/AllInstances.html#doubleAlgebra:algebra.ring.Field[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": cats.kernel.CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": cats.kernel.Order[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "ByteMinMaxLattice", "tail" : ": BoundedDistributiveLattice[Byte]", "member" : "algebra.instances.ByteInstances.ByteMinMaxLattice", "link" : "algebra\/instances\/AllInstances.html#ByteMinMaxLattice:algebra.lattice.BoundedDistributiveLattice[Byte]", "kind" : "val"}, {"label" : "byteAlgebra", "tail" : ": ByteAlgebra", "member" : "algebra.instances.ByteInstances.byteAlgebra", "link" : "algebra\/instances\/AllInstances.html#byteAlgebra:algebra.instances.ByteAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForByte", "tail" : ": cats.kernel.CommutativeGroup[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdGroupForByte", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForByte:cats.kernel.CommutativeGroup[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForByte", "tail" : ": cats.kernel.Order[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdOrderForByte", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForByte:cats.kernel.Order[Byte]", "kind" : "implicit val"}, {"label" : "booleanRing", "tail" : ": BoolRing[Boolean]", "member" : "algebra.instances.BooleanInstances.booleanRing", "link" : "algebra\/instances\/AllInstances.html#booleanRing:algebra.ring.BoolRing[Boolean]", "kind" : "val"}, {"label" : "booleanAlgebra", "tail" : ": BooleanAlgebra", "member" : "algebra.instances.BooleanInstances.booleanAlgebra", "link" : "algebra\/instances\/AllInstances.html#booleanAlgebra:algebra.instances.BooleanAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": cats.kernel.Order[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]", "kind" : "implicit val"}, {"label" : "bitSetAlgebra", "tail" : ": BitSetAlgebra", "member" : "algebra.instances.BitSetInstances.bitSetAlgebra", "link" : "algebra\/instances\/AllInstances.html#bitSetAlgebra:algebra.instances.BitSetAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdSemilatticeForBitSet", "tail" : ": cats.kernel.BoundedSemilattice[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdSemilatticeForBitSet", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdSemilatticeForBitSet:cats.kernel.BoundedSemilattice[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdPartialOrderForBitSet", "tail" : ": cats.kernel.PartialOrder[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdPartialOrderForBitSet", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdPartialOrderForBitSet:cats.kernel.PartialOrder[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "bigIntAlgebra", "tail" : ": BigIntAlgebra", "member" : "algebra.instances.BigIntInstances.bigIntAlgebra", "link" : "algebra\/instances\/AllInstances.html#bigIntAlgebra:algebra.instances.BigIntAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigInt", "tail" : ": cats.kernel.CommutativeGroup[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdGroupForBigInt", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForBigInt:cats.kernel.CommutativeGroup[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigInt", "tail" : ": cats.kernel.Order[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdOrderForBigInt", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForBigInt:cats.kernel.Order[BigInt]", "kind" : "implicit val"}, {"label" : "bigDecimalAlgebra", "tail" : ": BigDecimalAlgebra", "member" : "algebra.instances.BigDecimalInstances.bigDecimalAlgebra", "link" : "algebra\/instances\/AllInstances.html#bigDecimalAlgebra:algebra.instances.BigDecimalAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigDecimal", "tail" : ": cats.kernel.CommutativeGroup[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdGroupForBigDecimal", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdGroupForBigDecimal:cats.kernel.CommutativeGroup[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigDecimal", "tail" : ": cats.kernel.Order[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdOrderForBigDecimal", "link" : "algebra\/instances\/AllInstances.html#catsKernelStdOrderForBigDecimal:cats.kernel.Order[BigDecimal]", "kind" : "implicit val"}, {"label" : "arrayPartialOrder", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Array[A]]", "member" : "algebra.instances.ArrayInstances.arrayPartialOrder", "link" : "algebra\/instances\/AllInstances.html#arrayPartialOrder[A](implicitevidence$3:algebra.PartialOrder[A]):algebra.PartialOrder[Array[A]]", "kind" : "implicit def"}, {"label" : "arrayOrder", "tail" : "(arg0: Order[A]): Order[Array[A]]", "member" : "algebra.instances.ArrayInstances.arrayOrder", "link" : "algebra\/instances\/AllInstances.html#arrayOrder[A](implicitevidence$2:algebra.Order[A]):algebra.Order[Array[A]]", "kind" : "implicit def"}, {"label" : "arrayEq", "tail" : "(arg0: Eq[A]): Eq[Array[A]]", "member" : "algebra.instances.ArrayInstances.arrayEq", "link" : "algebra\/instances\/AllInstances.html#arrayEq[A](implicitevidence$1:algebra.Eq[A]):algebra.Eq[Array[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/AllInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/AllInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/AllInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/AllInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/AllInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/AllInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/AllInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/AllInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/AllInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/AllInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/AllInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/AllInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/AllInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/AllInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/AllInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/AllInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/AllInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/AllInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/AllInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/AllInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.ArrayInstances", "members_trait" : [{"label" : "arrayPartialOrder", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Array[A]]", "member" : "algebra.instances.ArrayInstances.arrayPartialOrder", "link" : "algebra\/instances\/ArrayInstances.html#arrayPartialOrder[A](implicitevidence$3:algebra.PartialOrder[A]):algebra.PartialOrder[Array[A]]", "kind" : "implicit def"}, {"label" : "arrayOrder", "tail" : "(arg0: Order[A]): Order[Array[A]]", "member" : "algebra.instances.ArrayInstances.arrayOrder", "link" : "algebra\/instances\/ArrayInstances.html#arrayOrder[A](implicitevidence$2:algebra.Order[A]):algebra.Order[Array[A]]", "kind" : "implicit def"}, {"label" : "arrayEq", "tail" : "(arg0: Eq[A]): Eq[Array[A]]", "member" : "algebra.instances.ArrayInstances.arrayEq", "link" : "algebra\/instances\/ArrayInstances.html#arrayEq[A](implicitevidence$1:algebra.Eq[A]):algebra.Eq[Array[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/ArrayInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/ArrayInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/ArrayInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/ArrayInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/ArrayInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/ArrayInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/ArrayInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ArrayInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ArrayInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ArrayInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/ArrayInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/ArrayInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/ArrayInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/ArrayInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/ArrayInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/ArrayInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/ArrayInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/ArrayInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/ArrayInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/ArrayInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.BigDecimalAlgebra", "shortDescription" : "", "members_class" : [{"label" : "fromBigInt", "tail" : "(n: BigInt): BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.fromBigInt", "link" : "algebra\/instances\/BigDecimalAlgebra.html#fromBigInt(n:BigInt):BigDecimal", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.fromInt", "link" : "algebra\/instances\/BigDecimalAlgebra.html#fromInt(n:Int):BigDecimal", "kind" : "def"}, {"label" : "pow", "tail" : "(a: BigDecimal, k: Int): BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.pow", "link" : "algebra\/instances\/BigDecimalAlgebra.html#pow(a:BigDecimal,k:Int):BigDecimal", "kind" : "def"}, {"label" : "div", "tail" : "(a: BigDecimal, b: BigDecimal): BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.div", "link" : "algebra\/instances\/BigDecimalAlgebra.html#div(a:BigDecimal,b:BigDecimal):BigDecimal", "kind" : "def"}, {"label" : "times", "tail" : "(a: BigDecimal, b: BigDecimal): BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.times", "link" : "algebra\/instances\/BigDecimalAlgebra.html#times(a:BigDecimal,b:BigDecimal):BigDecimal", "kind" : "def"}, {"label" : "minus", "tail" : "(a: BigDecimal, b: BigDecimal): BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.minus", "link" : "algebra\/instances\/BigDecimalAlgebra.html#minus(a:BigDecimal,b:BigDecimal):BigDecimal", "kind" : "def"}, {"label" : "negate", "tail" : "(a: BigDecimal): BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.negate", "link" : "algebra\/instances\/BigDecimalAlgebra.html#negate(a:BigDecimal):BigDecimal", "kind" : "def"}, {"label" : "plus", "tail" : "(a: BigDecimal, b: BigDecimal): BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.plus", "link" : "algebra\/instances\/BigDecimalAlgebra.html#plus(a:BigDecimal,b:BigDecimal):BigDecimal", "kind" : "def"}, {"label" : "one", "tail" : ": BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.one", "link" : "algebra\/instances\/BigDecimalAlgebra.html#one:BigDecimal", "kind" : "val"}, {"label" : "zero", "tail" : ": BigDecimal", "member" : "algebra.instances.BigDecimalAlgebra.zero", "link" : "algebra\/instances\/BigDecimalAlgebra.html#zero:BigDecimal", "kind" : "val"}, {"member" : "algebra.instances.BigDecimalAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "fromDouble", "tail" : "(a: Double): BigDecimal", "member" : "algebra.ring.Field.fromDouble", "link" : "algebra\/instances\/BigDecimalAlgebra.html#fromDouble(a:Double):A", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): CommutativeGroup[BigDecimal]", "member" : "algebra.ring.MultiplicativeCommutativeGroup.multiplicative", "link" : "algebra\/instances\/BigDecimalAlgebra.html#multiplicative:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: BigDecimal): BigDecimal", "member" : "algebra.ring.MultiplicativeGroup.reciprocal", "link" : "algebra\/instances\/BigDecimalAlgebra.html#reciprocal(x:A):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[BigDecimal]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/BigDecimalAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: BigDecimal, n: Int): BigDecimal", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/BigDecimalAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[BigDecimal]): Option[BigDecimal]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/BigDecimalAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[BigDecimal]): BigDecimal", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/BigDecimalAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: BigDecimal)(ev: Eq[BigDecimal]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/instances\/BigDecimalAlgebra.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: BigDecimal, n: Int): BigDecimal", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/BigDecimalAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[BigDecimal]): Option[BigDecimal]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/BigDecimalAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[BigDecimal]): BigDecimal", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/BigDecimalAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: BigDecimal)(ev: Eq[BigDecimal]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/BigDecimalAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: BigDecimal, n: Int): BigDecimal", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/BigDecimalAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/BigDecimalAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/BigDecimalAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/BigDecimalAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/BigDecimalAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/BigDecimalAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/BigDecimalAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/BigDecimalAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigDecimalAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigDecimalAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigDecimalAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/BigDecimalAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/BigDecimalAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/BigDecimalAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/BigDecimalAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/BigDecimalAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/BigDecimalAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/BigDecimalAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/BigDecimalAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/BigDecimalAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/BigDecimalAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.BigDecimalInstances", "members_trait" : [{"label" : "bigDecimalAlgebra", "tail" : ": BigDecimalAlgebra", "member" : "algebra.instances.BigDecimalInstances.bigDecimalAlgebra", "link" : "algebra\/instances\/BigDecimalInstances.html#bigDecimalAlgebra:algebra.instances.BigDecimalAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigDecimal", "tail" : ": cats.kernel.CommutativeGroup[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdGroupForBigDecimal", "link" : "algebra\/instances\/BigDecimalInstances.html#catsKernelStdGroupForBigDecimal:cats.kernel.CommutativeGroup[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigDecimal", "tail" : ": cats.kernel.Order[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdOrderForBigDecimal", "link" : "algebra\/instances\/BigDecimalInstances.html#catsKernelStdOrderForBigDecimal:cats.kernel.Order[BigDecimal]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/BigDecimalInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/BigDecimalInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/BigDecimalInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/BigDecimalInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/BigDecimalInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/BigDecimalInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/BigDecimalInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigDecimalInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigDecimalInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigDecimalInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/BigDecimalInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/BigDecimalInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/BigDecimalInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/BigDecimalInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/BigDecimalInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/BigDecimalInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/BigDecimalInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/BigDecimalInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/BigDecimalInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/BigDecimalInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.BigIntAlgebra", "shortDescription" : "", "members_class" : [{"label" : "fromBigInt", "tail" : "(n: BigInt): BigInt", "member" : "algebra.instances.BigIntAlgebra.fromBigInt", "link" : "algebra\/instances\/BigIntAlgebra.html#fromBigInt(n:BigInt):BigInt", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): BigInt", "member" : "algebra.instances.BigIntAlgebra.fromInt", "link" : "algebra\/instances\/BigIntAlgebra.html#fromInt(n:Int):BigInt", "kind" : "def"}, {"label" : "pow", "tail" : "(a: BigInt, k: Int): BigInt", "member" : "algebra.instances.BigIntAlgebra.pow", "link" : "algebra\/instances\/BigIntAlgebra.html#pow(a:BigInt,k:Int):BigInt", "kind" : "def"}, {"label" : "times", "tail" : "(a: BigInt, b: BigInt): BigInt", "member" : "algebra.instances.BigIntAlgebra.times", "link" : "algebra\/instances\/BigIntAlgebra.html#times(a:BigInt,b:BigInt):BigInt", "kind" : "def"}, {"label" : "minus", "tail" : "(a: BigInt, b: BigInt): BigInt", "member" : "algebra.instances.BigIntAlgebra.minus", "link" : "algebra\/instances\/BigIntAlgebra.html#minus(a:BigInt,b:BigInt):BigInt", "kind" : "def"}, {"label" : "negate", "tail" : "(a: BigInt): BigInt", "member" : "algebra.instances.BigIntAlgebra.negate", "link" : "algebra\/instances\/BigIntAlgebra.html#negate(a:BigInt):BigInt", "kind" : "def"}, {"label" : "plus", "tail" : "(a: BigInt, b: BigInt): BigInt", "member" : "algebra.instances.BigIntAlgebra.plus", "link" : "algebra\/instances\/BigIntAlgebra.html#plus(a:BigInt,b:BigInt):BigInt", "kind" : "def"}, {"label" : "one", "tail" : ": BigInt", "member" : "algebra.instances.BigIntAlgebra.one", "link" : "algebra\/instances\/BigIntAlgebra.html#one:BigInt", "kind" : "val"}, {"label" : "zero", "tail" : ": BigInt", "member" : "algebra.instances.BigIntAlgebra.zero", "link" : "algebra\/instances\/BigIntAlgebra.html#zero:BigInt", "kind" : "val"}, {"member" : "algebra.instances.BigIntAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeMonoid[BigInt]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/instances\/BigIntAlgebra.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[BigInt]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/BigIntAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: BigInt, n: Int): BigInt", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/BigIntAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[BigInt]): Option[BigInt]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/BigIntAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[BigInt]): BigInt", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/BigIntAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: BigInt)(ev: Eq[BigInt]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/instances\/BigIntAlgebra.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: BigInt, n: Int): BigInt", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/BigIntAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[BigInt]): Option[BigInt]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/BigIntAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[BigInt]): BigInt", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/BigIntAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: BigInt)(ev: Eq[BigInt]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/BigIntAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: BigInt, n: Int): BigInt", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/BigIntAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/BigIntAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/BigIntAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/BigIntAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/BigIntAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/BigIntAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/BigIntAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/BigIntAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigIntAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigIntAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigIntAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/BigIntAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/BigIntAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/BigIntAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/BigIntAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/BigIntAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/BigIntAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/BigIntAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/BigIntAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/BigIntAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/BigIntAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.BigIntInstances", "members_trait" : [{"label" : "bigIntAlgebra", "tail" : ": BigIntAlgebra", "member" : "algebra.instances.BigIntInstances.bigIntAlgebra", "link" : "algebra\/instances\/BigIntInstances.html#bigIntAlgebra:algebra.instances.BigIntAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigInt", "tail" : ": cats.kernel.CommutativeGroup[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdGroupForBigInt", "link" : "algebra\/instances\/BigIntInstances.html#catsKernelStdGroupForBigInt:cats.kernel.CommutativeGroup[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigInt", "tail" : ": cats.kernel.Order[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdOrderForBigInt", "link" : "algebra\/instances\/BigIntInstances.html#catsKernelStdOrderForBigInt:cats.kernel.Order[BigInt]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/BigIntInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/BigIntInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/BigIntInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/BigIntInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/BigIntInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/BigIntInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/BigIntInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigIntInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigIntInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BigIntInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/BigIntInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/BigIntInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/BigIntInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/BigIntInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/BigIntInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/BigIntInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/BigIntInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/BigIntInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/BigIntInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/BigIntInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.BitSetAlgebra", "shortDescription" : "", "members_class" : [{"label" : "xor", "tail" : "(a: BitSet, b: BitSet): BitSet", "member" : "algebra.instances.BitSetAlgebra.xor", "link" : "algebra\/instances\/BitSetAlgebra.html#xor(a:scala.collection.immutable.BitSet,b:scala.collection.immutable.BitSet):scala.collection.immutable.BitSet", "kind" : "def"}, {"label" : "without", "tail" : "(a: BitSet, b: BitSet): BitSet", "member" : "algebra.instances.BitSetAlgebra.without", "link" : "algebra\/instances\/BitSetAlgebra.html#without(a:scala.collection.immutable.BitSet,b:scala.collection.immutable.BitSet):scala.collection.immutable.BitSet", "kind" : "def"}, {"label" : "or", "tail" : "(a: BitSet, b: BitSet): BitSet", "member" : "algebra.instances.BitSetAlgebra.or", "link" : "algebra\/instances\/BitSetAlgebra.html#or(a:scala.collection.immutable.BitSet,b:scala.collection.immutable.BitSet):scala.collection.immutable.BitSet", "kind" : "def"}, {"label" : "and", "tail" : "(a: BitSet, b: BitSet): BitSet", "member" : "algebra.instances.BitSetAlgebra.and", "link" : "algebra\/instances\/BitSetAlgebra.html#and(a:scala.collection.immutable.BitSet,b:scala.collection.immutable.BitSet):scala.collection.immutable.BitSet", "kind" : "def"}, {"label" : "zero", "tail" : ": BitSet", "member" : "algebra.instances.BitSetAlgebra.zero", "link" : "algebra\/instances\/BitSetAlgebra.html#zero:scala.collection.immutable.BitSet", "kind" : "val"}, {"member" : "algebra.instances.BitSetAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "asBoolRing", "tail" : "(): BoolRng[BitSet]", "member" : "algebra.lattice.GenBool.asBoolRing", "link" : "algebra\/instances\/BitSetAlgebra.html#asBoolRing:algebra.ring.BoolRng[A]", "kind" : "def"}, {"label" : "join", "tail" : "(a: BitSet, b: BitSet): BitSet", "member" : "algebra.lattice.GenBool.join", "link" : "algebra\/instances\/BitSetAlgebra.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: BitSet, b: BitSet): BitSet", "member" : "algebra.lattice.GenBool.meet", "link" : "algebra\/instances\/BitSetAlgebra.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[BitSet]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/instances\/BitSetAlgebra.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: BitSet)(ev: Eq[BitSet]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/instances\/BitSetAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "dual", "tail" : "(): Lattice[BitSet]", "member" : "algebra.lattice.Lattice.dual", "link" : "algebra\/instances\/BitSetAlgebra.html#dual:algebra.lattice.Lattice[A]", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[BitSet]): PartialOrder[BitSet]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/instances\/BitSetAlgebra.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): Semilattice[BitSet]", "member" : "algebra.lattice.MeetSemilattice.meetSemilattice", "link" : "algebra\/instances\/BitSetAlgebra.html#meetSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[BitSet]): PartialOrder[BitSet]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/instances\/BitSetAlgebra.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/BitSetAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/BitSetAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/BitSetAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/BitSetAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/BitSetAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/BitSetAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/BitSetAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BitSetAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BitSetAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BitSetAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/BitSetAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/BitSetAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/BitSetAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/BitSetAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/BitSetAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/BitSetAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/BitSetAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/BitSetAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/BitSetAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/BitSetAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.BitSetInstances", "members_trait" : [{"label" : "bitSetAlgebra", "tail" : ": BitSetAlgebra", "member" : "algebra.instances.BitSetInstances.bitSetAlgebra", "link" : "algebra\/instances\/BitSetInstances.html#bitSetAlgebra:algebra.instances.BitSetAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdSemilatticeForBitSet", "tail" : ": cats.kernel.BoundedSemilattice[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdSemilatticeForBitSet", "link" : "algebra\/instances\/BitSetInstances.html#catsKernelStdSemilatticeForBitSet:cats.kernel.BoundedSemilattice[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdPartialOrderForBitSet", "tail" : ": cats.kernel.PartialOrder[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdPartialOrderForBitSet", "link" : "algebra\/instances\/BitSetInstances.html#catsKernelStdPartialOrderForBitSet:cats.kernel.PartialOrder[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/BitSetInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/BitSetInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/BitSetInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/BitSetInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/BitSetInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/BitSetInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/BitSetInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BitSetInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BitSetInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BitSetInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/BitSetInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/BitSetInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/BitSetInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/BitSetInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/BitSetInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/BitSetInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/BitSetInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/BitSetInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/BitSetInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/BitSetInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.BooleanAlgebra", "shortDescription" : "This commutative rig is different than the one obtained from GF(2).", "members_class" : [{"label" : "times", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.instances.BooleanAlgebra.times", "link" : "algebra\/instances\/BooleanAlgebra.html#times(a:Boolean,b:Boolean):Boolean", "kind" : "def"}, {"label" : "pow", "tail" : "(a: Boolean, b: Int): Boolean", "member" : "algebra.instances.BooleanAlgebra.pow", "link" : "algebra\/instances\/BooleanAlgebra.html#pow(a:Boolean,b:Int):Boolean", "kind" : "def"}, {"label" : "plus", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.instances.BooleanAlgebra.plus", "link" : "algebra\/instances\/BooleanAlgebra.html#plus(a:Boolean,b:Boolean):Boolean", "kind" : "def"}, {"label" : "complement", "tail" : "(x: Boolean): Boolean", "member" : "algebra.instances.BooleanAlgebra.complement", "link" : "algebra\/instances\/BooleanAlgebra.html#complement(x:Boolean):Boolean", "kind" : "def"}, {"label" : "or", "tail" : "(x: Boolean, y: Boolean): Boolean", "member" : "algebra.instances.BooleanAlgebra.or", "link" : "algebra\/instances\/BooleanAlgebra.html#or(x:Boolean,y:Boolean):Boolean", "kind" : "def"}, {"label" : "and", "tail" : "(x: Boolean, y: Boolean): Boolean", "member" : "algebra.instances.BooleanAlgebra.and", "link" : "algebra\/instances\/BooleanAlgebra.html#and(x:Boolean,y:Boolean):Boolean", "kind" : "def"}, {"label" : "isOne", "tail" : "(x: Boolean)(ev: Eq[Boolean]): Boolean", "member" : "algebra.instances.BooleanAlgebra.isOne", "link" : "algebra\/instances\/BooleanAlgebra.html#isOne(x:Boolean)(implicitev:algebra.Eq[Boolean]):Boolean", "kind" : "def"}, {"label" : "isZero", "tail" : "(x: Boolean)(ev: Eq[Boolean]): Boolean", "member" : "algebra.instances.BooleanAlgebra.isZero", "link" : "algebra\/instances\/BooleanAlgebra.html#isZero(x:Boolean)(implicitev:algebra.Eq[Boolean]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(): Boolean", "member" : "algebra.instances.BooleanAlgebra.one", "link" : "algebra\/instances\/BooleanAlgebra.html#one:Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(): Boolean", "member" : "algebra.instances.BooleanAlgebra.zero", "link" : "algebra\/instances\/BooleanAlgebra.html#zero:Boolean", "kind" : "def"}, {"member" : "algebra.instances.BooleanAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeMonoid[Boolean]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/instances\/BooleanAlgebra.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Boolean]): Option[Boolean]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/BooleanAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Boolean]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/BooleanAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Boolean, n: Int): Boolean", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/BooleanAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeMonoid[Boolean]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/instances\/BooleanAlgebra.html#additive:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Boolean]): Option[Boolean]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/BooleanAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Boolean]): Boolean", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/BooleanAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Boolean, n: Int): Boolean", "member" : "algebra.ring.AdditiveMonoid.sumN", "link" : "algebra\/instances\/BooleanAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Boolean, n: Int): Boolean", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/BooleanAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "asBoolRing", "tail" : "(): BoolRing[Boolean]", "member" : "algebra.lattice.Bool.asBoolRing", "link" : "algebra\/instances\/BooleanAlgebra.html#asBoolRing:algebra.ring.BoolRing[A]", "kind" : "def"}, {"label" : "dual", "tail" : "(): Bool[Boolean]", "member" : "algebra.lattice.Bool.dual", "link" : "algebra\/instances\/BooleanAlgebra.html#dual:algebra.lattice.Bool[A]", "kind" : "def"}, {"label" : "xor", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.lattice.Bool.xor", "link" : "algebra\/instances\/BooleanAlgebra.html#xor(a:A,b:A):A", "kind" : "def"}, {"label" : "without", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.lattice.Bool.without", "link" : "algebra\/instances\/BooleanAlgebra.html#without(a:A,b:A):A", "kind" : "def"}, {"label" : "imp", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.lattice.Bool.imp", "link" : "algebra\/instances\/BooleanAlgebra.html#imp(a:A,b:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.lattice.GenBool.join", "link" : "algebra\/instances\/BooleanAlgebra.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.lattice.GenBool.meet", "link" : "algebra\/instances\/BooleanAlgebra.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "nxor", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.lattice.Heyting.nxor", "link" : "algebra\/instances\/BooleanAlgebra.html#nxor(a:A,b:A):A", "kind" : "def"}, {"label" : "nor", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.lattice.Heyting.nor", "link" : "algebra\/instances\/BooleanAlgebra.html#nor(a:A,b:A):A", "kind" : "def"}, {"label" : "nand", "tail" : "(a: Boolean, b: Boolean): Boolean", "member" : "algebra.lattice.Heyting.nand", "link" : "algebra\/instances\/BooleanAlgebra.html#nand(a:A,b:A):A", "kind" : "def"}, {"label" : "asCommutativeRig", "tail" : "(): CommutativeRig[Boolean]", "member" : "algebra.lattice.BoundedDistributiveLattice.asCommutativeRig", "link" : "algebra\/instances\/BooleanAlgebra.html#asCommutativeRig:algebra.ring.CommutativeRig[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[Boolean]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/instances\/BooleanAlgebra.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[Boolean]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/instances\/BooleanAlgebra.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[Boolean]): PartialOrder[Boolean]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/instances\/BooleanAlgebra.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[Boolean]): PartialOrder[Boolean]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/instances\/BooleanAlgebra.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/BooleanAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/BooleanAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/BooleanAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/BooleanAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/BooleanAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/BooleanAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/BooleanAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BooleanAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BooleanAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BooleanAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/BooleanAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/BooleanAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/BooleanAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/BooleanAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/BooleanAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/BooleanAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/BooleanAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/BooleanAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/BooleanAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/BooleanAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.BooleanInstances", "members_trait" : [{"label" : "booleanRing", "tail" : ": BoolRing[Boolean]", "member" : "algebra.instances.BooleanInstances.booleanRing", "link" : "algebra\/instances\/BooleanInstances.html#booleanRing:algebra.ring.BoolRing[Boolean]", "kind" : "val"}, {"label" : "booleanAlgebra", "tail" : ": BooleanAlgebra", "member" : "algebra.instances.BooleanInstances.booleanAlgebra", "link" : "algebra\/instances\/BooleanInstances.html#booleanAlgebra:algebra.instances.BooleanAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": cats.kernel.Order[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "algebra\/instances\/BooleanInstances.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/BooleanInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/BooleanInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/BooleanInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/BooleanInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/BooleanInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/BooleanInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/BooleanInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BooleanInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BooleanInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/BooleanInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/BooleanInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/BooleanInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/BooleanInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/BooleanInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/BooleanInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/BooleanInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/BooleanInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/BooleanInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/BooleanInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/BooleanInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.ByteAlgebra", "shortDescription" : "", "members_class" : [{"label" : "fromBigInt", "tail" : "(n: BigInt): Byte", "member" : "algebra.instances.ByteAlgebra.fromBigInt", "link" : "algebra\/instances\/ByteAlgebra.html#fromBigInt(n:BigInt):Byte", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): Byte", "member" : "algebra.instances.ByteAlgebra.fromInt", "link" : "algebra\/instances\/ByteAlgebra.html#fromInt(n:Int):Byte", "kind" : "def"}, {"label" : "pow", "tail" : "(x: Byte, y: Int): Byte", "member" : "algebra.instances.ByteAlgebra.pow", "link" : "algebra\/instances\/ByteAlgebra.html#pow(x:Byte,y:Int):Byte", "kind" : "def"}, {"label" : "times", "tail" : "(x: Byte, y: Byte): Byte", "member" : "algebra.instances.ByteAlgebra.times", "link" : "algebra\/instances\/ByteAlgebra.html#times(x:Byte,y:Byte):Byte", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Byte, y: Byte): Byte", "member" : "algebra.instances.ByteAlgebra.minus", "link" : "algebra\/instances\/ByteAlgebra.html#minus(x:Byte,y:Byte):Byte", "kind" : "def"}, {"label" : "negate", "tail" : "(x: Byte): Byte", "member" : "algebra.instances.ByteAlgebra.negate", "link" : "algebra\/instances\/ByteAlgebra.html#negate(x:Byte):Byte", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Byte, y: Byte): Byte", "member" : "algebra.instances.ByteAlgebra.plus", "link" : "algebra\/instances\/ByteAlgebra.html#plus(x:Byte,y:Byte):Byte", "kind" : "def"}, {"label" : "one", "tail" : "(): Byte", "member" : "algebra.instances.ByteAlgebra.one", "link" : "algebra\/instances\/ByteAlgebra.html#one:Byte", "kind" : "def"}, {"label" : "zero", "tail" : "(): Byte", "member" : "algebra.instances.ByteAlgebra.zero", "link" : "algebra\/instances\/ByteAlgebra.html#zero:Byte", "kind" : "def"}, {"member" : "algebra.instances.ByteAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeMonoid[Byte]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/instances\/ByteAlgebra.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Byte]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/ByteAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Byte, n: Int): Byte", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/ByteAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Byte]): Option[Byte]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/ByteAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Byte]): Byte", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/ByteAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Byte)(ev: Eq[Byte]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/instances\/ByteAlgebra.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Byte, n: Int): Byte", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/ByteAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Byte]): Option[Byte]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/ByteAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Byte]): Byte", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/ByteAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Byte)(ev: Eq[Byte]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/ByteAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Byte, n: Int): Byte", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/ByteAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/ByteAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/ByteAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/ByteAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/ByteAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/ByteAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/ByteAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/ByteAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ByteAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ByteAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ByteAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/ByteAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/ByteAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/ByteAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/ByteAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/ByteAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/ByteAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/ByteAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/ByteAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/ByteAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/ByteAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.ByteInstances", "members_trait" : [{"label" : "ByteMinMaxLattice", "tail" : ": BoundedDistributiveLattice[Byte]", "member" : "algebra.instances.ByteInstances.ByteMinMaxLattice", "link" : "algebra\/instances\/ByteInstances.html#ByteMinMaxLattice:algebra.lattice.BoundedDistributiveLattice[Byte]", "kind" : "val"}, {"label" : "byteAlgebra", "tail" : ": ByteAlgebra", "member" : "algebra.instances.ByteInstances.byteAlgebra", "link" : "algebra\/instances\/ByteInstances.html#byteAlgebra:algebra.instances.ByteAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForByte", "tail" : ": cats.kernel.CommutativeGroup[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdGroupForByte", "link" : "algebra\/instances\/ByteInstances.html#catsKernelStdGroupForByte:cats.kernel.CommutativeGroup[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForByte", "tail" : ": cats.kernel.Order[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdOrderForByte", "link" : "algebra\/instances\/ByteInstances.html#catsKernelStdOrderForByte:cats.kernel.Order[Byte]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/ByteInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/ByteInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/ByteInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/ByteInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/ByteInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/ByteInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/ByteInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ByteInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ByteInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ByteInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/ByteInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/ByteInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/ByteInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/ByteInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/ByteInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/ByteInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/ByteInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/ByteInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/ByteInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/ByteInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.CharInstances", "members_trait" : [{"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "algebra\/instances\/CharInstances.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/CharInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/CharInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/CharInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/CharInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/CharInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/CharInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/CharInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/CharInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/CharInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/CharInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/CharInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/CharInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/CharInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/CharInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/CharInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/CharInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/CharInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/CharInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/CharInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/CharInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.DoubleAlgebra", "shortDescription" : "Due to the way floating-point equality works, this instance is notlawful under equality, but is correct when taken as anapproximation of an exact value.", "members_class" : [{"label" : "fromDouble", "tail" : "(x: Double): Double", "member" : "algebra.instances.DoubleAlgebra.fromDouble", "link" : "algebra\/instances\/DoubleAlgebra.html#fromDouble(x:Double):Double", "kind" : "def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt): Double", "member" : "algebra.instances.DoubleAlgebra.fromBigInt", "link" : "algebra\/instances\/DoubleAlgebra.html#fromBigInt(n:BigInt):Double", "kind" : "def"}, {"label" : "fromInt", "tail" : "(x: Int): Double", "member" : "algebra.instances.DoubleAlgebra.fromInt", "link" : "algebra\/instances\/DoubleAlgebra.html#fromInt(x:Int):Double", "kind" : "def"}, {"label" : "pow", "tail" : "(x: Double, y: Int): Double", "member" : "algebra.instances.DoubleAlgebra.pow", "link" : "algebra\/instances\/DoubleAlgebra.html#pow(x:Double,y:Int):Double", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: Double): Double", "member" : "algebra.instances.DoubleAlgebra.reciprocal", "link" : "algebra\/instances\/DoubleAlgebra.html#reciprocal(x:Double):Double", "kind" : "def"}, {"label" : "div", "tail" : "(x: Double, y: Double): Double", "member" : "algebra.instances.DoubleAlgebra.div", "link" : "algebra\/instances\/DoubleAlgebra.html#div(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "times", "tail" : "(x: Double, y: Double): Double", "member" : "algebra.instances.DoubleAlgebra.times", "link" : "algebra\/instances\/DoubleAlgebra.html#times(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Double, y: Double): Double", "member" : "algebra.instances.DoubleAlgebra.minus", "link" : "algebra\/instances\/DoubleAlgebra.html#minus(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "negate", "tail" : "(x: Double): Double", "member" : "algebra.instances.DoubleAlgebra.negate", "link" : "algebra\/instances\/DoubleAlgebra.html#negate(x:Double):Double", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Double, y: Double): Double", "member" : "algebra.instances.DoubleAlgebra.plus", "link" : "algebra\/instances\/DoubleAlgebra.html#plus(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "one", "tail" : "(): Double", "member" : "algebra.instances.DoubleAlgebra.one", "link" : "algebra\/instances\/DoubleAlgebra.html#one:Double", "kind" : "def"}, {"label" : "zero", "tail" : "(): Double", "member" : "algebra.instances.DoubleAlgebra.zero", "link" : "algebra\/instances\/DoubleAlgebra.html#zero:Double", "kind" : "def"}, {"member" : "algebra.instances.DoubleAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeGroup[Double]", "member" : "algebra.ring.MultiplicativeCommutativeGroup.multiplicative", "link" : "algebra\/instances\/DoubleAlgebra.html#multiplicative:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Double]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/DoubleAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Double, n: Int): Double", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/DoubleAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Double]): Option[Double]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/DoubleAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Double]): Double", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/DoubleAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Double)(ev: Eq[Double]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/instances\/DoubleAlgebra.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Double, n: Int): Double", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/DoubleAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Double]): Option[Double]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/DoubleAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Double]): Double", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/DoubleAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Double)(ev: Eq[Double]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/DoubleAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Double, n: Int): Double", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/DoubleAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/DoubleAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/DoubleAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/DoubleAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/DoubleAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/DoubleAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/DoubleAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/DoubleAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/DoubleAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/DoubleAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/DoubleAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/DoubleAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/DoubleAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/DoubleAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/DoubleAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/DoubleAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/DoubleAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/DoubleAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/DoubleAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/DoubleAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/DoubleAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.DoubleInstances", "members_trait" : [{"label" : "DoubleMinMaxLattice", "tail" : ": DistributiveLattice[Double]", "member" : "algebra.instances.DoubleInstances.DoubleMinMaxLattice", "link" : "algebra\/instances\/DoubleInstances.html#DoubleMinMaxLattice:algebra.lattice.DistributiveLattice[Double]", "kind" : "val"}, {"label" : "doubleAlgebra", "tail" : ": Field[Double]", "member" : "algebra.instances.DoubleInstances.doubleAlgebra", "link" : "algebra\/instances\/DoubleInstances.html#doubleAlgebra:algebra.ring.Field[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": cats.kernel.CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "algebra\/instances\/DoubleInstances.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": cats.kernel.Order[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "algebra\/instances\/DoubleInstances.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/DoubleInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/DoubleInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/DoubleInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/DoubleInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/DoubleInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/DoubleInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/DoubleInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/DoubleInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/DoubleInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/DoubleInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/DoubleInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/DoubleInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/DoubleInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/DoubleInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/DoubleInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/DoubleInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/DoubleInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/DoubleInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/DoubleInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/DoubleInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.FloatAlgebra", "shortDescription" : "Due to the way floating-point equality works, this instance is notlawful under equality, but is correct when taken as anapproximation of an exact value.", "members_class" : [{"label" : "fromDouble", "tail" : "(x: Double): Float", "member" : "algebra.instances.FloatAlgebra.fromDouble", "link" : "algebra\/instances\/FloatAlgebra.html#fromDouble(x:Double):Float", "kind" : "def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt): Float", "member" : "algebra.instances.FloatAlgebra.fromBigInt", "link" : "algebra\/instances\/FloatAlgebra.html#fromBigInt(n:BigInt):Float", "kind" : "def"}, {"label" : "fromInt", "tail" : "(x: Int): Float", "member" : "algebra.instances.FloatAlgebra.fromInt", "link" : "algebra\/instances\/FloatAlgebra.html#fromInt(x:Int):Float", "kind" : "def"}, {"label" : "pow", "tail" : "(x: Float, y: Int): Float", "member" : "algebra.instances.FloatAlgebra.pow", "link" : "algebra\/instances\/FloatAlgebra.html#pow(x:Float,y:Int):Float", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: Float): Float", "member" : "algebra.instances.FloatAlgebra.reciprocal", "link" : "algebra\/instances\/FloatAlgebra.html#reciprocal(x:Float):Float", "kind" : "def"}, {"label" : "div", "tail" : "(x: Float, y: Float): Float", "member" : "algebra.instances.FloatAlgebra.div", "link" : "algebra\/instances\/FloatAlgebra.html#div(x:Float,y:Float):Float", "kind" : "def"}, {"label" : "times", "tail" : "(x: Float, y: Float): Float", "member" : "algebra.instances.FloatAlgebra.times", "link" : "algebra\/instances\/FloatAlgebra.html#times(x:Float,y:Float):Float", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Float, y: Float): Float", "member" : "algebra.instances.FloatAlgebra.minus", "link" : "algebra\/instances\/FloatAlgebra.html#minus(x:Float,y:Float):Float", "kind" : "def"}, {"label" : "negate", "tail" : "(x: Float): Float", "member" : "algebra.instances.FloatAlgebra.negate", "link" : "algebra\/instances\/FloatAlgebra.html#negate(x:Float):Float", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Float, y: Float): Float", "member" : "algebra.instances.FloatAlgebra.plus", "link" : "algebra\/instances\/FloatAlgebra.html#plus(x:Float,y:Float):Float", "kind" : "def"}, {"label" : "one", "tail" : "(): Float", "member" : "algebra.instances.FloatAlgebra.one", "link" : "algebra\/instances\/FloatAlgebra.html#one:Float", "kind" : "def"}, {"label" : "zero", "tail" : "(): Float", "member" : "algebra.instances.FloatAlgebra.zero", "link" : "algebra\/instances\/FloatAlgebra.html#zero:Float", "kind" : "def"}, {"member" : "algebra.instances.FloatAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeGroup[Float]", "member" : "algebra.ring.MultiplicativeCommutativeGroup.multiplicative", "link" : "algebra\/instances\/FloatAlgebra.html#multiplicative:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Float]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/FloatAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Float, n: Int): Float", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/FloatAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Float]): Option[Float]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/FloatAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Float]): Float", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/FloatAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Float)(ev: Eq[Float]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/instances\/FloatAlgebra.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Float, n: Int): Float", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/FloatAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Float]): Option[Float]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/FloatAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Float]): Float", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/FloatAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Float)(ev: Eq[Float]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/FloatAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Float, n: Int): Float", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/FloatAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/FloatAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/FloatAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/FloatAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/FloatAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/FloatAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/FloatAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/FloatAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/FloatAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/FloatAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/FloatAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/FloatAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/FloatAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/FloatAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/FloatAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/FloatAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/FloatAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/FloatAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/FloatAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/FloatAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/FloatAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.FloatInstances", "members_trait" : [{"label" : "FloatMinMaxLattice", "tail" : ": DistributiveLattice[Float]", "member" : "algebra.instances.FloatInstances.FloatMinMaxLattice", "link" : "algebra\/instances\/FloatInstances.html#FloatMinMaxLattice:algebra.lattice.DistributiveLattice[Float]", "kind" : "val"}, {"label" : "floatAlgebra", "tail" : ": Field[Float]", "member" : "algebra.instances.FloatInstances.floatAlgebra", "link" : "algebra\/instances\/FloatInstances.html#floatAlgebra:algebra.ring.Field[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": cats.kernel.CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "algebra\/instances\/FloatInstances.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": cats.kernel.Order[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "algebra\/instances\/FloatInstances.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/FloatInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/FloatInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/FloatInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/FloatInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/FloatInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/FloatInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/FloatInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/FloatInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/FloatInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/FloatInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/FloatInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/FloatInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/FloatInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/FloatInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/FloatInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/FloatInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/FloatInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/FloatInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/FloatInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/FloatInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.IntAlgebra", "shortDescription" : "", "members_class" : [{"label" : "fromBigInt", "tail" : "(n: BigInt): Int", "member" : "algebra.instances.IntAlgebra.fromBigInt", "link" : "algebra\/instances\/IntAlgebra.html#fromBigInt(n:BigInt):Int", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): Int", "member" : "algebra.instances.IntAlgebra.fromInt", "link" : "algebra\/instances\/IntAlgebra.html#fromInt(n:Int):Int", "kind" : "def"}, {"label" : "pow", "tail" : "(x: Int, y: Int): Int", "member" : "algebra.instances.IntAlgebra.pow", "link" : "algebra\/instances\/IntAlgebra.html#pow(x:Int,y:Int):Int", "kind" : "def"}, {"label" : "times", "tail" : "(x: Int, y: Int): Int", "member" : "algebra.instances.IntAlgebra.times", "link" : "algebra\/instances\/IntAlgebra.html#times(x:Int,y:Int):Int", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Int, y: Int): Int", "member" : "algebra.instances.IntAlgebra.minus", "link" : "algebra\/instances\/IntAlgebra.html#minus(x:Int,y:Int):Int", "kind" : "def"}, {"label" : "negate", "tail" : "(x: Int): Int", "member" : "algebra.instances.IntAlgebra.negate", "link" : "algebra\/instances\/IntAlgebra.html#negate(x:Int):Int", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Int, y: Int): Int", "member" : "algebra.instances.IntAlgebra.plus", "link" : "algebra\/instances\/IntAlgebra.html#plus(x:Int,y:Int):Int", "kind" : "def"}, {"label" : "one", "tail" : "(): Int", "member" : "algebra.instances.IntAlgebra.one", "link" : "algebra\/instances\/IntAlgebra.html#one:Int", "kind" : "def"}, {"label" : "zero", "tail" : "(): Int", "member" : "algebra.instances.IntAlgebra.zero", "link" : "algebra\/instances\/IntAlgebra.html#zero:Int", "kind" : "def"}, {"member" : "algebra.instances.IntAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeMonoid[Int]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/instances\/IntAlgebra.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Int]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/IntAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Int, n: Int): Int", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/IntAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Int]): Option[Int]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/IntAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Int]): Int", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/IntAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Int)(ev: Eq[Int]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/instances\/IntAlgebra.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Int, n: Int): Int", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/IntAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Int]): Option[Int]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/IntAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Int]): Int", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/IntAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Int)(ev: Eq[Int]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/IntAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Int, n: Int): Int", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/IntAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/IntAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/IntAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/IntAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/IntAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/IntAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/IntAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/IntAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/IntAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/IntAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/IntAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/IntAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/IntAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/IntAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/IntAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/IntAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/IntAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/IntAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/IntAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/IntAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/IntAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.IntInstances", "members_trait" : [{"label" : "IntMinMaxLattice", "tail" : ": BoundedDistributiveLattice[Int]", "member" : "algebra.instances.IntInstances.IntMinMaxLattice", "link" : "algebra\/instances\/IntInstances.html#IntMinMaxLattice:algebra.lattice.BoundedDistributiveLattice[Int]", "kind" : "val"}, {"label" : "intAlgebra", "tail" : ": IntAlgebra", "member" : "algebra.instances.IntInstances.intAlgebra", "link" : "algebra\/instances\/IntInstances.html#intAlgebra:algebra.instances.IntAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": cats.kernel.CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "algebra\/instances\/IntInstances.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": cats.kernel.Order[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "algebra\/instances\/IntInstances.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/IntInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/IntInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/IntInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/IntInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/IntInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/IntInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/IntInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/IntInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/IntInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/IntInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/IntInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/IntInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/IntInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/IntInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/IntInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/IntInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/IntInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/IntInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/IntInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/IntInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.ListInstances", "members_trait" : [{"label" : "catsKernelStdMonoidForList", "tail" : "(): cats.kernel.Monoid[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdMonoidForList", "link" : "algebra\/instances\/ListInstances.html#catsKernelStdMonoidForList[A]:cats.kernel.Monoid[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForList", "tail" : "(arg0: cats.kernel.Order[A]): cats.kernel.Order[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdOrderForList", "link" : "algebra\/instances\/ListInstances.html#catsKernelStdOrderForList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForList", "tail" : "(arg0: cats.kernel.PartialOrder[A]): cats.kernel.PartialOrder[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdPartialOrderForList", "link" : "algebra\/instances\/ListInstances.html#catsKernelStdPartialOrderForList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForList", "tail" : "(arg0: cats.kernel.Eq[A]): cats.kernel.Eq[List[A]]", "member" : "cats.kernel.instances.ListInstances2.catsKernelStdEqForList", "link" : "algebra\/instances\/ListInstances.html#catsKernelStdEqForList[A](implicitevidence$3:cats.kernel.Eq[A]):cats.kernel.Eq[List[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/ListInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/ListInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/ListInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/ListInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/ListInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/ListInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/ListInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ListInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ListInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ListInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/ListInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/ListInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/ListInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/ListInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/ListInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/ListInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/ListInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/ListInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/ListInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/ListInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.LongAlgebra", "shortDescription" : "", "members_class" : [{"label" : "fromBigInt", "tail" : "(n: BigInt): Long", "member" : "algebra.instances.LongAlgebra.fromBigInt", "link" : "algebra\/instances\/LongAlgebra.html#fromBigInt(n:BigInt):Long", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): Long", "member" : "algebra.instances.LongAlgebra.fromInt", "link" : "algebra\/instances\/LongAlgebra.html#fromInt(n:Int):Long", "kind" : "def"}, {"label" : "pow", "tail" : "(x: Long, y: Int): Long", "member" : "algebra.instances.LongAlgebra.pow", "link" : "algebra\/instances\/LongAlgebra.html#pow(x:Long,y:Int):Long", "kind" : "def"}, {"label" : "times", "tail" : "(x: Long, y: Long): Long", "member" : "algebra.instances.LongAlgebra.times", "link" : "algebra\/instances\/LongAlgebra.html#times(x:Long,y:Long):Long", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Long, y: Long): Long", "member" : "algebra.instances.LongAlgebra.minus", "link" : "algebra\/instances\/LongAlgebra.html#minus(x:Long,y:Long):Long", "kind" : "def"}, {"label" : "negate", "tail" : "(x: Long): Long", "member" : "algebra.instances.LongAlgebra.negate", "link" : "algebra\/instances\/LongAlgebra.html#negate(x:Long):Long", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Long, y: Long): Long", "member" : "algebra.instances.LongAlgebra.plus", "link" : "algebra\/instances\/LongAlgebra.html#plus(x:Long,y:Long):Long", "kind" : "def"}, {"label" : "one", "tail" : "(): Long", "member" : "algebra.instances.LongAlgebra.one", "link" : "algebra\/instances\/LongAlgebra.html#one:Long", "kind" : "def"}, {"label" : "zero", "tail" : "(): Long", "member" : "algebra.instances.LongAlgebra.zero", "link" : "algebra\/instances\/LongAlgebra.html#zero:Long", "kind" : "def"}, {"member" : "algebra.instances.LongAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeMonoid[Long]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/instances\/LongAlgebra.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Long]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/LongAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Long, n: Int): Long", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/LongAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Long]): Option[Long]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/LongAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Long]): Long", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/LongAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Long)(ev: Eq[Long]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/instances\/LongAlgebra.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Long, n: Int): Long", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/LongAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Long]): Option[Long]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/LongAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Long]): Long", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/LongAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Long)(ev: Eq[Long]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/LongAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Long, n: Int): Long", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/LongAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/LongAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/LongAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/LongAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/LongAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/LongAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/LongAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/LongAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/LongAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/LongAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/LongAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/LongAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/LongAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/LongAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/LongAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/LongAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/LongAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/LongAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/LongAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/LongAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/LongAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.LongInstances", "members_trait" : [{"label" : "LongMinMaxLattice", "tail" : ": BoundedDistributiveLattice[Long]", "member" : "algebra.instances.LongInstances.LongMinMaxLattice", "link" : "algebra\/instances\/LongInstances.html#LongMinMaxLattice:algebra.lattice.BoundedDistributiveLattice[Long]", "kind" : "val"}, {"label" : "longAlgebra", "tail" : ": LongAlgebra", "member" : "algebra.instances.LongInstances.longAlgebra", "link" : "algebra\/instances\/LongInstances.html#longAlgebra:algebra.instances.LongAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": cats.kernel.CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "algebra\/instances\/LongInstances.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": cats.kernel.Order[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "algebra\/instances\/LongInstances.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/LongInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/LongInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/LongInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/LongInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/LongInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/LongInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/LongInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/LongInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/LongInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/LongInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/LongInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/LongInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/LongInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/LongInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/LongInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/LongInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/LongInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/LongInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/LongInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/LongInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.MapAdditiveMonoid", "shortDescription" : "", "members_class" : [{"label" : "sum", "tail" : "(as: TraversableOnce[Map[K, V]]): Map[K, V]", "member" : "algebra.instances.MapAdditiveMonoid.sum", "link" : "algebra\/instances\/MapAdditiveMonoid.html#sum(as:TraversableOnce[Map[K,V]]):Map[K,V]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Map[K, V], n: Int): Map[K, V]", "member" : "algebra.instances.MapAdditiveMonoid.sumN", "link" : "algebra\/instances\/MapAdditiveMonoid.html#sumN(a:Map[K,V],n:Int):Map[K,V]", "kind" : "def"}, {"label" : "plus", "tail" : "(xs: Map[K, V], ys: Map[K, V]): Map[K, V]", "member" : "algebra.instances.MapAdditiveMonoid.plus", "link" : "algebra\/instances\/MapAdditiveMonoid.html#plus(xs:Map[K,V],ys:Map[K,V]):Map[K,V]", "kind" : "def"}, {"label" : "zero", "tail" : "(): Map[K, V]", "member" : "algebra.instances.MapAdditiveMonoid.zero", "link" : "algebra\/instances\/MapAdditiveMonoid.html#zero:Map[K,V]", "kind" : "def"}, {"member" : "algebra.instances.MapAdditiveMonoid#<init>", "error" : "unsupported entity"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Map[K, V]]): Option[Map[K, V]]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/MapAdditiveMonoid.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Map[K, V])(ev: Eq[Map[K, V]]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/MapAdditiveMonoid.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "additive", "tail" : "(): Monoid[Map[K, V]]", "member" : "algebra.ring.AdditiveMonoid.additive", "link" : "algebra\/instances\/MapAdditiveMonoid.html#additive:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Map[K, V], n: Int): Map[K, V]", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/MapAdditiveMonoid.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/MapAdditiveMonoid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/MapAdditiveMonoid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/MapAdditiveMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/MapAdditiveMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/MapAdditiveMonoid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/MapAdditiveMonoid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/MapAdditiveMonoid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapAdditiveMonoid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapAdditiveMonoid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapAdditiveMonoid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/MapAdditiveMonoid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/MapAdditiveMonoid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/MapAdditiveMonoid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/MapAdditiveMonoid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/MapAdditiveMonoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/MapAdditiveMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/MapAdditiveMonoid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/MapAdditiveMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/MapAdditiveMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/MapAdditiveMonoid.html", "kind" : "class"}, {"name" : "algebra.instances.MapInstances", "members_trait" : [{"label" : "mapSemiring", "tail" : "(arg0: Semiring[V]): MapSemiring[K, V]", "member" : "algebra.instances.MapInstances2.mapSemiring", "link" : "algebra\/instances\/MapInstances.html#mapSemiring[K,V](implicitevidence$1:algebra.ring.Semiring[V]):algebra.instances.MapSemiring[K,V]", "kind" : "implicit def"}, {"label" : "mapAdditiveMonoid", "tail" : "(arg0: AdditiveSemigroup[V]): MapAdditiveMonoid[K, V]", "member" : "algebra.instances.MapInstances0.mapAdditiveMonoid", "link" : "algebra\/instances\/MapInstances.html#mapAdditiveMonoid[K,V](implicitevidence$2:algebra.ring.AdditiveSemigroup[V]):algebra.instances.MapAdditiveMonoid[K,V]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForMap", "tail" : "(arg0: cats.kernel.Semigroup[V]): cats.kernel.Monoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdMonoidForMap", "link" : "algebra\/instances\/MapInstances.html#catsKernelStdMonoidForMap[K,V](implicitevidence$2:cats.kernel.Semigroup[V]):cats.kernel.Monoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForMap", "tail" : "(arg0: cats.kernel.Eq[V]): cats.kernel.Eq[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdEqForMap", "link" : "algebra\/instances\/MapInstances.html#catsKernelStdEqForMap[K,V](implicitevidence$1:cats.kernel.Eq[V]):cats.kernel.Eq[Map[K,V]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/MapInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/MapInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/MapInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/MapInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/MapInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/MapInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/MapInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/MapInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/MapInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/MapInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/MapInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/MapInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/MapInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/MapInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/MapInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/MapInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/MapInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.MapInstances0", "members_trait" : [{"label" : "mapAdditiveMonoid", "tail" : "(arg0: AdditiveSemigroup[V]): MapAdditiveMonoid[K, V]", "member" : "algebra.instances.MapInstances0.mapAdditiveMonoid", "link" : "algebra\/instances\/MapInstances0.html#mapAdditiveMonoid[K,V](implicitevidence$2:algebra.ring.AdditiveSemigroup[V]):algebra.instances.MapAdditiveMonoid[K,V]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/MapInstances0.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/MapInstances0.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/MapInstances0.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/MapInstances0.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/MapInstances0.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/MapInstances0.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/MapInstances0.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances0.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances0.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances0.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/MapInstances0.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/MapInstances0.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/MapInstances0.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/MapInstances0.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/MapInstances0.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/MapInstances0.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/MapInstances0.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/MapInstances0.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/MapInstances0.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/MapInstances0.html", "kind" : "trait"}, {"name" : "algebra.instances.MapInstances1", "members_trait" : [{"label" : "mapAdditiveMonoid", "tail" : "(arg0: AdditiveSemigroup[V]): MapAdditiveMonoid[K, V]", "member" : "algebra.instances.MapInstances0.mapAdditiveMonoid", "link" : "algebra\/instances\/MapInstances1.html#mapAdditiveMonoid[K,V](implicitevidence$2:algebra.ring.AdditiveSemigroup[V]):algebra.instances.MapAdditiveMonoid[K,V]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/MapInstances1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/MapInstances1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/MapInstances1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/MapInstances1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/MapInstances1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/MapInstances1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/MapInstances1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/MapInstances1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/MapInstances1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/MapInstances1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/MapInstances1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/MapInstances1.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/MapInstances1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/MapInstances1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/MapInstances1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/MapInstances1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/MapInstances1.html", "kind" : "trait"}, {"name" : "algebra.instances.MapInstances2", "members_trait" : [{"label" : "mapSemiring", "tail" : "(arg0: Semiring[V]): MapSemiring[K, V]", "member" : "algebra.instances.MapInstances2.mapSemiring", "link" : "algebra\/instances\/MapInstances2.html#mapSemiring[K,V](implicitevidence$1:algebra.ring.Semiring[V]):algebra.instances.MapSemiring[K,V]", "kind" : "implicit def"}, {"label" : "mapAdditiveMonoid", "tail" : "(arg0: AdditiveSemigroup[V]): MapAdditiveMonoid[K, V]", "member" : "algebra.instances.MapInstances0.mapAdditiveMonoid", "link" : "algebra\/instances\/MapInstances2.html#mapAdditiveMonoid[K,V](implicitevidence$2:algebra.ring.AdditiveSemigroup[V]):algebra.instances.MapAdditiveMonoid[K,V]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/MapInstances2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/MapInstances2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/MapInstances2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/MapInstances2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/MapInstances2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/MapInstances2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/MapInstances2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/MapInstances2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/MapInstances2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/MapInstances2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/MapInstances2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/MapInstances2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/MapInstances2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/MapInstances2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/MapInstances2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/MapInstances2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/MapInstances2.html", "kind" : "trait"}, {"name" : "algebra.instances.MapInstances3", "members_trait" : [{"label" : "mapSemiring", "tail" : "(arg0: Semiring[V]): MapSemiring[K, V]", "member" : "algebra.instances.MapInstances2.mapSemiring", "link" : "algebra\/instances\/MapInstances3.html#mapSemiring[K,V](implicitevidence$1:algebra.ring.Semiring[V]):algebra.instances.MapSemiring[K,V]", "kind" : "implicit def"}, {"label" : "mapAdditiveMonoid", "tail" : "(arg0: AdditiveSemigroup[V]): MapAdditiveMonoid[K, V]", "member" : "algebra.instances.MapInstances0.mapAdditiveMonoid", "link" : "algebra\/instances\/MapInstances3.html#mapAdditiveMonoid[K,V](implicitevidence$2:algebra.ring.AdditiveSemigroup[V]):algebra.instances.MapAdditiveMonoid[K,V]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/MapInstances3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/MapInstances3.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/MapInstances3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/MapInstances3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/MapInstances3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/MapInstances3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/MapInstances3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances3.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapInstances3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/MapInstances3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/MapInstances3.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/MapInstances3.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/MapInstances3.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/MapInstances3.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/MapInstances3.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/MapInstances3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/MapInstances3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/MapInstances3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/MapInstances3.html", "kind" : "trait"}, {"name" : "algebra.instances.MapSemiring", "shortDescription" : "", "members_class" : [{"label" : "tryProduct", "tail" : "(as: TraversableOnce[Map[K, V]]): Option[Map[K, V]]", "member" : "algebra.instances.MapSemiring.tryProduct", "link" : "algebra\/instances\/MapSemiring.html#tryProduct(as:TraversableOnce[Map[K,V]]):Option[Map[K,V]]", "kind" : "def"}, {"label" : "pow", "tail" : "(x: Map[K, V], n: Int): Map[K, V]", "member" : "algebra.instances.MapSemiring.pow", "link" : "algebra\/instances\/MapSemiring.html#pow(x:Map[K,V],n:Int):Map[K,V]", "kind" : "def"}, {"label" : "times", "tail" : "(xs: Map[K, V], ys: Map[K, V]): Map[K, V]", "member" : "algebra.instances.MapSemiring.times", "link" : "algebra\/instances\/MapSemiring.html#times(xs:Map[K,V],ys:Map[K,V]):Map[K,V]", "kind" : "def"}, {"member" : "algebra.instances.MapSemiring#<init>", "error" : "unsupported entity"}, {"label" : "positivePow", "tail" : "(a: Map[K, V], n: Int): Map[K, V]", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/MapSemiring.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Semigroup[Map[K, V]]", "member" : "algebra.ring.MultiplicativeSemigroup.multiplicative", "link" : "algebra\/instances\/MapSemiring.html#multiplicative:algebra.Semigroup[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeMonoid[Map[K, V]]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/instances\/MapSemiring.html#additive:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Map[K, V]]): Map[K, V]", "member" : "algebra.instances.MapAdditiveMonoid.sum", "link" : "algebra\/instances\/MapSemiring.html#sum(as:TraversableOnce[Map[K,V]]):Map[K,V]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Map[K, V], n: Int): Map[K, V]", "member" : "algebra.instances.MapAdditiveMonoid.sumN", "link" : "algebra\/instances\/MapSemiring.html#sumN(a:Map[K,V],n:Int):Map[K,V]", "kind" : "def"}, {"label" : "plus", "tail" : "(xs: Map[K, V], ys: Map[K, V]): Map[K, V]", "member" : "algebra.instances.MapAdditiveMonoid.plus", "link" : "algebra\/instances\/MapSemiring.html#plus(xs:Map[K,V],ys:Map[K,V]):Map[K,V]", "kind" : "def"}, {"label" : "zero", "tail" : "(): Map[K, V]", "member" : "algebra.instances.MapAdditiveMonoid.zero", "link" : "algebra\/instances\/MapSemiring.html#zero:Map[K,V]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Map[K, V]]): Option[Map[K, V]]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/MapSemiring.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Map[K, V])(ev: Eq[Map[K, V]]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/MapSemiring.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Map[K, V], n: Int): Map[K, V]", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/MapSemiring.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/MapSemiring.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/MapSemiring.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/MapSemiring.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/MapSemiring.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/MapSemiring.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/MapSemiring.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/MapSemiring.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapSemiring.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapSemiring.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/MapSemiring.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/MapSemiring.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/MapSemiring.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/MapSemiring.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/MapSemiring.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/MapSemiring.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/MapSemiring.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/MapSemiring.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/MapSemiring.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/MapSemiring.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/MapSemiring.html", "kind" : "class"}, {"name" : "algebra.instances.OptionInstances", "members_trait" : [{"label" : "catsKernelStdMonoidForOption", "tail" : "(arg0: cats.kernel.Semigroup[A]): cats.kernel.Monoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdMonoidForOption", "link" : "algebra\/instances\/OptionInstances.html#catsKernelStdMonoidForOption[A](implicitevidence$2:cats.kernel.Semigroup[A]):cats.kernel.Monoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForOption", "tail" : "(arg0: cats.kernel.Order[A]): cats.kernel.Order[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdOrderForOption", "link" : "algebra\/instances\/OptionInstances.html#catsKernelStdOrderForOption[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForOption", "tail" : "(arg0: cats.kernel.PartialOrder[A]): cats.kernel.PartialOrder[Option[A]]", "member" : "cats.kernel.instances.OptionInstances1.catsKernelStdPartialOrderForOption", "link" : "algebra\/instances\/OptionInstances.html#catsKernelStdPartialOrderForOption[A](implicitevidence$3:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForOption", "tail" : "(arg0: cats.kernel.Eq[A]): cats.kernel.Eq[Option[A]]", "member" : "cats.kernel.instances.OptionInstances0.catsKernelStdEqForOption", "link" : "algebra\/instances\/OptionInstances.html#catsKernelStdEqForOption[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Option[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/OptionInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/OptionInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/OptionInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/OptionInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/OptionInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/OptionInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/OptionInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/OptionInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/OptionInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/OptionInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/OptionInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/OptionInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/OptionInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/OptionInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/OptionInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/OptionInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/OptionInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/OptionInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/OptionInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/OptionInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.SetBoolRng", "shortDescription" : "", "members_class" : [{"label" : "times", "tail" : "(x: Set[A], y: Set[A]): Set[A]", "member" : "algebra.instances.SetBoolRng.times", "link" : "algebra\/instances\/SetBoolRng.html#times(x:Set[A],y:Set[A]):Set[A]", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Set[A], y: Set[A]): Set[A]", "member" : "algebra.instances.SetBoolRng.plus", "link" : "algebra\/instances\/SetBoolRng.html#plus(x:Set[A],y:Set[A]):Set[A]", "kind" : "def"}, {"label" : "zero", "tail" : "(): Set[A]", "member" : "algebra.instances.SetBoolRng.zero", "link" : "algebra\/instances\/SetBoolRng.html#zero:Set[A]", "kind" : "def"}, {"member" : "algebra.instances.SetBoolRng#<init>", "error" : "unsupported entity"}, {"label" : "negate", "tail" : "(x: Set[A]): Set[A]", "member" : "algebra.ring.BoolRng.negate", "link" : "algebra\/instances\/SetBoolRng.html#negate(x:A):A", "kind" : "final def"}, {"label" : "multiplicative", "tail" : "(): CommutativeSemigroup[Set[A]]", "member" : "algebra.ring.MultiplicativeCommutativeSemigroup.multiplicative", "link" : "algebra\/instances\/SetBoolRng.html#multiplicative:algebra.CommutativeSemigroup[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Set[A]]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/SetBoolRng.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Set[A], n: Int): Set[A]", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/SetBoolRng.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Set[A], y: Set[A]): Set[A]", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/instances\/SetBoolRng.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Set[A]]): Option[Set[A]]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/instances\/SetBoolRng.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Set[A], n: Int): Set[A]", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/SetBoolRng.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: Set[A], n: Int): Set[A]", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/instances\/SetBoolRng.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Set[A]]): Option[Set[A]]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/SetBoolRng.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Set[A]]): Set[A]", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/SetBoolRng.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Set[A])(ev: Eq[Set[A]]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/SetBoolRng.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Set[A], n: Int): Set[A]", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/SetBoolRng.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/SetBoolRng.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/SetBoolRng.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/SetBoolRng.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/SetBoolRng.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/SetBoolRng.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/SetBoolRng.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/SetBoolRng.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetBoolRng.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetBoolRng.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetBoolRng.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/SetBoolRng.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/SetBoolRng.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/SetBoolRng.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/SetBoolRng.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/SetBoolRng.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/SetBoolRng.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/SetBoolRng.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/SetBoolRng.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/SetBoolRng.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/SetBoolRng.html", "kind" : "class"}, {"name" : "algebra.instances.SetInstances", "members_trait" : [{"label" : "setBoolRng", "tail" : "(): BoolRng[Set[A]]", "member" : "algebra.instances.SetInstances.setBoolRng", "link" : "algebra\/instances\/SetInstances.html#setBoolRng[A]:algebra.ring.BoolRng[Set[A]]", "kind" : "def"}, {"label" : "setSemiring", "tail" : "(): Semiring[Set[A]]", "member" : "algebra.instances.SetInstances.setSemiring", "link" : "algebra\/instances\/SetInstances.html#setSemiring[A]:algebra.ring.Semiring[Set[A]]", "kind" : "implicit def"}, {"label" : "setLattice", "tail" : "(): GenBool[Set[A]]", "member" : "algebra.instances.SetInstances.setLattice", "link" : "algebra\/instances\/SetInstances.html#setLattice[A]:algebra.lattice.GenBool[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForSet", "tail" : "(): cats.kernel.BoundedSemilattice[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdSemilatticeForSet", "link" : "algebra\/instances\/SetInstances.html#catsKernelStdSemilatticeForSet[A]:cats.kernel.BoundedSemilattice[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForSet", "tail" : "(): cats.kernel.PartialOrder[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdPartialOrderForSet", "link" : "algebra\/instances\/SetInstances.html#catsKernelStdPartialOrderForSet[A]:cats.kernel.PartialOrder[Set[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/SetInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/SetInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/SetInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/SetInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/SetInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/SetInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/SetInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/SetInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/SetInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/SetInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/SetInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/SetInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/SetInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/SetInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/SetInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/SetInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/SetInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.SetLattice", "shortDescription" : "", "members_class" : [{"label" : "without", "tail" : "(lhs: Set[A], rhs: Set[A]): Set[A]", "member" : "algebra.instances.SetLattice.without", "link" : "algebra\/instances\/SetLattice.html#without(lhs:Set[A],rhs:Set[A]):Set[A]", "kind" : "def"}, {"label" : "and", "tail" : "(lhs: Set[A], rhs: Set[A]): Set[A]", "member" : "algebra.instances.SetLattice.and", "link" : "algebra\/instances\/SetLattice.html#and(lhs:Set[A],rhs:Set[A]):Set[A]", "kind" : "def"}, {"label" : "or", "tail" : "(lhs: Set[A], rhs: Set[A]): Set[A]", "member" : "algebra.instances.SetLattice.or", "link" : "algebra\/instances\/SetLattice.html#or(lhs:Set[A],rhs:Set[A]):Set[A]", "kind" : "def"}, {"label" : "zero", "tail" : "(): Set[A]", "member" : "algebra.instances.SetLattice.zero", "link" : "algebra\/instances\/SetLattice.html#zero:Set[A]", "kind" : "def"}, {"member" : "algebra.instances.SetLattice#<init>", "error" : "unsupported entity"}, {"label" : "asBoolRing", "tail" : "(): BoolRng[Set[A]]", "member" : "algebra.lattice.GenBool.asBoolRing", "link" : "algebra\/instances\/SetLattice.html#asBoolRing:algebra.ring.BoolRng[A]", "kind" : "def"}, {"label" : "xor", "tail" : "(a: Set[A], b: Set[A]): Set[A]", "member" : "algebra.lattice.GenBool.xor", "link" : "algebra\/instances\/SetLattice.html#xor(a:A,b:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(a: Set[A], b: Set[A]): Set[A]", "member" : "algebra.lattice.GenBool.join", "link" : "algebra\/instances\/SetLattice.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: Set[A], b: Set[A]): Set[A]", "member" : "algebra.lattice.GenBool.meet", "link" : "algebra\/instances\/SetLattice.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[Set[A]]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/instances\/SetLattice.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Set[A])(ev: Eq[Set[A]]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/instances\/SetLattice.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "dual", "tail" : "(): Lattice[Set[A]]", "member" : "algebra.lattice.Lattice.dual", "link" : "algebra\/instances\/SetLattice.html#dual:algebra.lattice.Lattice[A]", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[Set[A]]): PartialOrder[Set[A]]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/instances\/SetLattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): Semilattice[Set[A]]", "member" : "algebra.lattice.MeetSemilattice.meetSemilattice", "link" : "algebra\/instances\/SetLattice.html#meetSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[Set[A]]): PartialOrder[Set[A]]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/instances\/SetLattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/SetLattice.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/SetLattice.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/SetLattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/SetLattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/SetLattice.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/SetLattice.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/SetLattice.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetLattice.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetLattice.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetLattice.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/SetLattice.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/SetLattice.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/SetLattice.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/SetLattice.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/SetLattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/SetLattice.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/SetLattice.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/SetLattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/SetLattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/SetLattice.html", "kind" : "class"}, {"name" : "algebra.instances.SetSemiring", "shortDescription" : "", "members_class" : [{"label" : "times", "tail" : "(x: Set[A], y: Set[A]): Set[A]", "member" : "algebra.instances.SetSemiring.times", "link" : "algebra\/instances\/SetSemiring.html#times(x:Set[A],y:Set[A]):Set[A]", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Set[A], y: Set[A]): Set[A]", "member" : "algebra.instances.SetSemiring.plus", "link" : "algebra\/instances\/SetSemiring.html#plus(x:Set[A],y:Set[A]):Set[A]", "kind" : "def"}, {"label" : "zero", "tail" : "(): Set[A]", "member" : "algebra.instances.SetSemiring.zero", "link" : "algebra\/instances\/SetSemiring.html#zero:Set[A]", "kind" : "def"}, {"member" : "algebra.instances.SetSemiring#<init>", "error" : "unsupported entity"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Set[A]]): Option[Set[A]]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/instances\/SetSemiring.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Set[A], n: Int): Set[A]", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/SetSemiring.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: Set[A], n: Int): Set[A]", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/instances\/SetSemiring.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Semigroup[Set[A]]", "member" : "algebra.ring.MultiplicativeSemigroup.multiplicative", "link" : "algebra\/instances\/SetSemiring.html#multiplicative:algebra.Semigroup[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeMonoid[Set[A]]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/instances\/SetSemiring.html#additive:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Set[A]]): Option[Set[A]]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/SetSemiring.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Set[A]]): Set[A]", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/SetSemiring.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Set[A], n: Int): Set[A]", "member" : "algebra.ring.AdditiveMonoid.sumN", "link" : "algebra\/instances\/SetSemiring.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Set[A])(ev: Eq[Set[A]]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/SetSemiring.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Set[A], n: Int): Set[A]", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/SetSemiring.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/SetSemiring.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/SetSemiring.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/SetSemiring.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/SetSemiring.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/SetSemiring.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/SetSemiring.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/SetSemiring.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetSemiring.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetSemiring.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/SetSemiring.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/SetSemiring.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/SetSemiring.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/SetSemiring.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/SetSemiring.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/SetSemiring.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/SetSemiring.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/SetSemiring.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/SetSemiring.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/SetSemiring.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/SetSemiring.html", "kind" : "class"}, {"name" : "algebra.instances.ShortAlgebra", "shortDescription" : "", "members_class" : [{"label" : "fromBigInt", "tail" : "(n: BigInt): Short", "member" : "algebra.instances.ShortAlgebra.fromBigInt", "link" : "algebra\/instances\/ShortAlgebra.html#fromBigInt(n:BigInt):Short", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): Short", "member" : "algebra.instances.ShortAlgebra.fromInt", "link" : "algebra\/instances\/ShortAlgebra.html#fromInt(n:Int):Short", "kind" : "def"}, {"label" : "pow", "tail" : "(x: Short, y: Int): Short", "member" : "algebra.instances.ShortAlgebra.pow", "link" : "algebra\/instances\/ShortAlgebra.html#pow(x:Short,y:Int):Short", "kind" : "def"}, {"label" : "times", "tail" : "(x: Short, y: Short): Short", "member" : "algebra.instances.ShortAlgebra.times", "link" : "algebra\/instances\/ShortAlgebra.html#times(x:Short,y:Short):Short", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Short, y: Short): Short", "member" : "algebra.instances.ShortAlgebra.minus", "link" : "algebra\/instances\/ShortAlgebra.html#minus(x:Short,y:Short):Short", "kind" : "def"}, {"label" : "negate", "tail" : "(x: Short): Short", "member" : "algebra.instances.ShortAlgebra.negate", "link" : "algebra\/instances\/ShortAlgebra.html#negate(x:Short):Short", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Short, y: Short): Short", "member" : "algebra.instances.ShortAlgebra.plus", "link" : "algebra\/instances\/ShortAlgebra.html#plus(x:Short,y:Short):Short", "kind" : "def"}, {"label" : "one", "tail" : "(): Short", "member" : "algebra.instances.ShortAlgebra.one", "link" : "algebra\/instances\/ShortAlgebra.html#one:Short", "kind" : "def"}, {"label" : "zero", "tail" : "(): Short", "member" : "algebra.instances.ShortAlgebra.zero", "link" : "algebra\/instances\/ShortAlgebra.html#zero:Short", "kind" : "def"}, {"member" : "algebra.instances.ShortAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeMonoid[Short]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/instances\/ShortAlgebra.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Short]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/ShortAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Short, n: Int): Short", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/ShortAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Short]): Option[Short]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/ShortAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Short]): Short", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/ShortAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Short)(ev: Eq[Short]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/instances\/ShortAlgebra.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Short, n: Int): Short", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/ShortAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Short]): Option[Short]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/ShortAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Short]): Short", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/ShortAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Short)(ev: Eq[Short]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/instances\/ShortAlgebra.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Short, n: Int): Short", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/ShortAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/ShortAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/ShortAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/ShortAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/ShortAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/ShortAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/ShortAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/ShortAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ShortAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ShortAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ShortAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/ShortAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/ShortAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/ShortAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/ShortAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/ShortAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/ShortAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/ShortAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/ShortAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/ShortAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/ShortAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.ShortInstances", "members_trait" : [{"label" : "ShortMinMaxLattice", "tail" : ": BoundedDistributiveLattice[Short]", "member" : "algebra.instances.ShortInstances.ShortMinMaxLattice", "link" : "algebra\/instances\/ShortInstances.html#ShortMinMaxLattice:algebra.lattice.BoundedDistributiveLattice[Short]", "kind" : "val"}, {"label" : "shortAlgebra", "tail" : ": ShortAlgebra", "member" : "algebra.instances.ShortInstances.shortAlgebra", "link" : "algebra\/instances\/ShortInstances.html#shortAlgebra:algebra.instances.ShortAlgebra", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForShort", "tail" : ": cats.kernel.CommutativeGroup[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdGroupForShort", "link" : "algebra\/instances\/ShortInstances.html#catsKernelStdGroupForShort:cats.kernel.CommutativeGroup[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForShort", "tail" : ": cats.kernel.Order[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdOrderForShort", "link" : "algebra\/instances\/ShortInstances.html#catsKernelStdOrderForShort:cats.kernel.Order[Short]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/ShortInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/ShortInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/ShortInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/ShortInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/ShortInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/ShortInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/ShortInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ShortInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ShortInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/ShortInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/ShortInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/ShortInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/ShortInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/ShortInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/ShortInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/ShortInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/ShortInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/ShortInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/ShortInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/ShortInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.StaticMethods", "shortDescription" : "", "object" : "algebra\/instances\/StaticMethods$.html", "members_object" : [{"label" : "pow", "tail" : "(base: Long, exponent: Long): Long", "member" : "algebra.instances.StaticMethods.pow", "link" : "algebra\/instances\/StaticMethods$.html#pow(base:Long,exponent:Long):Long", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/StaticMethods$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/StaticMethods$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/StaticMethods$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/StaticMethods$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/StaticMethods$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/StaticMethods$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/StaticMethods$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/StaticMethods$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/StaticMethods$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/StaticMethods$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/StaticMethods$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/StaticMethods$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/StaticMethods$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/StaticMethods$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/StaticMethods$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/StaticMethods$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/StaticMethods$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/StaticMethods$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/StaticMethods$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "algebra.instances.StringInstances", "members_trait" : [{"label" : "catsKernelStdMonoidForString", "tail" : ": cats.kernel.Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "algebra\/instances\/StringInstances.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": cats.kernel.Order[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "algebra\/instances\/StringInstances.html#catsKernelStdOrderForString:cats.kernel.Order[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/StringInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/StringInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/StringInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/StringInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/StringInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/StringInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/StringInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/StringInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/StringInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/StringInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/StringInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/StringInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/StringInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/StringInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/StringInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/StringInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/StringInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/StringInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/StringInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/StringInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.TupleInstances", "members_trait" : [{"label" : "tuple22Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17], A18: Semiring[A18], A19: Semiring[A19], A20: Semiring[A20], A21: Semiring[A21]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "algebra.instances.TupleInstances.tuple22Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple22Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17],implicitA18:algebra.ring.Semiring[A18],implicitA19:algebra.ring.Semiring[A19],implicitA20:algebra.ring.Semiring[A20],implicitA21:algebra.ring.Semiring[A21]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple22Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17], A18: Rng[A18], A19: Rng[A19], A20: Rng[A20], A21: Rng[A21]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "algebra.instances.TupleInstances.tuple22Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple22Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17],implicitA18:algebra.ring.Rng[A18],implicitA19:algebra.ring.Rng[A19],implicitA20:algebra.ring.Rng[A20],implicitA21:algebra.ring.Rng[A21]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple22Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17], A18: Ring[A18], A19: Ring[A19], A20: Ring[A20], A21: Ring[A21]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "algebra.instances.TupleInstances.tuple22Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple22Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17],implicitA18:algebra.ring.Ring[A18],implicitA19:algebra.ring.Ring[A19],implicitA20:algebra.ring.Ring[A20],implicitA21:algebra.ring.Ring[A21]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple22Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17], A18: Rig[A18], A19: Rig[A19], A20: Rig[A20], A21: Rig[A21]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "algebra.instances.TupleInstances.tuple22Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple22Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17],implicitA18:algebra.ring.Rig[A18],implicitA19:algebra.ring.Rig[A19],implicitA20:algebra.ring.Rig[A20],implicitA21:algebra.ring.Rig[A21]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple21Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17], A18: Semiring[A18], A19: Semiring[A19], A20: Semiring[A20]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "algebra.instances.TupleInstances.tuple21Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple21Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17],implicitA18:algebra.ring.Semiring[A18],implicitA19:algebra.ring.Semiring[A19],implicitA20:algebra.ring.Semiring[A20]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple21Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17], A18: Rng[A18], A19: Rng[A19], A20: Rng[A20]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "algebra.instances.TupleInstances.tuple21Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple21Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17],implicitA18:algebra.ring.Rng[A18],implicitA19:algebra.ring.Rng[A19],implicitA20:algebra.ring.Rng[A20]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple21Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17], A18: Ring[A18], A19: Ring[A19], A20: Ring[A20]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "algebra.instances.TupleInstances.tuple21Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple21Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17],implicitA18:algebra.ring.Ring[A18],implicitA19:algebra.ring.Ring[A19],implicitA20:algebra.ring.Ring[A20]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple21Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17], A18: Rig[A18], A19: Rig[A19], A20: Rig[A20]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "algebra.instances.TupleInstances.tuple21Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple21Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17],implicitA18:algebra.ring.Rig[A18],implicitA19:algebra.ring.Rig[A19],implicitA20:algebra.ring.Rig[A20]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple20Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17], A18: Semiring[A18], A19: Semiring[A19]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "algebra.instances.TupleInstances.tuple20Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple20Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17],implicitA18:algebra.ring.Semiring[A18],implicitA19:algebra.ring.Semiring[A19]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple20Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17], A18: Rng[A18], A19: Rng[A19]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "algebra.instances.TupleInstances.tuple20Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple20Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17],implicitA18:algebra.ring.Rng[A18],implicitA19:algebra.ring.Rng[A19]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple20Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17], A18: Ring[A18], A19: Ring[A19]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "algebra.instances.TupleInstances.tuple20Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple20Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17],implicitA18:algebra.ring.Ring[A18],implicitA19:algebra.ring.Ring[A19]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple20Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17], A18: Rig[A18], A19: Rig[A19]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "algebra.instances.TupleInstances.tuple20Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple20Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17],implicitA18:algebra.ring.Rig[A18],implicitA19:algebra.ring.Rig[A19]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple19Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17], A18: Semiring[A18]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "algebra.instances.TupleInstances.tuple19Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple19Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17],implicitA18:algebra.ring.Semiring[A18]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple19Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17], A18: Rng[A18]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "algebra.instances.TupleInstances.tuple19Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple19Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17],implicitA18:algebra.ring.Rng[A18]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple19Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17], A18: Ring[A18]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "algebra.instances.TupleInstances.tuple19Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple19Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17],implicitA18:algebra.ring.Ring[A18]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple19Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17], A18: Rig[A18]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "algebra.instances.TupleInstances.tuple19Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple19Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17],implicitA18:algebra.ring.Rig[A18]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple18Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16], A17: Semiring[A17]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "algebra.instances.TupleInstances.tuple18Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple18Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16],implicitA17:algebra.ring.Semiring[A17]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple18Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16], A17: Rng[A17]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "algebra.instances.TupleInstances.tuple18Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple18Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16],implicitA17:algebra.ring.Rng[A17]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple18Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16], A17: Ring[A17]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "algebra.instances.TupleInstances.tuple18Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple18Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16],implicitA17:algebra.ring.Ring[A17]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple18Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16], A17: Rig[A17]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "algebra.instances.TupleInstances.tuple18Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple18Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16],implicitA17:algebra.ring.Rig[A17]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple17Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15], A16: Semiring[A16]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "algebra.instances.TupleInstances.tuple17Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple17Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15],implicitA16:algebra.ring.Semiring[A16]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple17Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15], A16: Rng[A16]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "algebra.instances.TupleInstances.tuple17Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple17Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15],implicitA16:algebra.ring.Rng[A16]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple17Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15], A16: Ring[A16]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "algebra.instances.TupleInstances.tuple17Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple17Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15],implicitA16:algebra.ring.Ring[A16]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple17Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15], A16: Rig[A16]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "algebra.instances.TupleInstances.tuple17Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple17Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15],implicitA16:algebra.ring.Rig[A16]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple16Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14], A15: Semiring[A15]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "algebra.instances.TupleInstances.tuple16Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple16Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14],implicitA15:algebra.ring.Semiring[A15]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple16Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14], A15: Rng[A15]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "algebra.instances.TupleInstances.tuple16Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple16Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14],implicitA15:algebra.ring.Rng[A15]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple16Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14], A15: Ring[A15]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "algebra.instances.TupleInstances.tuple16Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple16Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14],implicitA15:algebra.ring.Ring[A15]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple16Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14], A15: Rig[A15]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "algebra.instances.TupleInstances.tuple16Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple16Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14],implicitA15:algebra.ring.Rig[A15]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple15Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13], A14: Semiring[A14]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "algebra.instances.TupleInstances.tuple15Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple15Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13],implicitA14:algebra.ring.Semiring[A14]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple15Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13], A14: Rng[A14]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "algebra.instances.TupleInstances.tuple15Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple15Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13],implicitA14:algebra.ring.Rng[A14]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple15Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13], A14: Ring[A14]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "algebra.instances.TupleInstances.tuple15Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple15Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13],implicitA14:algebra.ring.Ring[A14]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple15Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13], A14: Rig[A14]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "algebra.instances.TupleInstances.tuple15Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple15Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13],implicitA14:algebra.ring.Rig[A14]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple14Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12], A13: Semiring[A13]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "algebra.instances.TupleInstances.tuple14Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple14Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12],implicitA13:algebra.ring.Semiring[A13]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple14Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12], A13: Rng[A13]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "algebra.instances.TupleInstances.tuple14Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple14Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12],implicitA13:algebra.ring.Rng[A13]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple14Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12], A13: Ring[A13]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "algebra.instances.TupleInstances.tuple14Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple14Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12],implicitA13:algebra.ring.Ring[A13]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple14Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12], A13: Rig[A13]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "algebra.instances.TupleInstances.tuple14Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple14Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12],implicitA13:algebra.ring.Rig[A13]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple13Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11], A12: Semiring[A12]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "algebra.instances.TupleInstances.tuple13Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple13Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11],implicitA12:algebra.ring.Semiring[A12]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple13Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11], A12: Rng[A12]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "algebra.instances.TupleInstances.tuple13Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple13Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11],implicitA12:algebra.ring.Rng[A12]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple13Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11], A12: Ring[A12]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "algebra.instances.TupleInstances.tuple13Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple13Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11],implicitA12:algebra.ring.Ring[A12]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple13Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11], A12: Rig[A12]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "algebra.instances.TupleInstances.tuple13Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple13Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11],implicitA12:algebra.ring.Rig[A12]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple12Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10], A11: Semiring[A11]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "algebra.instances.TupleInstances.tuple12Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple12Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10],implicitA11:algebra.ring.Semiring[A11]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple12Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10], A11: Rng[A11]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "algebra.instances.TupleInstances.tuple12Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple12Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10],implicitA11:algebra.ring.Rng[A11]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple12Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10], A11: Ring[A11]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "algebra.instances.TupleInstances.tuple12Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple12Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10],implicitA11:algebra.ring.Ring[A11]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple12Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10], A11: Rig[A11]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "algebra.instances.TupleInstances.tuple12Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple12Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10],implicitA11:algebra.ring.Rig[A11]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple11Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9], A10: Semiring[A10]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "algebra.instances.TupleInstances.tuple11Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple11Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9],implicitA10:algebra.ring.Semiring[A10]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple11Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9], A10: Rng[A10]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "algebra.instances.TupleInstances.tuple11Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple11Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9],implicitA10:algebra.ring.Rng[A10]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple11Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9], A10: Ring[A10]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "algebra.instances.TupleInstances.tuple11Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple11Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9],implicitA10:algebra.ring.Ring[A10]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple11Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9], A10: Rig[A10]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "algebra.instances.TupleInstances.tuple11Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple11Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9],implicitA10:algebra.ring.Rig[A10]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple10Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8], A9: Semiring[A9]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "algebra.instances.TupleInstances.tuple10Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple10Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8],implicitA9:algebra.ring.Semiring[A9]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple10Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8], A9: Rng[A9]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "algebra.instances.TupleInstances.tuple10Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple10Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8],implicitA9:algebra.ring.Rng[A9]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple10Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8], A9: Ring[A9]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "algebra.instances.TupleInstances.tuple10Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple10Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8],implicitA9:algebra.ring.Ring[A9]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple10Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8], A9: Rig[A9]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "algebra.instances.TupleInstances.tuple10Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple10Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8],implicitA9:algebra.ring.Rig[A9]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple9Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7], A8: Semiring[A8]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "algebra.instances.TupleInstances.tuple9Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple9Semiring[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7],implicitA8:algebra.ring.Semiring[A8]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple9Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7], A8: Rng[A8]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "algebra.instances.TupleInstances.tuple9Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple9Rng[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7],implicitA8:algebra.ring.Rng[A8]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple9Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7], A8: Ring[A8]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "algebra.instances.TupleInstances.tuple9Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple9Ring[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7],implicitA8:algebra.ring.Ring[A8]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple9Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7], A8: Rig[A8]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "algebra.instances.TupleInstances.tuple9Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple9Rig[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7],implicitA8:algebra.ring.Rig[A8]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple8Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6], A7: Semiring[A7]): Semiring[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "algebra.instances.TupleInstances.tuple8Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple8Semiring[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6],implicitA7:algebra.ring.Semiring[A7]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple8Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6], A7: Rng[A7]): Rng[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "algebra.instances.TupleInstances.tuple8Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple8Rng[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6],implicitA7:algebra.ring.Rng[A7]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple8Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6], A7: Ring[A7]): Ring[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "algebra.instances.TupleInstances.tuple8Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple8Ring[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6],implicitA7:algebra.ring.Ring[A7]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple8Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6], A7: Rig[A7]): Rig[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "algebra.instances.TupleInstances.tuple8Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple8Rig[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6],implicitA7:algebra.ring.Rig[A7]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple7Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5], A6: Semiring[A6]): Semiring[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "algebra.instances.TupleInstances.tuple7Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple7Semiring[A0,A1,A2,A3,A4,A5,A6](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5],implicitA6:algebra.ring.Semiring[A6]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple7Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5], A6: Rng[A6]): Rng[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "algebra.instances.TupleInstances.tuple7Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple7Rng[A0,A1,A2,A3,A4,A5,A6](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5],implicitA6:algebra.ring.Rng[A6]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple7Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5], A6: Ring[A6]): Ring[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "algebra.instances.TupleInstances.tuple7Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple7Ring[A0,A1,A2,A3,A4,A5,A6](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5],implicitA6:algebra.ring.Ring[A6]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple7Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5], A6: Rig[A6]): Rig[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "algebra.instances.TupleInstances.tuple7Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple7Rig[A0,A1,A2,A3,A4,A5,A6](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5],implicitA6:algebra.ring.Rig[A6]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple6Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4], A5: Semiring[A5]): Semiring[(A0, A1, A2, A3, A4, A5)]", "member" : "algebra.instances.TupleInstances.tuple6Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple6Semiring[A0,A1,A2,A3,A4,A5](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4],implicitA5:algebra.ring.Semiring[A5]):algebra.ring.Semiring[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple6Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4], A5: Rng[A5]): Rng[(A0, A1, A2, A3, A4, A5)]", "member" : "algebra.instances.TupleInstances.tuple6Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple6Rng[A0,A1,A2,A3,A4,A5](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4],implicitA5:algebra.ring.Rng[A5]):algebra.ring.Rng[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple6Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4], A5: Ring[A5]): Ring[(A0, A1, A2, A3, A4, A5)]", "member" : "algebra.instances.TupleInstances.tuple6Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple6Ring[A0,A1,A2,A3,A4,A5](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4],implicitA5:algebra.ring.Ring[A5]):algebra.ring.Ring[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple6Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4], A5: Rig[A5]): Rig[(A0, A1, A2, A3, A4, A5)]", "member" : "algebra.instances.TupleInstances.tuple6Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple6Rig[A0,A1,A2,A3,A4,A5](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4],implicitA5:algebra.ring.Rig[A5]):algebra.ring.Rig[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple5Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3], A4: Semiring[A4]): Semiring[(A0, A1, A2, A3, A4)]", "member" : "algebra.instances.TupleInstances.tuple5Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple5Semiring[A0,A1,A2,A3,A4](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3],implicitA4:algebra.ring.Semiring[A4]):algebra.ring.Semiring[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple5Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3], A4: Rng[A4]): Rng[(A0, A1, A2, A3, A4)]", "member" : "algebra.instances.TupleInstances.tuple5Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple5Rng[A0,A1,A2,A3,A4](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3],implicitA4:algebra.ring.Rng[A4]):algebra.ring.Rng[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple5Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3], A4: Ring[A4]): Ring[(A0, A1, A2, A3, A4)]", "member" : "algebra.instances.TupleInstances.tuple5Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple5Ring[A0,A1,A2,A3,A4](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3],implicitA4:algebra.ring.Ring[A4]):algebra.ring.Ring[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple5Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3], A4: Rig[A4]): Rig[(A0, A1, A2, A3, A4)]", "member" : "algebra.instances.TupleInstances.tuple5Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple5Rig[A0,A1,A2,A3,A4](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3],implicitA4:algebra.ring.Rig[A4]):algebra.ring.Rig[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple4Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2], A3: Semiring[A3]): Semiring[(A0, A1, A2, A3)]", "member" : "algebra.instances.TupleInstances.tuple4Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple4Semiring[A0,A1,A2,A3](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2],implicitA3:algebra.ring.Semiring[A3]):algebra.ring.Semiring[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple4Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2], A3: Rng[A3]): Rng[(A0, A1, A2, A3)]", "member" : "algebra.instances.TupleInstances.tuple4Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple4Rng[A0,A1,A2,A3](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2],implicitA3:algebra.ring.Rng[A3]):algebra.ring.Rng[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple4Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2], A3: Ring[A3]): Ring[(A0, A1, A2, A3)]", "member" : "algebra.instances.TupleInstances.tuple4Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple4Ring[A0,A1,A2,A3](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2],implicitA3:algebra.ring.Ring[A3]):algebra.ring.Ring[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple4Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2], A3: Rig[A3]): Rig[(A0, A1, A2, A3)]", "member" : "algebra.instances.TupleInstances.tuple4Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple4Rig[A0,A1,A2,A3](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2],implicitA3:algebra.ring.Rig[A3]):algebra.ring.Rig[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple3Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1], A2: Semiring[A2]): Semiring[(A0, A1, A2)]", "member" : "algebra.instances.TupleInstances.tuple3Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple3Semiring[A0,A1,A2](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1],implicitA2:algebra.ring.Semiring[A2]):algebra.ring.Semiring[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple3Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1], A2: Rng[A2]): Rng[(A0, A1, A2)]", "member" : "algebra.instances.TupleInstances.tuple3Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple3Rng[A0,A1,A2](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1],implicitA2:algebra.ring.Rng[A2]):algebra.ring.Rng[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple3Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1], A2: Ring[A2]): Ring[(A0, A1, A2)]", "member" : "algebra.instances.TupleInstances.tuple3Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple3Ring[A0,A1,A2](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1],implicitA2:algebra.ring.Ring[A2]):algebra.ring.Ring[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple3Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1], A2: Rig[A2]): Rig[(A0, A1, A2)]", "member" : "algebra.instances.TupleInstances.tuple3Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple3Rig[A0,A1,A2](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1],implicitA2:algebra.ring.Rig[A2]):algebra.ring.Rig[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple2Semiring", "tail" : "(A0: Semiring[A0], A1: Semiring[A1]): Semiring[(A0, A1)]", "member" : "algebra.instances.TupleInstances.tuple2Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple2Semiring[A0,A1](implicitA0:algebra.ring.Semiring[A0],implicitA1:algebra.ring.Semiring[A1]):algebra.ring.Semiring[(A0,A1)]", "kind" : "implicit def"}, {"label" : "tuple2Rng", "tail" : "(A0: Rng[A0], A1: Rng[A1]): Rng[(A0, A1)]", "member" : "algebra.instances.TupleInstances.tuple2Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple2Rng[A0,A1](implicitA0:algebra.ring.Rng[A0],implicitA1:algebra.ring.Rng[A1]):algebra.ring.Rng[(A0,A1)]", "kind" : "implicit def"}, {"label" : "tuple2Ring", "tail" : "(A0: Ring[A0], A1: Ring[A1]): Ring[(A0, A1)]", "member" : "algebra.instances.TupleInstances.tuple2Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple2Ring[A0,A1](implicitA0:algebra.ring.Ring[A0],implicitA1:algebra.ring.Ring[A1]):algebra.ring.Ring[(A0,A1)]", "kind" : "implicit def"}, {"label" : "tuple2Rig", "tail" : "(A0: Rig[A0], A1: Rig[A1]): Rig[(A0, A1)]", "member" : "algebra.instances.TupleInstances.tuple2Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple2Rig[A0,A1](implicitA0:algebra.ring.Rig[A0],implicitA1:algebra.ring.Rig[A1]):algebra.ring.Rig[(A0,A1)]", "kind" : "implicit def"}, {"label" : "tuple1Semiring", "tail" : "(A0: Semiring[A0]): Semiring[(A0)]", "member" : "algebra.instances.TupleInstances.tuple1Semiring", "link" : "algebra\/instances\/TupleInstances.html#tuple1Semiring[A0](implicitA0:algebra.ring.Semiring[A0]):algebra.ring.Semiring[(A0,)]", "kind" : "implicit def"}, {"label" : "tuple1Rng", "tail" : "(A0: Rng[A0]): Rng[(A0)]", "member" : "algebra.instances.TupleInstances.tuple1Rng", "link" : "algebra\/instances\/TupleInstances.html#tuple1Rng[A0](implicitA0:algebra.ring.Rng[A0]):algebra.ring.Rng[(A0,)]", "kind" : "implicit def"}, {"label" : "tuple1Ring", "tail" : "(A0: Ring[A0]): Ring[(A0)]", "member" : "algebra.instances.TupleInstances.tuple1Ring", "link" : "algebra\/instances\/TupleInstances.html#tuple1Ring[A0](implicitA0:algebra.ring.Ring[A0]):algebra.ring.Ring[(A0,)]", "kind" : "implicit def"}, {"label" : "tuple1Rig", "tail" : "(A0: Rig[A0]): Rig[(A0)]", "member" : "algebra.instances.TupleInstances.tuple1Rig", "link" : "algebra\/instances\/TupleInstances.html#tuple1Rig[A0](implicitA0:algebra.ring.Rig[A0]):algebra.ring.Rig[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple22", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17], A18: cats.kernel.Semilattice[A18], A19: cats.kernel.Semilattice[A19], A20: cats.kernel.Semilattice[A20], A21: cats.kernel.Semilattice[A21]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple22", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20],implicitA21:cats.kernel.Semilattice[A21]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple22", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17], A18: cats.kernel.Semigroup[A18], A19: cats.kernel.Semigroup[A19], A20: cats.kernel.Semigroup[A20], A21: cats.kernel.Semigroup[A21]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple22", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20],implicitA21:cats.kernel.Semigroup[A21]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple22", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17], A18: cats.kernel.PartialOrder[A18], A19: cats.kernel.PartialOrder[A19], A20: cats.kernel.PartialOrder[A20], A21: cats.kernel.PartialOrder[A21]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple22", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20],implicitA21:cats.kernel.PartialOrder[A21]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple22", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17], A18: cats.kernel.Order[A18], A19: cats.kernel.Order[A19], A20: cats.kernel.Order[A20], A21: cats.kernel.Order[A21]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple22", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20],implicitA21:cats.kernel.Order[A21]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple22", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17], A18: cats.kernel.Monoid[A18], A19: cats.kernel.Monoid[A19], A20: cats.kernel.Monoid[A20], A21: cats.kernel.Monoid[A21]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple22", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20],implicitA21:cats.kernel.Monoid[A21]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple22", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17], A18: cats.kernel.Eq[A18], A19: cats.kernel.Eq[A19], A20: cats.kernel.Eq[A20], A21: cats.kernel.Eq[A21]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple22", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20],implicitA21:cats.kernel.Eq[A21]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple22", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17], A18: cats.kernel.Group[A18], A19: cats.kernel.Group[A19], A20: cats.kernel.Group[A20], A21: cats.kernel.Group[A21]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple22", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20],implicitA21:cats.kernel.Group[A21]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple22", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17], A18: cats.kernel.Band[A18], A19: cats.kernel.Band[A19], A20: cats.kernel.Band[A20], A21: cats.kernel.Band[A21]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple22", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20],implicitA21:cats.kernel.Band[A21]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple21", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17], A18: cats.kernel.Semilattice[A18], A19: cats.kernel.Semilattice[A19], A20: cats.kernel.Semilattice[A20]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple21", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple21", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17], A18: cats.kernel.Semigroup[A18], A19: cats.kernel.Semigroup[A19], A20: cats.kernel.Semigroup[A20]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple21", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple21", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17], A18: cats.kernel.PartialOrder[A18], A19: cats.kernel.PartialOrder[A19], A20: cats.kernel.PartialOrder[A20]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple21", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple21", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17], A18: cats.kernel.Order[A18], A19: cats.kernel.Order[A19], A20: cats.kernel.Order[A20]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple21", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple21", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17], A18: cats.kernel.Monoid[A18], A19: cats.kernel.Monoid[A19], A20: cats.kernel.Monoid[A20]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple21", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple21", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17], A18: cats.kernel.Eq[A18], A19: cats.kernel.Eq[A19], A20: cats.kernel.Eq[A20]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple21", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple21", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17], A18: cats.kernel.Group[A18], A19: cats.kernel.Group[A19], A20: cats.kernel.Group[A20]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple21", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple21", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17], A18: cats.kernel.Band[A18], A19: cats.kernel.Band[A19], A20: cats.kernel.Band[A20]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple21", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple20", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17], A18: cats.kernel.Semilattice[A18], A19: cats.kernel.Semilattice[A19]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple20", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple20", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17], A18: cats.kernel.Semigroup[A18], A19: cats.kernel.Semigroup[A19]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple20", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple20", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17], A18: cats.kernel.PartialOrder[A18], A19: cats.kernel.PartialOrder[A19]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple20", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple20", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17], A18: cats.kernel.Order[A18], A19: cats.kernel.Order[A19]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple20", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple20", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17], A18: cats.kernel.Monoid[A18], A19: cats.kernel.Monoid[A19]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple20", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple20", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17], A18: cats.kernel.Eq[A18], A19: cats.kernel.Eq[A19]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple20", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple20", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17], A18: cats.kernel.Group[A18], A19: cats.kernel.Group[A19]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple20", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple20", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17], A18: cats.kernel.Band[A18], A19: cats.kernel.Band[A19]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple20", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple19", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17], A18: cats.kernel.Semilattice[A18]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple19", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple19", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17], A18: cats.kernel.Semigroup[A18]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple19", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple19", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17], A18: cats.kernel.PartialOrder[A18]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple19", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple19", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17], A18: cats.kernel.Order[A18]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple19", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple19", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17], A18: cats.kernel.Monoid[A18]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple19", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple19", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17], A18: cats.kernel.Eq[A18]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple19", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple19", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17], A18: cats.kernel.Group[A18]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple19", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple19", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17], A18: cats.kernel.Band[A18]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple19", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple18", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16], A17: cats.kernel.Semilattice[A17]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple18", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple18", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16], A17: cats.kernel.Semigroup[A17]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple18", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple18", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16], A17: cats.kernel.PartialOrder[A17]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple18", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple18", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16], A17: cats.kernel.Order[A17]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple18", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple18", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16], A17: cats.kernel.Monoid[A17]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple18", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple18", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16], A17: cats.kernel.Eq[A17]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple18", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple18", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16], A17: cats.kernel.Group[A17]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple18", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple18", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16], A17: cats.kernel.Band[A17]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple18", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple17", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15], A16: cats.kernel.Semilattice[A16]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple17", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple17", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15], A16: cats.kernel.Semigroup[A16]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple17", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple17", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15], A16: cats.kernel.PartialOrder[A16]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple17", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple17", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15], A16: cats.kernel.Order[A16]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple17", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple17", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15], A16: cats.kernel.Monoid[A16]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple17", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple17", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15], A16: cats.kernel.Eq[A16]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple17", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple17", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15], A16: cats.kernel.Group[A16]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple17", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple17", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15], A16: cats.kernel.Band[A16]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple17", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple16", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14], A15: cats.kernel.Semilattice[A15]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple16", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple16", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14], A15: cats.kernel.Semigroup[A15]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple16", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple16", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14], A15: cats.kernel.PartialOrder[A15]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple16", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple16", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14], A15: cats.kernel.Order[A15]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple16", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple16", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14], A15: cats.kernel.Monoid[A15]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple16", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple16", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14], A15: cats.kernel.Eq[A15]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple16", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple16", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14], A15: cats.kernel.Group[A15]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple16", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple16", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14], A15: cats.kernel.Band[A15]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple16", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple15", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13], A14: cats.kernel.Semilattice[A14]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple15", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple15", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13], A14: cats.kernel.Semigroup[A14]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple15", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple15", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13], A14: cats.kernel.PartialOrder[A14]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple15", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple15", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13], A14: cats.kernel.Order[A14]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple15", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple15", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13], A14: cats.kernel.Monoid[A14]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple15", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple15", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13], A14: cats.kernel.Eq[A14]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple15", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple15", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13], A14: cats.kernel.Group[A14]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple15", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple15", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13], A14: cats.kernel.Band[A14]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple15", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple14", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12], A13: cats.kernel.Semilattice[A13]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple14", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple14", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12], A13: cats.kernel.Semigroup[A13]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple14", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple14", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12], A13: cats.kernel.PartialOrder[A13]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple14", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple14", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12], A13: cats.kernel.Order[A13]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple14", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple14", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12], A13: cats.kernel.Monoid[A13]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple14", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple14", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12], A13: cats.kernel.Eq[A13]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple14", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple14", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12], A13: cats.kernel.Group[A13]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple14", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple14", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12], A13: cats.kernel.Band[A13]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple14", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple13", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11], A12: cats.kernel.Semilattice[A12]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple13", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple13", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11], A12: cats.kernel.Semigroup[A12]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple13", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple13", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11], A12: cats.kernel.PartialOrder[A12]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple13", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple13", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11], A12: cats.kernel.Order[A12]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple13", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple13", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11], A12: cats.kernel.Monoid[A12]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple13", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple13", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11], A12: cats.kernel.Eq[A12]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple13", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple13", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11], A12: cats.kernel.Group[A12]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple13", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple13", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11], A12: cats.kernel.Band[A12]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple13", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple12", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10], A11: cats.kernel.Semilattice[A11]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple12", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple12", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10], A11: cats.kernel.Semigroup[A11]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple12", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple12", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10], A11: cats.kernel.PartialOrder[A11]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple12", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple12", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10], A11: cats.kernel.Order[A11]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple12", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple12", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10], A11: cats.kernel.Monoid[A11]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple12", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple12", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10], A11: cats.kernel.Eq[A11]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple12", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple12", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10], A11: cats.kernel.Group[A11]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple12", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple12", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10], A11: cats.kernel.Band[A11]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple12", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple11", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9], A10: cats.kernel.Semilattice[A10]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple11", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple11", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9], A10: cats.kernel.Semigroup[A10]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple11", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple11", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9], A10: cats.kernel.PartialOrder[A10]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple11", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple11", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9], A10: cats.kernel.Order[A10]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple11", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple11", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9], A10: cats.kernel.Monoid[A10]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple11", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple11", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9], A10: cats.kernel.Eq[A10]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple11", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple11", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9], A10: cats.kernel.Group[A10]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple11", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple11", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9], A10: cats.kernel.Band[A10]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple11", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple10", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8], A9: cats.kernel.Semilattice[A9]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple10", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple10", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8], A9: cats.kernel.Semigroup[A9]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple10", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple10", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8], A9: cats.kernel.PartialOrder[A9]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple10", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple10", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8], A9: cats.kernel.Order[A9]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple10", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple10", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8], A9: cats.kernel.Monoid[A9]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple10", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple10", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8], A9: cats.kernel.Eq[A9]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple10", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple10", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8], A9: cats.kernel.Group[A9]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple10", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple10", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8], A9: cats.kernel.Band[A9]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple10", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple9", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7], A8: cats.kernel.Semilattice[A8]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple9", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple9", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7], A8: cats.kernel.Semigroup[A8]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple9", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple9", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7], A8: cats.kernel.PartialOrder[A8]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple9", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple9", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7], A8: cats.kernel.Order[A8]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple9", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple9", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7], A8: cats.kernel.Monoid[A8]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple9", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple9", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7], A8: cats.kernel.Eq[A8]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple9", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple9", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7], A8: cats.kernel.Group[A8]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple9", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple9", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7], A8: cats.kernel.Band[A8]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple9", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple8", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6], A7: cats.kernel.Semilattice[A7]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple8", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple8", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6], A7: cats.kernel.Semigroup[A7]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple8", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple8", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6], A7: cats.kernel.PartialOrder[A7]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple8", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple8", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6], A7: cats.kernel.Order[A7]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple8", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple8", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6], A7: cats.kernel.Monoid[A7]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple8", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple8", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6], A7: cats.kernel.Eq[A7]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple8", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple8", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6], A7: cats.kernel.Group[A7]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple8", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple8", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6], A7: cats.kernel.Band[A7]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple8", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple7", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5], A6: cats.kernel.Semilattice[A6]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple7", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple7", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5], A6: cats.kernel.Semigroup[A6]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple7", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple7", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5], A6: cats.kernel.PartialOrder[A6]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple7", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple7", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5], A6: cats.kernel.Order[A6]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple7", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple7", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5], A6: cats.kernel.Monoid[A6]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple7", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple7", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5], A6: cats.kernel.Eq[A6]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple7", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple7", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5], A6: cats.kernel.Group[A6]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple7", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple7", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5], A6: cats.kernel.Band[A6]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple7", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple6", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4], A5: cats.kernel.Semilattice[A5]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple6", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple6", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4], A5: cats.kernel.Semigroup[A5]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple6", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple6", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4], A5: cats.kernel.PartialOrder[A5]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple6", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple6", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4], A5: cats.kernel.Order[A5]): cats.kernel.Order[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple6", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple6", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4], A5: cats.kernel.Monoid[A5]): cats.kernel.Monoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple6", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple6", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4], A5: cats.kernel.Eq[A5]): cats.kernel.Eq[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple6", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple6", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4], A5: cats.kernel.Group[A5]): cats.kernel.Group[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple6", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple6", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4], A5: cats.kernel.Band[A5]): cats.kernel.Band[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple6", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple5", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3], A4: cats.kernel.Semilattice[A4]): cats.kernel.Semilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple5", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple5", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3], A4: cats.kernel.Semigroup[A4]): cats.kernel.Semigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple5", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple5", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3], A4: cats.kernel.PartialOrder[A4]): cats.kernel.PartialOrder[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple5", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple5", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3], A4: cats.kernel.Order[A4]): cats.kernel.Order[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple5", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4]):cats.kernel.Order[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple5", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3], A4: cats.kernel.Monoid[A4]): cats.kernel.Monoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple5", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4]):cats.kernel.Monoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple5", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3], A4: cats.kernel.Eq[A4]): cats.kernel.Eq[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple5", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4]):cats.kernel.Eq[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple5", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3], A4: cats.kernel.Group[A4]): cats.kernel.Group[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple5", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4]):cats.kernel.Group[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple5", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3], A4: cats.kernel.Band[A4]): cats.kernel.Band[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple5", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4]):cats.kernel.Band[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple4", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2], A3: cats.kernel.Semilattice[A3]): cats.kernel.Semilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple4", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3]):cats.kernel.Semilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple4", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2], A3: cats.kernel.Semigroup[A3]): cats.kernel.Semigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple4", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3]):cats.kernel.Semigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple4", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2], A3: cats.kernel.PartialOrder[A3]): cats.kernel.PartialOrder[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple4", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3]):cats.kernel.PartialOrder[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple4", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2], A3: cats.kernel.Order[A3]): cats.kernel.Order[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple4", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3]):cats.kernel.Order[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple4", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2], A3: cats.kernel.Monoid[A3]): cats.kernel.Monoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple4", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3]):cats.kernel.Monoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple4", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2], A3: cats.kernel.Eq[A3]): cats.kernel.Eq[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple4", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3]):cats.kernel.Eq[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple4", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2], A3: cats.kernel.Group[A3]): cats.kernel.Group[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple4", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3]):cats.kernel.Group[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple4", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2], A3: cats.kernel.Band[A3]): cats.kernel.Band[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple4", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3]):cats.kernel.Band[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple3", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1], A2: cats.kernel.Semilattice[A2]): cats.kernel.Semilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple3", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2]):cats.kernel.Semilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple3", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1], A2: cats.kernel.Semigroup[A2]): cats.kernel.Semigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple3", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2]):cats.kernel.Semigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple3", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1], A2: cats.kernel.PartialOrder[A2]): cats.kernel.PartialOrder[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple3", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2]):cats.kernel.PartialOrder[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple3", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1], A2: cats.kernel.Order[A2]): cats.kernel.Order[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple3", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2]):cats.kernel.Order[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple3", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1], A2: cats.kernel.Monoid[A2]): cats.kernel.Monoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple3", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2]):cats.kernel.Monoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple3", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1], A2: cats.kernel.Eq[A2]): cats.kernel.Eq[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple3", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple3[A0,A1,A2](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2]):cats.kernel.Eq[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple3", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1], A2: cats.kernel.Group[A2]): cats.kernel.Group[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple3", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2]):cats.kernel.Group[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple3", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1], A2: cats.kernel.Band[A2]): cats.kernel.Band[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple3", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple3[A0,A1,A2](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2]):cats.kernel.Band[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple2", "tail" : "(A0: cats.kernel.Semilattice[A0], A1: cats.kernel.Semilattice[A1]): cats.kernel.Semilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple2", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1]):cats.kernel.Semilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple2", "tail" : "(A0: cats.kernel.Semigroup[A0], A1: cats.kernel.Semigroup[A1]): cats.kernel.Semigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple2", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1]):cats.kernel.Semigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple2", "tail" : "(A0: cats.kernel.PartialOrder[A0], A1: cats.kernel.PartialOrder[A1]): cats.kernel.PartialOrder[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple2", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple2[A0,A1](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1]):cats.kernel.PartialOrder[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple2", "tail" : "(A0: cats.kernel.Order[A0], A1: cats.kernel.Order[A1]): cats.kernel.Order[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple2", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple2[A0,A1](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1]):cats.kernel.Order[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple2", "tail" : "(A0: cats.kernel.Monoid[A0], A1: cats.kernel.Monoid[A1]): cats.kernel.Monoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple2", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple2[A0,A1](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1]):cats.kernel.Monoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple2", "tail" : "(A0: cats.kernel.Eq[A0], A1: cats.kernel.Eq[A1]): cats.kernel.Eq[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple2", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple2[A0,A1](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1]):cats.kernel.Eq[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple2", "tail" : "(A0: cats.kernel.Group[A0], A1: cats.kernel.Group[A1]): cats.kernel.Group[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple2", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple2[A0,A1](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1]):cats.kernel.Group[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple2", "tail" : "(A0: cats.kernel.Band[A0], A1: cats.kernel.Band[A1]): cats.kernel.Band[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple2", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple2[A0,A1](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1]):cats.kernel.Band[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple1", "tail" : "(A0: cats.kernel.Semilattice[A0]): cats.kernel.Semilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemilatticeForTuple1", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemilatticeForTuple1[A0](implicitA0:cats.kernel.Semilattice[A0]):cats.kernel.Semilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple1", "tail" : "(A0: cats.kernel.Semigroup[A0]): cats.kernel.Semigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdSemigroupForTuple1", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdSemigroupForTuple1[A0](implicitA0:cats.kernel.Semigroup[A0]):cats.kernel.Semigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple1", "tail" : "(A0: cats.kernel.PartialOrder[A0]): cats.kernel.PartialOrder[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdPartialOrderForTuple1", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdPartialOrderForTuple1[A0](implicitA0:cats.kernel.PartialOrder[A0]):cats.kernel.PartialOrder[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple1", "tail" : "(A0: cats.kernel.Order[A0]): cats.kernel.Order[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple1", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdOrderForTuple1[A0](implicitA0:cats.kernel.Order[A0]):cats.kernel.Order[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple1", "tail" : "(A0: cats.kernel.Monoid[A0]): cats.kernel.Monoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdMonoidForTuple1", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdMonoidForTuple1[A0](implicitA0:cats.kernel.Monoid[A0]):cats.kernel.Monoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple1", "tail" : "(A0: cats.kernel.Eq[A0]): cats.kernel.Eq[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdEqForTuple1", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdEqForTuple1[A0](implicitA0:cats.kernel.Eq[A0]):cats.kernel.Eq[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple1", "tail" : "(A0: cats.kernel.Group[A0]): cats.kernel.Group[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdGroupForTuple1", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdGroupForTuple1[A0](implicitA0:cats.kernel.Group[A0]):cats.kernel.Group[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple1", "tail" : "(A0: cats.kernel.Band[A0]): cats.kernel.Band[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBandForTuple1", "link" : "algebra\/instances\/TupleInstances.html#catsKernelStdBandForTuple1[A0](implicitA0:cats.kernel.Band[A0]):cats.kernel.Band[(A0,)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/TupleInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/TupleInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/TupleInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/TupleInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/TupleInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/TupleInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/TupleInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/TupleInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/TupleInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/TupleInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/TupleInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/TupleInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/TupleInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/TupleInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/TupleInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/TupleInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/TupleInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/TupleInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/TupleInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/TupleInstances.html", "kind" : "trait"}, {"name" : "algebra.instances.UnitAlgebra", "shortDescription" : "", "members_class" : [{"label" : "pow", "tail" : "(a: Unit, b: Int): Unit", "member" : "algebra.instances.UnitAlgebra.pow", "link" : "algebra\/instances\/UnitAlgebra.html#pow(a:Unit,b:Int):Unit", "kind" : "def"}, {"label" : "times", "tail" : "(a: Unit, b: Unit): Unit", "member" : "algebra.instances.UnitAlgebra.times", "link" : "algebra\/instances\/UnitAlgebra.html#times(a:Unit,b:Unit):Unit", "kind" : "def"}, {"label" : "negate", "tail" : "(x: Unit): Unit", "member" : "algebra.instances.UnitAlgebra.negate", "link" : "algebra\/instances\/UnitAlgebra.html#negate(x:Unit):Unit", "kind" : "def"}, {"label" : "plus", "tail" : "(a: Unit, b: Unit): Unit", "member" : "algebra.instances.UnitAlgebra.plus", "link" : "algebra\/instances\/UnitAlgebra.html#plus(a:Unit,b:Unit):Unit", "kind" : "def"}, {"label" : "isOne", "tail" : "(x: Unit)(ev: Eq[Unit]): Boolean", "member" : "algebra.instances.UnitAlgebra.isOne", "link" : "algebra\/instances\/UnitAlgebra.html#isOne(x:Unit)(implicitev:algebra.Eq[Unit]):Boolean", "kind" : "def"}, {"label" : "isZero", "tail" : "(x: Unit)(ev: Eq[Unit]): Boolean", "member" : "algebra.instances.UnitAlgebra.isZero", "link" : "algebra\/instances\/UnitAlgebra.html#isZero(x:Unit)(implicitev:algebra.Eq[Unit]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(): Unit", "member" : "algebra.instances.UnitAlgebra.one", "link" : "algebra\/instances\/UnitAlgebra.html#one:Unit", "kind" : "def"}, {"label" : "zero", "tail" : "(): Unit", "member" : "algebra.instances.UnitAlgebra.zero", "link" : "algebra\/instances\/UnitAlgebra.html#zero:Unit", "kind" : "def"}, {"member" : "algebra.instances.UnitAlgebra#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeMonoid[Unit]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/instances\/UnitAlgebra.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt): Unit", "member" : "algebra.ring.Ring.fromBigInt", "link" : "algebra\/instances\/UnitAlgebra.html#fromBigInt(n:BigInt):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): Unit", "member" : "algebra.ring.Ring.fromInt", "link" : "algebra\/instances\/UnitAlgebra.html#fromInt(n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Unit]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/instances\/UnitAlgebra.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Unit, n: Int): Unit", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/instances\/UnitAlgebra.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Unit, y: Unit): Unit", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/instances\/UnitAlgebra.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Unit]): Option[Unit]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/instances\/UnitAlgebra.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Unit]): Unit", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/instances\/UnitAlgebra.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Unit, n: Int): Unit", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/instances\/UnitAlgebra.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Unit]): Option[Unit]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/instances\/UnitAlgebra.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Unit]): Unit", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/instances\/UnitAlgebra.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Unit, n: Int): Unit", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/instances\/UnitAlgebra.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/UnitAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/UnitAlgebra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/UnitAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/UnitAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/UnitAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/UnitAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/UnitAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/UnitAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/UnitAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/UnitAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/UnitAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/UnitAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/UnitAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/UnitAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/UnitAlgebra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/UnitAlgebra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/UnitAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/UnitAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/UnitAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/instances\/UnitAlgebra.html", "kind" : "class"}, {"name" : "algebra.instances.UnitInstances", "members_trait" : [{"label" : "unitRing", "tail" : ": CommutativeRing[Unit]", "member" : "algebra.instances.UnitInstances.unitRing", "link" : "algebra\/instances\/UnitInstances.html#unitRing:algebra.ring.CommutativeRing[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdAlgebraForUnit", "tail" : ": cats.kernel.BoundedSemilattice[Unit] with cats.kernel.CommutativeGroup[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdAlgebraForUnit", "link" : "algebra\/instances\/UnitInstances.html#catsKernelStdAlgebraForUnit:cats.kernel.BoundedSemilattice[Unit]withcats.kernel.CommutativeGroup[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUnit", "tail" : ": cats.kernel.Order[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdOrderForUnit", "link" : "algebra\/instances\/UnitInstances.html#catsKernelStdOrderForUnit:cats.kernel.Order[Unit]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/instances\/UnitInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/instances\/UnitInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/instances\/UnitInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/instances\/UnitInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/instances\/UnitInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/instances\/UnitInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/instances\/UnitInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/UnitInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/UnitInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/instances\/UnitInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/instances\/UnitInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/instances\/UnitInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/instances\/UnitInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/instances\/UnitInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/instances\/UnitInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/instances\/UnitInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/instances\/UnitInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/instances\/UnitInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/instances\/UnitInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/instances\/UnitInstances.html", "kind" : "trait"}], "algebra.laws" : [{"name" : "algebra.laws.CheckSupport", "shortDescription" : "This object contains Arbitrary instances for types defined inalgebra.instances, as well as anything else we'd like to import to assistin running ScalaCheck tests.", "object" : "algebra\/laws\/CheckSupport$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/CheckSupport$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/CheckSupport$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/CheckSupport$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/CheckSupport$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/CheckSupport$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/CheckSupport$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/CheckSupport$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/CheckSupport$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/CheckSupport$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/CheckSupport$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/CheckSupport$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/CheckSupport$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/CheckSupport$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/CheckSupport$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/CheckSupport$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/CheckSupport$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/CheckSupport$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/CheckSupport$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/CheckSupport$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "algebra.laws.LatticeLaws", "members_trait" : [{"label" : "GroupProperties", "tail" : "", "member" : "cats.kernel.laws.GroupLaws.GroupProperties", "link" : "algebra\/laws\/LatticeLaws.html#GroupPropertiesextendsGroupLaws.this.RuleSet", "kind" : "class"}, {"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "algebra\/laws\/LatticeLaws.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "algebra\/laws\/LatticeLaws.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "algebra\/laws\/LatticeLaws.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "algebra\/laws\/LatticeLaws.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "LatticeProperties", "tail" : "", "member" : "algebra.laws.LatticeLaws.LatticeProperties", "link" : "algebra\/laws\/LatticeLaws.html#LatticePropertiesextendsLatticeLaws.this.RuleSet", "kind" : "class"}, {"label" : "boundedDistributiveLattice", "tail" : "(A: BoundedDistributiveLattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedDistributiveLattice", "link" : "algebra\/laws\/LatticeLaws.html#boundedDistributiveLattice(implicitA:algebra.lattice.BoundedDistributiveLattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedLattice", "tail" : "(A: BoundedLattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedLattice", "link" : "algebra\/laws\/LatticeLaws.html#boundedLattice(implicitA:algebra.lattice.BoundedLattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedMeetLattice", "tail" : "(A: Lattice[A] with BoundedMeetSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedMeetLattice", "link" : "algebra\/laws\/LatticeLaws.html#boundedMeetLattice(implicitA:algebra.lattice.Lattice[A]withalgebra.lattice.BoundedMeetSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedJoinLattice", "tail" : "(A: Lattice[A] with BoundedJoinSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedJoinLattice", "link" : "algebra\/laws\/LatticeLaws.html#boundedJoinLattice(implicitA:algebra.lattice.Lattice[A]withalgebra.lattice.BoundedJoinSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedMeetSemilattice", "tail" : "(A: BoundedMeetSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedMeetSemilattice", "link" : "algebra\/laws\/LatticeLaws.html#boundedMeetSemilattice(implicitA:algebra.lattice.BoundedMeetSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedJoinSemilattice", "tail" : "(A: BoundedJoinSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedJoinSemilattice", "link" : "algebra\/laws\/LatticeLaws.html#boundedJoinSemilattice(implicitA:algebra.lattice.BoundedJoinSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "distributiveLattice", "tail" : "(A: DistributiveLattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.distributiveLattice", "link" : "algebra\/laws\/LatticeLaws.html#distributiveLattice(implicitA:algebra.lattice.DistributiveLattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "lattice", "tail" : "(A: Lattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.lattice", "link" : "algebra\/laws\/LatticeLaws.html#lattice(implicitA:algebra.lattice.Lattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(A: MeetSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.meetSemilattice", "link" : "algebra\/laws\/LatticeLaws.html#meetSemilattice(implicitA:algebra.lattice.MeetSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(A: JoinSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.joinSemilattice", "link" : "algebra\/laws\/LatticeLaws.html#joinSemilattice(implicitA:algebra.lattice.JoinSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "commutativeGroup", "tail" : "(A: cats.kernel.CommutativeGroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeGroup", "link" : "algebra\/laws\/LatticeLaws.html#commutativeGroup(implicitA:cats.kernel.CommutativeGroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "group", "tail" : "(A: cats.kernel.Group[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.group", "link" : "algebra\/laws\/LatticeLaws.html#group(implicitA:cats.kernel.Group[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "boundedSemilattice", "tail" : "(A: cats.kernel.BoundedSemilattice[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.boundedSemilattice", "link" : "algebra\/laws\/LatticeLaws.html#boundedSemilattice(implicitA:cats.kernel.BoundedSemilattice[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "commutativeMonoid", "tail" : "(A: cats.kernel.CommutativeMonoid[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeMonoid", "link" : "algebra\/laws\/LatticeLaws.html#commutativeMonoid(implicitA:cats.kernel.CommutativeMonoid[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "monoid", "tail" : "(A: cats.kernel.Monoid[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.monoid", "link" : "algebra\/laws\/LatticeLaws.html#monoid(implicitA:cats.kernel.Monoid[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "semilattice", "tail" : "(A: cats.kernel.Semilattice[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.semilattice", "link" : "algebra\/laws\/LatticeLaws.html#semilattice(implicitA:cats.kernel.Semilattice[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "commutativeSemigroup", "tail" : "(A: cats.kernel.CommutativeSemigroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeSemigroup", "link" : "algebra\/laws\/LatticeLaws.html#commutativeSemigroup(implicitA:cats.kernel.CommutativeSemigroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "band", "tail" : "(A: cats.kernel.Band[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.band", "link" : "algebra\/laws\/LatticeLaws.html#band(implicitA:cats.kernel.Band[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "semigroup", "tail" : "(A: cats.kernel.Semigroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.semigroup", "link" : "algebra\/laws\/LatticeLaws.html#semigroup(implicitA:cats.kernel.Semigroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "algebra\/laws\/LatticeLaws.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/LatticeLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/LatticeLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/LatticeLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/LatticeLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/LatticeLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/LatticeLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/LatticeLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticeLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticeLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticeLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/LatticeLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/LatticeLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/LatticeLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/LatticeLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/LatticeLaws.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/LatticeLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/LatticeLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/LatticeLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/LatticeLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "Arb", "tail" : "(): Arbitrary[A]", "member" : "algebra.laws.LatticeLaws.Arb", "link" : "algebra\/laws\/LatticeLaws.html#Arb:org.scalacheck.Arbitrary[A]", "kind" : "implicit abstract def"}, {"label" : "Equ", "tail" : "(): Eq[A]", "member" : "algebra.laws.LatticeLaws.Equ", "link" : "algebra\/laws\/LatticeLaws.html#Equ:algebra.Eq[A]", "kind" : "implicit abstract def"}], "shortDescription" : "", "object" : "algebra\/laws\/LatticeLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Eq[A], arg1: Arbitrary[A]): LatticeLaws[A]", "member" : "algebra.laws.LatticeLaws.apply", "link" : "algebra\/laws\/LatticeLaws$.html#apply[A](implicitevidence$1:algebra.Eq[A],implicitevidence$2:org.scalacheck.Arbitrary[A]):algebra.laws.LatticeLaws[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/LatticeLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/LatticeLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/LatticeLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/LatticeLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/LatticeLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/LatticeLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/LatticeLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticeLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticeLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticeLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/LatticeLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/LatticeLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/LatticeLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/LatticeLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/LatticeLaws$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/LatticeLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/LatticeLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/LatticeLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/LatticeLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/laws\/LatticeLaws.html", "kind" : "object"}, {"name" : "algebra.laws.LatticePartialOrderLaws", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "LatticePartialOrderProperties", "tail" : "", "member" : "algebra.laws.LatticePartialOrderLaws.LatticePartialOrderProperties", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#LatticePartialOrderPropertiesextendsLatticePartialOrderLaws.this.RuleSet", "kind" : "class"}, {"label" : "boundedLatticePartialOrder", "tail" : "(A: BoundedLattice[A], P: PartialOrder[A]): LatticePartialOrderProperties", "member" : "algebra.laws.LatticePartialOrderLaws.boundedLatticePartialOrder", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#boundedLatticePartialOrder(implicitA:algebra.lattice.BoundedLattice[A],implicitP:algebra.PartialOrder[A]):LatticePartialOrderLaws.this.LatticePartialOrderProperties", "kind" : "def"}, {"label" : "boundedAboveLatticePartialOrder", "tail" : "(A: Lattice[A] with BoundedMeetSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties", "member" : "algebra.laws.LatticePartialOrderLaws.boundedAboveLatticePartialOrder", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#boundedAboveLatticePartialOrder(implicitA:algebra.lattice.Lattice[A]withalgebra.lattice.BoundedMeetSemilattice[A],implicitP:algebra.PartialOrder[A]):LatticePartialOrderLaws.this.LatticePartialOrderProperties", "kind" : "def"}, {"label" : "boundedBelowLatticePartialOrder", "tail" : "(A: Lattice[A] with BoundedJoinSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties", "member" : "algebra.laws.LatticePartialOrderLaws.boundedBelowLatticePartialOrder", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#boundedBelowLatticePartialOrder(implicitA:algebra.lattice.Lattice[A]withalgebra.lattice.BoundedJoinSemilattice[A],implicitP:algebra.PartialOrder[A]):LatticePartialOrderLaws.this.LatticePartialOrderProperties", "kind" : "def"}, {"label" : "boundedMeetSemilatticePartialOrder", "tail" : "(A: BoundedMeetSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties", "member" : "algebra.laws.LatticePartialOrderLaws.boundedMeetSemilatticePartialOrder", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#boundedMeetSemilatticePartialOrder(implicitA:algebra.lattice.BoundedMeetSemilattice[A],implicitP:algebra.PartialOrder[A]):LatticePartialOrderLaws.this.LatticePartialOrderProperties", "kind" : "def"}, {"label" : "boundedJoinSemilatticePartialOrder", "tail" : "(A: BoundedJoinSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties", "member" : "algebra.laws.LatticePartialOrderLaws.boundedJoinSemilatticePartialOrder", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#boundedJoinSemilatticePartialOrder(implicitA:algebra.lattice.BoundedJoinSemilattice[A],implicitP:algebra.PartialOrder[A]):LatticePartialOrderLaws.this.LatticePartialOrderProperties", "kind" : "def"}, {"label" : "latticePartialOrder", "tail" : "(A: Lattice[A], P: PartialOrder[A]): LatticePartialOrderProperties", "member" : "algebra.laws.LatticePartialOrderLaws.latticePartialOrder", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#latticePartialOrder(implicitA:algebra.lattice.Lattice[A],implicitP:algebra.PartialOrder[A]):LatticePartialOrderLaws.this.LatticePartialOrderProperties", "kind" : "def"}, {"label" : "meetSemilatticePartialOrder", "tail" : "(A: MeetSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties", "member" : "algebra.laws.LatticePartialOrderLaws.meetSemilatticePartialOrder", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#meetSemilatticePartialOrder(implicitA:algebra.lattice.MeetSemilattice[A],implicitP:algebra.PartialOrder[A]):LatticePartialOrderLaws.this.LatticePartialOrderProperties", "kind" : "def"}, {"label" : "joinSemilatticePartialOrder", "tail" : "(A: JoinSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties", "member" : "algebra.laws.LatticePartialOrderLaws.joinSemilatticePartialOrder", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#joinSemilatticePartialOrder(implicitA:algebra.lattice.JoinSemilattice[A],implicitP:algebra.PartialOrder[A]):LatticePartialOrderLaws.this.LatticePartialOrderProperties", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/LatticePartialOrderLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "Arb", "tail" : "(): Arbitrary[A]", "member" : "algebra.laws.LatticePartialOrderLaws.Arb", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#Arb:org.scalacheck.Arbitrary[A]", "kind" : "implicit abstract def"}, {"label" : "Equ", "tail" : "(): Eq[A]", "member" : "algebra.laws.LatticePartialOrderLaws.Equ", "link" : "algebra\/laws\/LatticePartialOrderLaws.html#Equ:algebra.Eq[A]", "kind" : "implicit abstract def"}], "shortDescription" : "", "object" : "algebra\/laws\/LatticePartialOrderLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Eq[A], arg1: Arbitrary[A]): LatticePartialOrderLaws[A]", "member" : "algebra.laws.LatticePartialOrderLaws.apply", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#apply[A](implicitevidence$1:algebra.Eq[A],implicitevidence$2:org.scalacheck.Arbitrary[A]):algebra.laws.LatticePartialOrderLaws[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/LatticePartialOrderLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/laws\/LatticePartialOrderLaws.html", "kind" : "object"}, {"name" : "algebra.laws.LogicLaws", "members_trait" : [{"label" : "LatticeProperties", "tail" : "", "member" : "algebra.laws.LatticeLaws.LatticeProperties", "link" : "algebra\/laws\/LatticeLaws.html#LatticePropertiesextendsLatticeLaws.this.RuleSet", "kind" : "class"}, {"label" : "GroupProperties", "tail" : "", "member" : "cats.kernel.laws.GroupLaws.GroupProperties", "link" : "algebra\/laws\/LogicLaws.html#GroupPropertiesextendsGroupLaws.this.RuleSet", "kind" : "class"}, {"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "algebra\/laws\/LogicLaws.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "algebra\/laws\/LogicLaws.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "algebra\/laws\/LogicLaws.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "algebra\/laws\/LogicLaws.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "LogicProperties", "tail" : "", "member" : "algebra.laws.LogicLaws.LogicProperties", "link" : "algebra\/laws\/LogicLaws.html#LogicPropertiesextendsLogicLaws.this.RuleSet", "kind" : "class"}, {"label" : "bool", "tail" : "(A: Bool[A]): LogicProperties", "member" : "algebra.laws.LogicLaws.bool", "link" : "algebra\/laws\/LogicLaws.html#bool(implicitA:algebra.lattice.Bool[A]):LogicLaws.this.LogicProperties", "kind" : "def"}, {"label" : "generalizedBool", "tail" : "(A: GenBool[A]): LogicProperties", "member" : "algebra.laws.LogicLaws.generalizedBool", "link" : "algebra\/laws\/LogicLaws.html#generalizedBool(implicitA:algebra.lattice.GenBool[A]):LogicLaws.this.LogicProperties", "kind" : "def"}, {"label" : "heyting", "tail" : "(A: Heyting[A]): LogicProperties", "member" : "algebra.laws.LogicLaws.heyting", "link" : "algebra\/laws\/LogicLaws.html#heyting(implicitA:algebra.lattice.Heyting[A]):LogicLaws.this.LogicProperties", "kind" : "def"}, {"label" : "boundedDistributiveLattice", "tail" : "(A: BoundedDistributiveLattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedDistributiveLattice", "link" : "algebra\/laws\/LogicLaws.html#boundedDistributiveLattice(implicitA:algebra.lattice.BoundedDistributiveLattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedLattice", "tail" : "(A: BoundedLattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedLattice", "link" : "algebra\/laws\/LogicLaws.html#boundedLattice(implicitA:algebra.lattice.BoundedLattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedMeetLattice", "tail" : "(A: Lattice[A] with BoundedMeetSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedMeetLattice", "link" : "algebra\/laws\/LogicLaws.html#boundedMeetLattice(implicitA:algebra.lattice.Lattice[A]withalgebra.lattice.BoundedMeetSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedJoinLattice", "tail" : "(A: Lattice[A] with BoundedJoinSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedJoinLattice", "link" : "algebra\/laws\/LogicLaws.html#boundedJoinLattice(implicitA:algebra.lattice.Lattice[A]withalgebra.lattice.BoundedJoinSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedMeetSemilattice", "tail" : "(A: BoundedMeetSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedMeetSemilattice", "link" : "algebra\/laws\/LogicLaws.html#boundedMeetSemilattice(implicitA:algebra.lattice.BoundedMeetSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "boundedJoinSemilattice", "tail" : "(A: BoundedJoinSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.boundedJoinSemilattice", "link" : "algebra\/laws\/LogicLaws.html#boundedJoinSemilattice(implicitA:algebra.lattice.BoundedJoinSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "distributiveLattice", "tail" : "(A: DistributiveLattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.distributiveLattice", "link" : "algebra\/laws\/LogicLaws.html#distributiveLattice(implicitA:algebra.lattice.DistributiveLattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "lattice", "tail" : "(A: Lattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.lattice", "link" : "algebra\/laws\/LogicLaws.html#lattice(implicitA:algebra.lattice.Lattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(A: MeetSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.meetSemilattice", "link" : "algebra\/laws\/LogicLaws.html#meetSemilattice(implicitA:algebra.lattice.MeetSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(A: JoinSemilattice[A]): LatticeProperties", "member" : "algebra.laws.LatticeLaws.joinSemilattice", "link" : "algebra\/laws\/LogicLaws.html#joinSemilattice(implicitA:algebra.lattice.JoinSemilattice[A]):LatticeLaws.this.LatticeProperties", "kind" : "def"}, {"label" : "commutativeGroup", "tail" : "(A: cats.kernel.CommutativeGroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeGroup", "link" : "algebra\/laws\/LogicLaws.html#commutativeGroup(implicitA:cats.kernel.CommutativeGroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "group", "tail" : "(A: cats.kernel.Group[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.group", "link" : "algebra\/laws\/LogicLaws.html#group(implicitA:cats.kernel.Group[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "boundedSemilattice", "tail" : "(A: cats.kernel.BoundedSemilattice[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.boundedSemilattice", "link" : "algebra\/laws\/LogicLaws.html#boundedSemilattice(implicitA:cats.kernel.BoundedSemilattice[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "commutativeMonoid", "tail" : "(A: cats.kernel.CommutativeMonoid[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeMonoid", "link" : "algebra\/laws\/LogicLaws.html#commutativeMonoid(implicitA:cats.kernel.CommutativeMonoid[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "monoid", "tail" : "(A: cats.kernel.Monoid[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.monoid", "link" : "algebra\/laws\/LogicLaws.html#monoid(implicitA:cats.kernel.Monoid[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "semilattice", "tail" : "(A: cats.kernel.Semilattice[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.semilattice", "link" : "algebra\/laws\/LogicLaws.html#semilattice(implicitA:cats.kernel.Semilattice[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "commutativeSemigroup", "tail" : "(A: cats.kernel.CommutativeSemigroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeSemigroup", "link" : "algebra\/laws\/LogicLaws.html#commutativeSemigroup(implicitA:cats.kernel.CommutativeSemigroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "band", "tail" : "(A: cats.kernel.Band[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.band", "link" : "algebra\/laws\/LogicLaws.html#band(implicitA:cats.kernel.Band[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "semigroup", "tail" : "(A: cats.kernel.Semigroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.semigroup", "link" : "algebra\/laws\/LogicLaws.html#semigroup(implicitA:cats.kernel.Semigroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "algebra\/laws\/LogicLaws.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/LogicLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/LogicLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/LogicLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/LogicLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/LogicLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/LogicLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/LogicLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LogicLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LogicLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LogicLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/LogicLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/LogicLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/LogicLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/LogicLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/LogicLaws.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/LogicLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/LogicLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/LogicLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/LogicLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "Arb", "tail" : "(): Arbitrary[A]", "member" : "algebra.laws.LatticeLaws.Arb", "link" : "algebra\/laws\/LogicLaws.html#Arb:org.scalacheck.Arbitrary[A]", "kind" : "implicit abstract def"}, {"label" : "Equ", "tail" : "(): Eq[A]", "member" : "algebra.laws.LatticeLaws.Equ", "link" : "algebra\/laws\/LogicLaws.html#Equ:algebra.Eq[A]", "kind" : "implicit abstract def"}], "shortDescription" : "", "object" : "algebra\/laws\/LogicLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Eq[A], arg1: Arbitrary[A]): LogicLaws[A]", "member" : "algebra.laws.LogicLaws.apply", "link" : "algebra\/laws\/LogicLaws$.html#apply[A](implicitevidence$1:algebra.Eq[A],implicitevidence$2:org.scalacheck.Arbitrary[A]):algebra.laws.LogicLaws[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/LogicLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/LogicLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/LogicLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/LogicLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/LogicLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/LogicLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/LogicLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LogicLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LogicLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/LogicLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/LogicLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/LogicLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/LogicLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/LogicLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/LogicLaws$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/LogicLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/LogicLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/LogicLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/LogicLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/laws\/LogicLaws.html", "kind" : "object"}, {"name" : "algebra.laws.RingLaws", "members_trait" : [{"label" : "GroupProperties", "tail" : "", "member" : "cats.kernel.laws.GroupLaws.GroupProperties", "link" : "algebra\/laws\/RingLaws.html#GroupPropertiesextendsGroupLaws.this.RuleSet", "kind" : "class"}, {"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "algebra\/laws\/RingLaws.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "algebra\/laws\/RingLaws.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "algebra\/laws\/RingLaws.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "algebra\/laws\/RingLaws.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "RingProperties", "tail" : "", "member" : "algebra.laws.RingLaws.RingProperties", "link" : "algebra\/laws\/RingLaws.html#RingPropertiesextendsRingLaws.this.RuleSet", "kind" : "class"}, {"label" : "RingProperties", "tail" : "", "member" : "algebra.laws.RingLaws.RingProperties", "link" : "algebra\/laws\/RingLaws.html#RingProperties", "kind" : "object"}, {"label" : "MultiplicativeProperties", "tail" : "", "member" : "algebra.laws.RingLaws.MultiplicativeProperties", "link" : "algebra\/laws\/RingLaws.html#MultiplicativePropertiesextendsRingLaws.this.RuleSetwithRingLaws.this.HasOneParent", "kind" : "class"}, {"label" : "AdditiveProperties", "tail" : "", "member" : "algebra.laws.RingLaws.AdditiveProperties", "link" : "algebra\/laws\/RingLaws.html#AdditivePropertiesextendsRingLaws.this.RuleSet", "kind" : "class"}, {"label" : "field", "tail" : "(A: Field[A]): RingProperties", "member" : "algebra.laws.RingLaws.field", "link" : "algebra\/laws\/RingLaws.html#field(implicitA:algebra.ring.Field[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "boolRing", "tail" : "(A: BoolRing[A]): RingProperties", "member" : "algebra.laws.RingLaws.boolRing", "link" : "algebra\/laws\/RingLaws.html#boolRing(implicitA:algebra.ring.BoolRing[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "boolRng", "tail" : "(A: BoolRng[A]): RingProperties", "member" : "algebra.laws.RingLaws.boolRng", "link" : "algebra\/laws\/RingLaws.html#boolRng(implicitA:algebra.ring.BoolRng[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "commutativeRing", "tail" : "(A: CommutativeRing[A]): RingProperties", "member" : "algebra.laws.RingLaws.commutativeRing", "link" : "algebra\/laws\/RingLaws.html#commutativeRing(implicitA:algebra.ring.CommutativeRing[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "commutativeRig", "tail" : "(A: CommutativeRig[A]): RingProperties", "member" : "algebra.laws.RingLaws.commutativeRig", "link" : "algebra\/laws\/RingLaws.html#commutativeRig(implicitA:algebra.ring.CommutativeRig[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "commutativeRng", "tail" : "(A: CommutativeRng[A]): RingProperties", "member" : "algebra.laws.RingLaws.commutativeRng", "link" : "algebra\/laws\/RingLaws.html#commutativeRng(implicitA:algebra.ring.CommutativeRng[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "commutativeSemiring", "tail" : "(A: CommutativeSemiring[A]): RingProperties", "member" : "algebra.laws.RingLaws.commutativeSemiring", "link" : "algebra\/laws\/RingLaws.html#commutativeSemiring(implicitA:algebra.ring.CommutativeSemiring[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "ring", "tail" : "(A: Ring[A]): RingProperties", "member" : "algebra.laws.RingLaws.ring", "link" : "algebra\/laws\/RingLaws.html#ring(implicitA:algebra.ring.Ring[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "rig", "tail" : "(A: Rig[A]): RingProperties", "member" : "algebra.laws.RingLaws.rig", "link" : "algebra\/laws\/RingLaws.html#rig(implicitA:algebra.ring.Rig[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "rng", "tail" : "(A: Rng[A]): RingProperties", "member" : "algebra.laws.RingLaws.rng", "link" : "algebra\/laws\/RingLaws.html#rng(implicitA:algebra.ring.Rng[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "semiring", "tail" : "(A: Semiring[A]): RingProperties", "member" : "algebra.laws.RingLaws.semiring", "link" : "algebra\/laws\/RingLaws.html#semiring(implicitA:algebra.ring.Semiring[A]):RingLaws.this.RingProperties", "kind" : "def"}, {"label" : "multiplicativeCommutativeGroup", "tail" : "(A: MultiplicativeCommutativeGroup[A]): MultiplicativeProperties", "member" : "algebra.laws.RingLaws.multiplicativeCommutativeGroup", "link" : "algebra\/laws\/RingLaws.html#multiplicativeCommutativeGroup(implicitA:algebra.ring.MultiplicativeCommutativeGroup[A]):RingLaws.this.MultiplicativeProperties", "kind" : "def"}, {"label" : "multiplicativeGroup", "tail" : "(A: MultiplicativeGroup[A]): MultiplicativeProperties", "member" : "algebra.laws.RingLaws.multiplicativeGroup", "link" : "algebra\/laws\/RingLaws.html#multiplicativeGroup(implicitA:algebra.ring.MultiplicativeGroup[A]):RingLaws.this.MultiplicativeProperties", "kind" : "def"}, {"label" : "multiplicativeCommutativeMonoid", "tail" : "(A: MultiplicativeCommutativeMonoid[A]): MultiplicativeProperties", "member" : "algebra.laws.RingLaws.multiplicativeCommutativeMonoid", "link" : "algebra\/laws\/RingLaws.html#multiplicativeCommutativeMonoid(implicitA:algebra.ring.MultiplicativeCommutativeMonoid[A]):RingLaws.this.MultiplicativeProperties", "kind" : "def"}, {"label" : "multiplicativeMonoid", "tail" : "(A: MultiplicativeMonoid[A]): MultiplicativeProperties", "member" : "algebra.laws.RingLaws.multiplicativeMonoid", "link" : "algebra\/laws\/RingLaws.html#multiplicativeMonoid(implicitA:algebra.ring.MultiplicativeMonoid[A]):RingLaws.this.MultiplicativeProperties", "kind" : "def"}, {"label" : "multiplicativeCommutativeSemigroup", "tail" : "(A: MultiplicativeCommutativeSemigroup[A]): MultiplicativeProperties", "member" : "algebra.laws.RingLaws.multiplicativeCommutativeSemigroup", "link" : "algebra\/laws\/RingLaws.html#multiplicativeCommutativeSemigroup(implicitA:algebra.ring.MultiplicativeCommutativeSemigroup[A]):RingLaws.this.MultiplicativeProperties", "kind" : "def"}, {"label" : "multiplicativeSemigroup", "tail" : "(A: MultiplicativeSemigroup[A]): MultiplicativeProperties", "member" : "algebra.laws.RingLaws.multiplicativeSemigroup", "link" : "algebra\/laws\/RingLaws.html#multiplicativeSemigroup(implicitA:algebra.ring.MultiplicativeSemigroup[A]):RingLaws.this.MultiplicativeProperties", "kind" : "def"}, {"label" : "additiveCommutativeGroup", "tail" : "(A: AdditiveCommutativeGroup[A]): AdditiveProperties", "member" : "algebra.laws.RingLaws.additiveCommutativeGroup", "link" : "algebra\/laws\/RingLaws.html#additiveCommutativeGroup(implicitA:algebra.ring.AdditiveCommutativeGroup[A]):RingLaws.this.AdditiveProperties", "kind" : "def"}, {"label" : "additiveGroup", "tail" : "(A: AdditiveGroup[A]): AdditiveProperties", "member" : "algebra.laws.RingLaws.additiveGroup", "link" : "algebra\/laws\/RingLaws.html#additiveGroup(implicitA:algebra.ring.AdditiveGroup[A]):RingLaws.this.AdditiveProperties", "kind" : "def"}, {"label" : "additiveCommutativeMonoid", "tail" : "(A: AdditiveCommutativeMonoid[A]): AdditiveProperties", "member" : "algebra.laws.RingLaws.additiveCommutativeMonoid", "link" : "algebra\/laws\/RingLaws.html#additiveCommutativeMonoid(implicitA:algebra.ring.AdditiveCommutativeMonoid[A]):RingLaws.this.AdditiveProperties", "kind" : "def"}, {"label" : "additiveMonoid", "tail" : "(A: AdditiveMonoid[A]): AdditiveProperties", "member" : "algebra.laws.RingLaws.additiveMonoid", "link" : "algebra\/laws\/RingLaws.html#additiveMonoid(implicitA:algebra.ring.AdditiveMonoid[A]):RingLaws.this.AdditiveProperties", "kind" : "def"}, {"label" : "additiveCommutativeSemigroup", "tail" : "(A: AdditiveCommutativeSemigroup[A]): AdditiveProperties", "member" : "algebra.laws.RingLaws.additiveCommutativeSemigroup", "link" : "algebra\/laws\/RingLaws.html#additiveCommutativeSemigroup(implicitA:algebra.ring.AdditiveCommutativeSemigroup[A]):RingLaws.this.AdditiveProperties", "kind" : "def"}, {"label" : "additiveSemigroup", "tail" : "(A: AdditiveSemigroup[A]): AdditiveProperties", "member" : "algebra.laws.RingLaws.additiveSemigroup", "link" : "algebra\/laws\/RingLaws.html#additiveSemigroup(implicitA:algebra.ring.AdditiveSemigroup[A]):RingLaws.this.AdditiveProperties", "kind" : "def"}, {"label" : "Equ", "tail" : "(): Eq[A]", "member" : "algebra.laws.RingLaws.Equ", "link" : "algebra\/laws\/RingLaws.html#Equ:algebra.Eq[A]", "kind" : "implicit def"}, {"label" : "setNonZeroParents", "tail" : "(props: GroupProperties, parents: Seq[GroupProperties]): GroupProperties", "member" : "algebra.laws.RingLaws.setNonZeroParents", "link" : "algebra\/laws\/RingLaws.html#setNonZeroParents(props:RingLaws.this.nonZeroLaws.GroupProperties,parents:Seq[RingLaws.this.nonZeroLaws.GroupProperties]):RingLaws.this.nonZeroLaws.GroupProperties", "kind" : "def"}, {"label" : "withPred", "tail" : "(pred0: Predicate[A], replace: Boolean): RingLaws[A]", "member" : "algebra.laws.RingLaws.withPred", "link" : "algebra\/laws\/RingLaws.html#withPred(pred0:org.typelevel.discipline.Predicate[A],replace:Boolean):algebra.laws.RingLaws[A]", "kind" : "def"}, {"label" : "commutativeGroup", "tail" : "(A: cats.kernel.CommutativeGroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeGroup", "link" : "algebra\/laws\/RingLaws.html#commutativeGroup(implicitA:cats.kernel.CommutativeGroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "group", "tail" : "(A: cats.kernel.Group[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.group", "link" : "algebra\/laws\/RingLaws.html#group(implicitA:cats.kernel.Group[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "boundedSemilattice", "tail" : "(A: cats.kernel.BoundedSemilattice[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.boundedSemilattice", "link" : "algebra\/laws\/RingLaws.html#boundedSemilattice(implicitA:cats.kernel.BoundedSemilattice[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "commutativeMonoid", "tail" : "(A: cats.kernel.CommutativeMonoid[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeMonoid", "link" : "algebra\/laws\/RingLaws.html#commutativeMonoid(implicitA:cats.kernel.CommutativeMonoid[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "monoid", "tail" : "(A: cats.kernel.Monoid[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.monoid", "link" : "algebra\/laws\/RingLaws.html#monoid(implicitA:cats.kernel.Monoid[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "semilattice", "tail" : "(A: cats.kernel.Semilattice[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.semilattice", "link" : "algebra\/laws\/RingLaws.html#semilattice(implicitA:cats.kernel.Semilattice[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "commutativeSemigroup", "tail" : "(A: cats.kernel.CommutativeSemigroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.commutativeSemigroup", "link" : "algebra\/laws\/RingLaws.html#commutativeSemigroup(implicitA:cats.kernel.CommutativeSemigroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "band", "tail" : "(A: cats.kernel.Band[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.band", "link" : "algebra\/laws\/RingLaws.html#band(implicitA:cats.kernel.Band[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "semigroup", "tail" : "(A: cats.kernel.Semigroup[A]): GroupProperties", "member" : "cats.kernel.laws.GroupLaws.semigroup", "link" : "algebra\/laws\/RingLaws.html#semigroup(implicitA:cats.kernel.Semigroup[A]):GroupLaws.this.GroupProperties", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "algebra\/laws\/RingLaws.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/RingLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/RingLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/RingLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/RingLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/RingLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/RingLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/RingLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/RingLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/RingLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/RingLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/RingLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/RingLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/RingLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/RingLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/RingLaws.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/RingLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/RingLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/RingLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/RingLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "Arb", "tail" : "(): Arbitrary[A]", "member" : "algebra.laws.RingLaws.Arb", "link" : "algebra\/laws\/RingLaws.html#Arb:org.scalacheck.Arbitrary[A]", "kind" : "implicit abstract def"}, {"label" : "pred", "tail" : "(): Predicate[A]", "member" : "algebra.laws.RingLaws.pred", "link" : "algebra\/laws\/RingLaws.html#pred:org.typelevel.discipline.Predicate[A]", "kind" : "abstract def"}, {"label" : "nonZeroLaws", "tail" : ": GroupLaws[A]", "member" : "algebra.laws.RingLaws.nonZeroLaws", "link" : "algebra\/laws\/RingLaws.html#nonZeroLaws:cats.kernel.laws.GroupLaws[A]", "kind" : "abstract val"}], "shortDescription" : "", "object" : "algebra\/laws\/RingLaws$.html", "members_object" : [{"label" : "withPred", "tail" : "(pred0: Predicate[A])(arg0: Eq[A], arg1: Arbitrary[A]): RingLaws[A]", "member" : "algebra.laws.RingLaws.withPred", "link" : "algebra\/laws\/RingLaws$.html#withPred[A](pred0:org.typelevel.discipline.Predicate[A])(implicitevidence$4:algebra.Eq[A],implicitevidence$5:org.scalacheck.Arbitrary[A]):algebra.laws.RingLaws[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Eq[A], arg1: Arbitrary[A], arg2: AdditiveMonoid[A]): RingLaws[A]", "member" : "algebra.laws.RingLaws.apply", "link" : "algebra\/laws\/RingLaws$.html#apply[A](implicitevidence$1:algebra.Eq[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:algebra.ring.AdditiveMonoid[A]):algebra.laws.RingLaws[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/laws\/RingLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/laws\/RingLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/laws\/RingLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/laws\/RingLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/laws\/RingLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/laws\/RingLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/laws\/RingLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/RingLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/RingLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/laws\/RingLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/laws\/RingLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/laws\/RingLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/laws\/RingLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/laws\/RingLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/laws\/RingLaws$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/laws\/RingLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/laws\/RingLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/laws\/RingLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/laws\/RingLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/laws\/RingLaws.html", "kind" : "object"}], "algebra.ring" : [{"name" : "algebra.ring.AdditiveCommutativeGroup", "members_trait" : [{"label" : "additive", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.AdditiveGroup.negate", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#negate(x:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/AdditiveCommutativeGroup.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/AdditiveCommutativeGroup$.html", "members_object" : [{"label" : "additive", "tail" : "(ev: AdditiveCommutativeGroup[A]): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#additive[A](implicitev:algebra.ring.AdditiveCommutativeGroup[A]):algebra.CommutativeGroup[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: AdditiveCommutativeGroup[A]): AdditiveCommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.apply", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#apply[A](implicitev:algebra.ring.AdditiveCommutativeGroup[A]):algebra.ring.AdditiveCommutativeGroup[A]", "kind" : "final def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: AdditiveCommutativeGroup[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: AdditiveCommutativeGroup[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveCommutativeGroup[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: AdditiveCommutativeGroup[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: AdditiveCommutativeGroup[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveCommutativeGroup[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: AdditiveCommutativeGroup[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: AdditiveCommutativeGroup[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: AdditiveCommutativeGroup[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/AdditiveCommutativeGroup.html", "kind" : "trait"}, {"name" : "algebra.ring.AdditiveCommutativeMonoid", "members_trait" : [{"label" : "additive", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#additive:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveMonoid.sumN", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/AdditiveCommutativeMonoid.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/AdditiveCommutativeMonoid$.html", "members_object" : [{"label" : "additive", "tail" : "(ev: AdditiveCommutativeMonoid[A]): CommutativeMonoid[A]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#additive[A](implicitev:algebra.ring.AdditiveCommutativeMonoid[A]):algebra.CommutativeMonoid[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: AdditiveCommutativeMonoid[A]): AdditiveCommutativeMonoid[A]", "member" : "algebra.ring.AdditiveCommutativeMonoid.apply", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#apply[A](implicitev:algebra.ring.AdditiveCommutativeMonoid[A]):algebra.ring.AdditiveCommutativeMonoid[A]", "kind" : "final def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveCommutativeMonoid[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: AdditiveCommutativeMonoid[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: AdditiveCommutativeMonoid[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveCommutativeMonoid[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: AdditiveCommutativeMonoid[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: AdditiveCommutativeMonoid[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: AdditiveCommutativeMonoid[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeMonoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/AdditiveCommutativeMonoid.html", "kind" : "trait"}, {"name" : "algebra.ring.AdditiveCommutativeSemigroup", "members_trait" : [{"label" : "additive", "tail" : "(): CommutativeSemigroup[A]", "member" : "algebra.ring.AdditiveCommutativeSemigroup.additive", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#additive:algebra.CommutativeSemigroup[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroup.trySum", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.sumN", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html", "members_object" : [{"label" : "additive", "tail" : "(ev: AdditiveCommutativeSemigroup[A]): CommutativeSemigroup[A]", "member" : "algebra.ring.AdditiveCommutativeSemigroup.additive", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#additive[A](implicitev:algebra.ring.AdditiveCommutativeSemigroup[A]):algebra.CommutativeSemigroup[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: AdditiveCommutativeSemigroup[A]): AdditiveCommutativeSemigroup[A]", "member" : "algebra.ring.AdditiveCommutativeSemigroup.apply", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#apply[A](implicitev:algebra.ring.AdditiveCommutativeSemigroup[A]):algebra.ring.AdditiveCommutativeSemigroup[A]", "kind" : "final def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveCommutativeSemigroup[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: AdditiveCommutativeSemigroup[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: AdditiveCommutativeSemigroup[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: AdditiveCommutativeSemigroup[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveCommutativeSemigroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/AdditiveCommutativeSemigroup.html", "kind" : "trait"}, {"name" : "algebra.ring.AdditiveGroup", "members_trait" : [{"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/AdditiveGroup.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/AdditiveGroup.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): Group[A]", "member" : "algebra.ring.AdditiveGroup.additive", "link" : "algebra\/ring\/AdditiveGroup.html#additive:algebra.Group[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/AdditiveGroup.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/AdditiveGroup.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/AdditiveGroup.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/AdditiveGroup.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/AdditiveGroup.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/AdditiveGroup.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/AdditiveGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/AdditiveGroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/AdditiveGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/AdditiveGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.AdditiveGroup.negate", "link" : "algebra\/ring\/AdditiveGroup.html#negate(x:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/AdditiveGroup.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/AdditiveGroup.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/AdditiveGroup.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/AdditiveGroup$.html", "members_object" : [{"label" : "additive", "tail" : "(ev: AdditiveGroup[A]): Group[A]", "member" : "algebra.ring.AdditiveGroup.additive", "link" : "algebra\/ring\/AdditiveGroup$.html#additive[A](implicitev:algebra.ring.AdditiveGroup[A]):algebra.Group[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: AdditiveGroup[A]): AdditiveGroup[A]", "member" : "algebra.ring.AdditiveGroup.apply", "link" : "algebra\/ring\/AdditiveGroup$.html#apply[A](implicitev:algebra.ring.AdditiveGroup[A]):algebra.ring.AdditiveGroup[A]", "kind" : "final def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: AdditiveGroup[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/AdditiveGroup$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: AdditiveGroup[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/AdditiveGroup$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveGroup[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/AdditiveGroup$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: AdditiveGroup[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/AdditiveGroup$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: AdditiveGroup[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/AdditiveGroup$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveGroup[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveGroup$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: AdditiveGroup[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveGroup$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: AdditiveGroup[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveGroup$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: AdditiveGroup[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveGroup$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveGroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveGroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveGroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/AdditiveGroup.html", "kind" : "trait"}, {"name" : "algebra.ring.AdditiveGroupFunctions", "members_trait" : [{"label" : "minus", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: G[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: G[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: G[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: G[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: G[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: G[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: G[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveGroupFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveGroupFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/ring\/AdditiveGroupFunctions.html", "kind" : "trait"}, {"name" : "algebra.ring.AdditiveMonoid", "members_trait" : [{"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/AdditiveMonoid.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/AdditiveMonoid.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveMonoid.sumN", "link" : "algebra\/ring\/AdditiveMonoid.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/AdditiveMonoid.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "additive", "tail" : "(): Monoid[A]", "member" : "algebra.ring.AdditiveMonoid.additive", "link" : "algebra\/ring\/AdditiveMonoid.html#additive:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/AdditiveMonoid.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/AdditiveMonoid.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/AdditiveMonoid.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/AdditiveMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/AdditiveMonoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/AdditiveMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/AdditiveMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/AdditiveMonoid.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/AdditiveMonoid.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/AdditiveMonoid.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/AdditiveMonoid$.html", "members_object" : [{"label" : "additive", "tail" : "(ev: AdditiveMonoid[A]): Monoid[A]", "member" : "algebra.ring.AdditiveMonoid.additive", "link" : "algebra\/ring\/AdditiveMonoid$.html#additive[A](implicitev:algebra.ring.AdditiveMonoid[A]):algebra.Monoid[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: AdditiveMonoid[A]): AdditiveMonoid[A]", "member" : "algebra.ring.AdditiveMonoid.apply", "link" : "algebra\/ring\/AdditiveMonoid$.html#apply[A](implicitev:algebra.ring.AdditiveMonoid[A]):algebra.ring.AdditiveMonoid[A]", "kind" : "final def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveMonoid[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/AdditiveMonoid$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: AdditiveMonoid[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/AdditiveMonoid$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: AdditiveMonoid[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/AdditiveMonoid$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveMonoid[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveMonoid$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: AdditiveMonoid[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveMonoid$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: AdditiveMonoid[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveMonoid$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: AdditiveMonoid[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveMonoid$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveMonoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveMonoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveMonoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveMonoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveMonoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveMonoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveMonoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveMonoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveMonoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveMonoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveMonoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveMonoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveMonoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveMonoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveMonoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveMonoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveMonoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveMonoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveMonoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/AdditiveMonoid.html", "kind" : "trait"}, {"name" : "algebra.ring.AdditiveMonoidFunctions", "members_trait" : [{"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: M[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: M[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: M[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: M[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: M[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: M[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: M[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveMonoidFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/ring\/AdditiveMonoidFunctions.html", "kind" : "trait"}, {"name" : "algebra.ring.AdditiveSemigroup", "members_trait" : [{"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroup.trySum", "link" : "algebra\/ring\/AdditiveSemigroup.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/AdditiveSemigroup.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.sumN", "link" : "algebra\/ring\/AdditiveSemigroup.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): Semigroup[A]", "member" : "algebra.ring.AdditiveSemigroup.additive", "link" : "algebra\/ring\/AdditiveSemigroup.html#additive:algebra.Semigroup[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/AdditiveSemigroup.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveSemigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveSemigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/AdditiveSemigroup.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/AdditiveSemigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/AdditiveSemigroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/AdditiveSemigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/AdditiveSemigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/AdditiveSemigroup.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/AdditiveSemigroup.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/AdditiveSemigroup$.html", "members_object" : [{"label" : "additive", "tail" : "(ev: AdditiveSemigroup[A]): Semigroup[A]", "member" : "algebra.ring.AdditiveSemigroup.additive", "link" : "algebra\/ring\/AdditiveSemigroup$.html#additive[A](implicitev:algebra.ring.AdditiveSemigroup[A]):algebra.Semigroup[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: AdditiveSemigroup[A]): AdditiveSemigroup[A]", "member" : "algebra.ring.AdditiveSemigroup.apply", "link" : "algebra\/ring\/AdditiveSemigroup$.html#apply[A](implicitev:algebra.ring.AdditiveSemigroup[A]):algebra.ring.AdditiveSemigroup[A]", "kind" : "final def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: AdditiveSemigroup[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveSemigroup$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: AdditiveSemigroup[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveSemigroup$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: AdditiveSemigroup[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveSemigroup$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: AdditiveSemigroup[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveSemigroup$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveSemigroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveSemigroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveSemigroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveSemigroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveSemigroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveSemigroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveSemigroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveSemigroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveSemigroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveSemigroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveSemigroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveSemigroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveSemigroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveSemigroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveSemigroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveSemigroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveSemigroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveSemigroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveSemigroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/AdditiveSemigroup.html", "kind" : "trait"}, {"name" : "algebra.ring.AdditiveSemigroupFunctions", "members_trait" : [{"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: S[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: S[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: S[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: S[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/AdditiveSemigroupFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/ring\/AdditiveSemigroupFunctions.html", "kind" : "trait"}, {"name" : "algebra.ring.BoolRing", "members_trait" : [{"label" : "multiplicative", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/ring\/BoolRing.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt): A", "member" : "algebra.ring.Ring.fromBigInt", "link" : "algebra\/ring\/BoolRing.html#fromBigInt(n:BigInt):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): A", "member" : "algebra.ring.Ring.fromInt", "link" : "algebra\/ring\/BoolRing.html#fromInt(n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/BoolRing.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/BoolRing.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "algebra\/ring\/BoolRing.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/BoolRing.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.BoolRng.negate", "link" : "algebra\/ring\/BoolRing.html#negate(x:A):A", "kind" : "final def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/BoolRing.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/BoolRing.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/BoolRing.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/BoolRing.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/BoolRing.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/BoolRing.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/BoolRing.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/BoolRing.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/BoolRing.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/BoolRing.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/BoolRing.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/BoolRing.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/BoolRing.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/BoolRing.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/BoolRing.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/BoolRing.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/BoolRing.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/BoolRing.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/BoolRing.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/BoolRing.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/BoolRing.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A Boolean ring is a ring whose multiplication is idempotent, that isa⋅a = a for all elements a.", "object" : "algebra\/ring\/BoolRing$.html", "members_object" : [{"label" : "apply", "tail" : "(r: BoolRing[A]): BoolRing[A]", "member" : "algebra.ring.BoolRing.apply", "link" : "algebra\/ring\/BoolRing$.html#apply[A](implicitr:algebra.ring.BoolRing[A]):algebra.ring.BoolRing[A]", "kind" : "final def"}, {"label" : "defaultFromDouble", "tail" : "(a: Double)(ringA: Ring[A], mgA: MultiplicativeGroup[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromDouble", "link" : "algebra\/ring\/BoolRing$.html#defaultFromDouble[A](a:Double)(implicitringA:algebra.ring.Ring[A],implicitmgA:algebra.ring.MultiplicativeGroup[A]):A", "kind" : "final def"}, {"label" : "defaultFromBigInt", "tail" : "(n: BigInt)(ev: BoolRing[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromBigInt", "link" : "algebra\/ring\/BoolRing$.html#defaultFromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "final def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt)(ev: BoolRing[A]): A", "member" : "algebra.ring.RingFunctions.fromBigInt", "link" : "algebra\/ring\/BoolRing$.html#fromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int)(ev: BoolRing[A]): A", "member" : "algebra.ring.RingFunctions.fromInt", "link" : "algebra\/ring\/BoolRing$.html#fromInt[A](n:Int)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: BoolRing[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/BoolRing$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: BoolRing[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/BoolRing$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: BoolRing[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/BoolRing$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: BoolRing[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/BoolRing$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: BoolRing[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/BoolRing$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: BoolRing[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/BoolRing$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: BoolRing[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/BoolRing$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: BoolRing[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/BoolRing$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: BoolRing[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/BoolRing$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: BoolRing[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/BoolRing$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: BoolRing[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/BoolRing$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: BoolRing[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/BoolRing$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: BoolRing[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/BoolRing$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: BoolRing[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/BoolRing$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: BoolRing[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/BoolRing$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: BoolRing[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/BoolRing$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/BoolRing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/BoolRing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/BoolRing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/BoolRing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/BoolRing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/BoolRing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/BoolRing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/BoolRing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/BoolRing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/BoolRing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/BoolRing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/BoolRing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/BoolRing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/BoolRing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/BoolRing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/BoolRing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/BoolRing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/BoolRing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/BoolRing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/BoolRing.html", "kind" : "trait"}, {"name" : "algebra.ring.BoolRng", "members_trait" : [{"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.BoolRng.negate", "link" : "algebra\/ring\/BoolRng.html#negate(x:A):A", "kind" : "final def"}, {"label" : "multiplicative", "tail" : "(): CommutativeSemigroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeSemigroup.multiplicative", "link" : "algebra\/ring\/BoolRng.html#multiplicative:algebra.CommutativeSemigroup[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/BoolRng.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/BoolRng.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/BoolRng.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/ring\/BoolRng.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/BoolRng.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/ring\/BoolRng.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/BoolRng.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/BoolRng.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/BoolRng.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/BoolRng.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/BoolRng.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/BoolRng.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/BoolRng.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/BoolRng.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/BoolRng.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/BoolRng.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/BoolRng.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/BoolRng.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/BoolRng.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/BoolRng.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/BoolRng.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/BoolRng.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A Boolean rng is a rng whose multiplication is idempotent, that isa⋅a = a for all elements a.", "object" : "algebra\/ring\/BoolRng$.html", "members_object" : [{"label" : "apply", "tail" : "(r: BoolRng[A]): BoolRng[A]", "member" : "algebra.ring.BoolRng.apply", "link" : "algebra\/ring\/BoolRng$.html#apply[A](implicitr:algebra.ring.BoolRng[A]):algebra.ring.BoolRng[A]", "kind" : "final def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: BoolRng[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/BoolRng$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: BoolRng[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/BoolRng$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: BoolRng[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/BoolRng$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: BoolRng[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/BoolRng$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: BoolRng[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/BoolRng$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: BoolRng[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/BoolRng$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: BoolRng[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/BoolRng$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: BoolRng[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/BoolRng$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: BoolRng[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/BoolRng$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: BoolRng[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/BoolRng$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: BoolRng[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/BoolRng$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: BoolRng[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/BoolRng$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: BoolRng[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/BoolRng$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/BoolRng$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/BoolRng$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/BoolRng$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/BoolRng$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/BoolRng$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/BoolRng$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/BoolRng$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/BoolRng$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/BoolRng$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/BoolRng$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/BoolRng$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/BoolRng$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/BoolRng$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/BoolRng$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/BoolRng$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/BoolRng$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/BoolRng$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/BoolRng$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/BoolRng$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/BoolRng.html", "kind" : "trait"}, {"name" : "algebra.ring.CommutativeRig", "members_trait" : [{"label" : "multiplicative", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/ring\/CommutativeRig.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/CommutativeRig.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/CommutativeRig.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "algebra\/ring\/CommutativeRig.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/CommutativeRig.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/CommutativeRig.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/ring\/CommutativeRig.html#additive:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/CommutativeRig.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/CommutativeRig.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveMonoid.sumN", "link" : "algebra\/ring\/CommutativeRig.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/CommutativeRig.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/CommutativeRig.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/CommutativeRig.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/CommutativeRig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/CommutativeRig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/CommutativeRig.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/CommutativeRig.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/CommutativeRig.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/CommutativeRig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/CommutativeRig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/CommutativeRig.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/CommutativeRig.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/CommutativeRig.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/CommutativeRig.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/CommutativeRig.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "CommutativeRig is a Rig that is commutative under multiplication.", "object" : "algebra\/ring\/CommutativeRig$.html", "members_object" : [{"label" : "apply", "tail" : "(r: CommutativeRig[A]): CommutativeRig[A]", "member" : "algebra.ring.CommutativeRig.apply", "link" : "algebra\/ring\/CommutativeRig$.html#apply[A](implicitr:algebra.ring.CommutativeRig[A]):algebra.ring.CommutativeRig[A]", "kind" : "final def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRig[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/CommutativeRig$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: CommutativeRig[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/CommutativeRig$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: CommutativeRig[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/CommutativeRig$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRig[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/CommutativeRig$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: CommutativeRig[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/CommutativeRig$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: CommutativeRig[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/CommutativeRig$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: CommutativeRig[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/CommutativeRig$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRig[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/CommutativeRig$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: CommutativeRig[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/CommutativeRig$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: CommutativeRig[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/CommutativeRig$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRig[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/CommutativeRig$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: CommutativeRig[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/CommutativeRig$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: CommutativeRig[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/CommutativeRig$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: CommutativeRig[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/CommutativeRig$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/CommutativeRig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/CommutativeRig$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/CommutativeRig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/CommutativeRig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/CommutativeRig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/CommutativeRig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/CommutativeRig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/CommutativeRig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/CommutativeRig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/CommutativeRig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/CommutativeRig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/CommutativeRig$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/CommutativeRig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/CommutativeRig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/CommutativeRig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/CommutativeRig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/CommutativeRig.html", "kind" : "trait"}, {"name" : "algebra.ring.CommutativeRing", "members_trait" : [{"label" : "multiplicative", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/ring\/CommutativeRing.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt): A", "member" : "algebra.ring.Ring.fromBigInt", "link" : "algebra\/ring\/CommutativeRing.html#fromBigInt(n:BigInt):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): A", "member" : "algebra.ring.Ring.fromInt", "link" : "algebra\/ring\/CommutativeRing.html#fromInt(n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/CommutativeRing.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/CommutativeRing.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/CommutativeRing.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/CommutativeRing.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/CommutativeRing.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "algebra\/ring\/CommutativeRing.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/CommutativeRing.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/CommutativeRing.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/CommutativeRing.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/CommutativeRing.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/CommutativeRing.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/CommutativeRing.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/CommutativeRing.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/CommutativeRing.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/CommutativeRing.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/CommutativeRing.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/CommutativeRing.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/CommutativeRing.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/CommutativeRing.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/CommutativeRing.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.AdditiveGroup.negate", "link" : "algebra\/ring\/CommutativeRing.html#negate(x:A):A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/CommutativeRing.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/CommutativeRing.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/CommutativeRing.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/CommutativeRing.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/CommutativeRing.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "CommutativeRing is a Ring that is commutative under multiplication.", "object" : "algebra\/ring\/CommutativeRing$.html", "members_object" : [{"label" : "apply", "tail" : "(r: CommutativeRing[A]): CommutativeRing[A]", "member" : "algebra.ring.CommutativeRing.apply", "link" : "algebra\/ring\/CommutativeRing$.html#apply[A](implicitr:algebra.ring.CommutativeRing[A]):algebra.ring.CommutativeRing[A]", "kind" : "final def"}, {"label" : "defaultFromDouble", "tail" : "(a: Double)(ringA: Ring[A], mgA: MultiplicativeGroup[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromDouble", "link" : "algebra\/ring\/CommutativeRing$.html#defaultFromDouble[A](a:Double)(implicitringA:algebra.ring.Ring[A],implicitmgA:algebra.ring.MultiplicativeGroup[A]):A", "kind" : "final def"}, {"label" : "defaultFromBigInt", "tail" : "(n: BigInt)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromBigInt", "link" : "algebra\/ring\/CommutativeRing$.html#defaultFromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "final def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.RingFunctions.fromBigInt", "link" : "algebra\/ring\/CommutativeRing$.html#fromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.RingFunctions.fromInt", "link" : "algebra\/ring\/CommutativeRing$.html#fromInt[A](n:Int)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRing[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/CommutativeRing$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: CommutativeRing[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/CommutativeRing$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: CommutativeRing[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/CommutativeRing$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRing[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/CommutativeRing$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/CommutativeRing$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/CommutativeRing$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: CommutativeRing[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/CommutativeRing$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/CommutativeRing$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/CommutativeRing$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRing[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/CommutativeRing$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: CommutativeRing[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/CommutativeRing$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: CommutativeRing[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/CommutativeRing$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRing[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/CommutativeRing$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/CommutativeRing$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: CommutativeRing[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/CommutativeRing$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: CommutativeRing[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/CommutativeRing$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/CommutativeRing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/CommutativeRing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/CommutativeRing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/CommutativeRing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/CommutativeRing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/CommutativeRing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/CommutativeRing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/CommutativeRing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/CommutativeRing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/CommutativeRing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/CommutativeRing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/CommutativeRing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/CommutativeRing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/CommutativeRing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/CommutativeRing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/CommutativeRing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/CommutativeRing.html", "kind" : "trait"}, {"name" : "algebra.ring.CommutativeRng", "members_trait" : [{"label" : "multiplicative", "tail" : "(): CommutativeSemigroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeSemigroup.multiplicative", "link" : "algebra\/ring\/CommutativeRng.html#multiplicative:algebra.CommutativeSemigroup[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/CommutativeRng.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/CommutativeRng.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/CommutativeRng.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/ring\/CommutativeRng.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/CommutativeRng.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/ring\/CommutativeRng.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/CommutativeRng.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/CommutativeRng.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/CommutativeRng.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/CommutativeRng.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/CommutativeRng.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/CommutativeRng.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/CommutativeRng.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/CommutativeRng.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/CommutativeRng.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/CommutativeRng.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/CommutativeRng.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/CommutativeRng.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.AdditiveGroup.negate", "link" : "algebra\/ring\/CommutativeRng.html#negate(x:A):A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/CommutativeRng.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/CommutativeRng.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/CommutativeRng.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/CommutativeRng.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "CommutativeRng is a Rng that is commutative under multiplication.", "object" : "algebra\/ring\/CommutativeRng$.html", "members_object" : [{"label" : "apply", "tail" : "(r: CommutativeRng[A]): CommutativeRng[A]", "member" : "algebra.ring.CommutativeRng.apply", "link" : "algebra\/ring\/CommutativeRng$.html#apply[A](implicitr:algebra.ring.CommutativeRng[A]):algebra.ring.CommutativeRng[A]", "kind" : "final def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRng[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/CommutativeRng$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: CommutativeRng[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/CommutativeRng$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: CommutativeRng[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/CommutativeRng$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: CommutativeRng[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/CommutativeRng$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: CommutativeRng[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/CommutativeRng$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: CommutativeRng[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/CommutativeRng$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRng[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/CommutativeRng$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: CommutativeRng[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/CommutativeRng$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: CommutativeRng[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/CommutativeRng$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: CommutativeRng[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/CommutativeRng$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: CommutativeRng[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/CommutativeRng$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: CommutativeRng[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/CommutativeRng$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: CommutativeRng[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/CommutativeRng$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/CommutativeRng$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/CommutativeRng$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/CommutativeRng$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/CommutativeRng$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/CommutativeRng$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/CommutativeRng$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/CommutativeRng$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRng$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRng$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeRng$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/CommutativeRng$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/CommutativeRng$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/CommutativeRng$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/CommutativeRng$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/CommutativeRng$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/CommutativeRng$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/CommutativeRng$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/CommutativeRng$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/CommutativeRng$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/CommutativeRng.html", "kind" : "trait"}, {"name" : "algebra.ring.CommutativeSemiring", "members_trait" : [{"label" : "multiplicative", "tail" : "(): CommutativeSemigroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeSemigroup.multiplicative", "link" : "algebra\/ring\/CommutativeSemiring.html#multiplicative:algebra.CommutativeSemigroup[A]", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/ring\/CommutativeSemiring.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/CommutativeSemiring.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/ring\/CommutativeSemiring.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/ring\/CommutativeSemiring.html#additive:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/CommutativeSemiring.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/CommutativeSemiring.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveMonoid.sumN", "link" : "algebra\/ring\/CommutativeSemiring.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/CommutativeSemiring.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/CommutativeSemiring.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/CommutativeSemiring.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/CommutativeSemiring.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/CommutativeSemiring.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/CommutativeSemiring.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/CommutativeSemiring.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/CommutativeSemiring.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/CommutativeSemiring.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/CommutativeSemiring.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/CommutativeSemiring.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/CommutativeSemiring.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/CommutativeSemiring.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/CommutativeSemiring.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "CommutativeSemiring is a Semiring that is commutative under multiplication.", "object" : "algebra\/ring\/CommutativeSemiring$.html", "members_object" : [{"label" : "apply", "tail" : "(r: CommutativeSemiring[A]): CommutativeSemiring[A]", "member" : "algebra.ring.CommutativeSemiring.apply", "link" : "algebra\/ring\/CommutativeSemiring$.html#apply[A](implicitr:algebra.ring.CommutativeSemiring[A]):algebra.ring.CommutativeSemiring[A]", "kind" : "final def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: CommutativeSemiring[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/CommutativeSemiring$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: CommutativeSemiring[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/CommutativeSemiring$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: CommutativeSemiring[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/CommutativeSemiring$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: CommutativeSemiring[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/CommutativeSemiring$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: CommutativeSemiring[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/CommutativeSemiring$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: CommutativeSemiring[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/CommutativeSemiring$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: CommutativeSemiring[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/CommutativeSemiring$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: CommutativeSemiring[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/CommutativeSemiring$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: CommutativeSemiring[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/CommutativeSemiring$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: CommutativeSemiring[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/CommutativeSemiring$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: CommutativeSemiring[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/CommutativeSemiring$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/CommutativeSemiring$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/CommutativeSemiring$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/CommutativeSemiring$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/CommutativeSemiring$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/CommutativeSemiring$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/CommutativeSemiring$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/CommutativeSemiring$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeSemiring$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeSemiring$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/CommutativeSemiring$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/CommutativeSemiring$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/CommutativeSemiring$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/CommutativeSemiring$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/CommutativeSemiring$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/CommutativeSemiring$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/CommutativeSemiring$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/CommutativeSemiring$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/CommutativeSemiring$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/CommutativeSemiring$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/CommutativeSemiring.html", "kind" : "trait"}, {"name" : "algebra.ring.Field", "members_trait" : [{"label" : "fromDouble", "tail" : "(a: Double): A", "member" : "algebra.ring.Field.fromDouble", "link" : "algebra\/ring\/Field.html#fromDouble(a:Double):A", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeGroup.multiplicative", "link" : "algebra\/ring\/Field.html#multiplicative:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeGroup.pow", "link" : "algebra\/ring\/Field.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: A): A", "member" : "algebra.ring.MultiplicativeGroup.reciprocal", "link" : "algebra\/ring\/Field.html#reciprocal(x:A):A", "kind" : "def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt): A", "member" : "algebra.ring.Ring.fromBigInt", "link" : "algebra\/ring\/Field.html#fromBigInt(n:BigInt):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): A", "member" : "algebra.ring.Ring.fromInt", "link" : "algebra\/ring\/Field.html#fromInt(n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/Field.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/Field.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/Field.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/Field.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/Field.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/Field.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/Field.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/Field.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/Field.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/Field.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/Field.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/Field.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Field.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Field.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/Field.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/Field.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/Field.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/Field.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/Field.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "div", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeGroup.div", "link" : "algebra\/ring\/Field.html#div(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.AdditiveGroup.negate", "link" : "algebra\/ring\/Field.html#negate(x:A):A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/Field.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/Field.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/Field.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/Field.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/Field.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/Field$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Field[A]): Field[A]", "member" : "algebra.ring.Field.apply", "link" : "algebra\/ring\/Field$.html#apply[A](implicitev:algebra.ring.Field[A]):algebra.ring.Field[A]", "kind" : "final def"}, {"label" : "fromDouble", "tail" : "(n: Double)(ev: Field[A]): A", "member" : "algebra.ring.FieldFunctions.fromDouble", "link" : "algebra\/ring\/Field$.html#fromDouble[A](n:Double)(implicitev:F[A]):A", "kind" : "def"}, {"label" : "div", "tail" : "(x: A, y: A)(ev: Field[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.div", "link" : "algebra\/ring\/Field$.html#div[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: A)(ev: Field[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.reciprocal", "link" : "algebra\/ring\/Field$.html#reciprocal[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "defaultFromDouble", "tail" : "(a: Double)(ringA: Ring[A], mgA: MultiplicativeGroup[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromDouble", "link" : "algebra\/ring\/Field$.html#defaultFromDouble[A](a:Double)(implicitringA:algebra.ring.Ring[A],implicitmgA:algebra.ring.MultiplicativeGroup[A]):A", "kind" : "final def"}, {"label" : "defaultFromBigInt", "tail" : "(n: BigInt)(ev: Field[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromBigInt", "link" : "algebra\/ring\/Field$.html#defaultFromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "final def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt)(ev: Field[A]): A", "member" : "algebra.ring.RingFunctions.fromBigInt", "link" : "algebra\/ring\/Field$.html#fromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int)(ev: Field[A]): A", "member" : "algebra.ring.RingFunctions.fromInt", "link" : "algebra\/ring\/Field$.html#fromInt[A](n:Int)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: Field[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/Field$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: Field[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/Field$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: Field[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/Field$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: Field[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/Field$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: Field[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/Field$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: Field[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/Field$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: Field[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/Field$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: Field[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/Field$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: Field[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/Field$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: Field[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/Field$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: Field[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/Field$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: Field[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/Field$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: Field[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/Field$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: Field[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/Field$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: Field[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/Field$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: Field[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/Field$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/Field$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/Field$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/Field$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/Field$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/Field$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/Field$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/Field$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Field$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Field$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Field$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/Field$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/Field$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/Field$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/Field$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/Field$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/Field$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/Field$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Field$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Field$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/Field.html", "kind" : "trait"}, {"name" : "algebra.ring.FieldFunctions", "members_trait" : [{"label" : "fromDouble", "tail" : "(n: Double)(ev: F[A]): A", "member" : "algebra.ring.FieldFunctions.fromDouble", "link" : "algebra\/ring\/FieldFunctions.html#fromDouble[A](n:Double)(implicitev:F[A]):A", "kind" : "def"}, {"label" : "div", "tail" : "(x: A, y: A)(ev: F[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.div", "link" : "algebra\/ring\/FieldFunctions.html#div[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: A)(ev: F[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.reciprocal", "link" : "algebra\/ring\/FieldFunctions.html#reciprocal[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "defaultFromDouble", "tail" : "(a: Double)(ringA: Ring[A], mgA: MultiplicativeGroup[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromDouble", "link" : "algebra\/ring\/FieldFunctions.html#defaultFromDouble[A](a:Double)(implicitringA:algebra.ring.Ring[A],implicitmgA:algebra.ring.MultiplicativeGroup[A]):A", "kind" : "final def"}, {"label" : "defaultFromBigInt", "tail" : "(n: BigInt)(ev: F[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromBigInt", "link" : "algebra\/ring\/FieldFunctions.html#defaultFromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "final def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt)(ev: F[A]): A", "member" : "algebra.ring.RingFunctions.fromBigInt", "link" : "algebra\/ring\/FieldFunctions.html#fromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int)(ev: F[A]): A", "member" : "algebra.ring.RingFunctions.fromInt", "link" : "algebra\/ring\/FieldFunctions.html#fromInt[A](n:Int)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: F[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/FieldFunctions.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: F[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/FieldFunctions.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: F[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/FieldFunctions.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: F[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/FieldFunctions.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: F[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/FieldFunctions.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: F[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/FieldFunctions.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: F[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/FieldFunctions.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: F[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/FieldFunctions.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: F[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/FieldFunctions.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: F[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/FieldFunctions.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: F[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/FieldFunctions.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: F[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/FieldFunctions.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: F[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/FieldFunctions.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: F[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/FieldFunctions.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: F[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/FieldFunctions.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: F[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/FieldFunctions.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/FieldFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/FieldFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/FieldFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/FieldFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/FieldFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/FieldFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/FieldFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/FieldFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/FieldFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/FieldFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/FieldFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/FieldFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/FieldFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/FieldFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/FieldFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/FieldFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/FieldFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/FieldFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/FieldFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/ring\/FieldFunctions.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeCommutativeGroup", "members_trait" : [{"label" : "multiplicative", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeGroup.multiplicative", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#multiplicative:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeGroup.pow", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: A): A", "member" : "algebra.ring.MultiplicativeGroup.reciprocal", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#reciprocal(x:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "div", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeGroup.div", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#div(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html", "members_object" : [{"label" : "multiplicative", "tail" : "(ev: MultiplicativeCommutativeGroup[A]): CommutativeGroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeGroup.multiplicative", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#multiplicative[A](implicitev:algebra.ring.MultiplicativeCommutativeGroup[A]):algebra.CommutativeGroup[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: MultiplicativeCommutativeGroup[A]): MultiplicativeCommutativeGroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeGroup.apply", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#apply[A](implicitev:algebra.ring.MultiplicativeCommutativeGroup[A]):algebra.ring.MultiplicativeCommutativeGroup[A]", "kind" : "final def"}, {"label" : "div", "tail" : "(x: A, y: A)(ev: MultiplicativeCommutativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.div", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#div[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: A)(ev: MultiplicativeCommutativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.reciprocal", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#reciprocal[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeCommutativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: MultiplicativeCommutativeGroup[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: MultiplicativeCommutativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeCommutativeGroup[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: MultiplicativeCommutativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: MultiplicativeCommutativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: MultiplicativeCommutativeGroup[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/MultiplicativeCommutativeGroup.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeCommutativeMonoid", "members_trait" : [{"label" : "multiplicative", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#multiplicative:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html", "members_object" : [{"label" : "multiplicative", "tail" : "(ev: MultiplicativeCommutativeMonoid[A]): CommutativeMonoid[A]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.multiplicative", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#multiplicative[A](implicitev:algebra.ring.MultiplicativeCommutativeMonoid[A]):algebra.CommutativeMonoid[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: MultiplicativeCommutativeMonoid[A]): MultiplicativeCommutativeMonoid[A]", "member" : "algebra.ring.MultiplicativeCommutativeMonoid.apply", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#apply[A](implicitev:algebra.ring.MultiplicativeCommutativeMonoid[A]):algebra.ring.MultiplicativeCommutativeMonoid[A]", "kind" : "final def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeCommutativeMonoid[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: MultiplicativeCommutativeMonoid[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: MultiplicativeCommutativeMonoid[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeCommutativeMonoid[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: MultiplicativeCommutativeMonoid[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: MultiplicativeCommutativeMonoid[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: MultiplicativeCommutativeMonoid[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeMonoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/MultiplicativeCommutativeMonoid.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeCommutativeSemigroup", "members_trait" : [{"label" : "multiplicative", "tail" : "(): CommutativeSemigroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeSemigroup.multiplicative", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#multiplicative:algebra.CommutativeSemigroup[A]", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html", "members_object" : [{"label" : "multiplicative", "tail" : "(ev: MultiplicativeCommutativeSemigroup[A]): CommutativeSemigroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeSemigroup.multiplicative", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#multiplicative[A](implicitev:algebra.ring.MultiplicativeCommutativeSemigroup[A]):algebra.CommutativeSemigroup[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: MultiplicativeCommutativeSemigroup[A]): MultiplicativeCommutativeSemigroup[A]", "member" : "algebra.ring.MultiplicativeCommutativeSemigroup.apply", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#apply[A](implicitev:algebra.ring.MultiplicativeCommutativeSemigroup[A]):algebra.ring.MultiplicativeCommutativeSemigroup[A]", "kind" : "final def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeCommutativeSemigroup[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: MultiplicativeCommutativeSemigroup[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: MultiplicativeCommutativeSemigroup[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: MultiplicativeCommutativeSemigroup[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeCommutativeSemigroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/MultiplicativeCommutativeSemigroup.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeGroup", "members_trait" : [{"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeGroup.pow", "link" : "algebra\/ring\/MultiplicativeGroup.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: A): A", "member" : "algebra.ring.MultiplicativeGroup.reciprocal", "link" : "algebra\/ring\/MultiplicativeGroup.html#reciprocal(x:A):A", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Group[A]", "member" : "algebra.ring.MultiplicativeGroup.multiplicative", "link" : "algebra\/ring\/MultiplicativeGroup.html#multiplicative:algebra.Group[A]", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/MultiplicativeGroup.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/MultiplicativeGroup.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/MultiplicativeGroup.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/MultiplicativeGroup.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/MultiplicativeGroup.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/MultiplicativeGroup.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/MultiplicativeGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/MultiplicativeGroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/MultiplicativeGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/MultiplicativeGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "div", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeGroup.div", "link" : "algebra\/ring\/MultiplicativeGroup.html#div(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/MultiplicativeGroup.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/MultiplicativeGroup.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/MultiplicativeGroup.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/MultiplicativeGroup$.html", "members_object" : [{"label" : "multiplicative", "tail" : "(ev: MultiplicativeGroup[A]): Group[A]", "member" : "algebra.ring.MultiplicativeGroup.multiplicative", "link" : "algebra\/ring\/MultiplicativeGroup$.html#multiplicative[A](implicitev:algebra.ring.MultiplicativeGroup[A]):algebra.Group[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: MultiplicativeGroup[A]): MultiplicativeGroup[A]", "member" : "algebra.ring.MultiplicativeGroup.apply", "link" : "algebra\/ring\/MultiplicativeGroup$.html#apply[A](implicitev:algebra.ring.MultiplicativeGroup[A]):algebra.ring.MultiplicativeGroup[A]", "kind" : "final def"}, {"label" : "div", "tail" : "(x: A, y: A)(ev: MultiplicativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.div", "link" : "algebra\/ring\/MultiplicativeGroup$.html#div[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: A)(ev: MultiplicativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.reciprocal", "link" : "algebra\/ring\/MultiplicativeGroup$.html#reciprocal[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/MultiplicativeGroup$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: MultiplicativeGroup[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/MultiplicativeGroup$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: MultiplicativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/MultiplicativeGroup$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeGroup[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeGroup$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: MultiplicativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeGroup$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: MultiplicativeGroup[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeGroup$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: MultiplicativeGroup[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeGroup$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeGroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeGroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeGroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/MultiplicativeGroup.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeGroupFunctions", "members_trait" : [{"label" : "div", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.div", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#div[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: A)(ev: G[A]): A", "member" : "algebra.ring.MultiplicativeGroupFunctions.reciprocal", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#reciprocal[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: G[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: G[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: G[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: G[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: G[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: G[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeGroupFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/ring\/MultiplicativeGroupFunctions.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeMonoid", "members_trait" : [{"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/MultiplicativeMonoid.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/MultiplicativeMonoid.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "algebra\/ring\/MultiplicativeMonoid.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/MultiplicativeMonoid.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[A]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "algebra\/ring\/MultiplicativeMonoid.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/MultiplicativeMonoid.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/MultiplicativeMonoid.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/MultiplicativeMonoid.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/MultiplicativeMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/MultiplicativeMonoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/MultiplicativeMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/MultiplicativeMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/MultiplicativeMonoid.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/MultiplicativeMonoid.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/MultiplicativeMonoid.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/MultiplicativeMonoid$.html", "members_object" : [{"label" : "multiplicative", "tail" : "(ev: MultiplicativeMonoid[A]): Monoid[A]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#multiplicative[A](implicitev:algebra.ring.MultiplicativeMonoid[A]):algebra.Monoid[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: MultiplicativeMonoid[A]): MultiplicativeMonoid[A]", "member" : "algebra.ring.MultiplicativeMonoid.apply", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#apply[A](implicitev:algebra.ring.MultiplicativeMonoid[A]):algebra.ring.MultiplicativeMonoid[A]", "kind" : "final def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeMonoid[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: MultiplicativeMonoid[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: MultiplicativeMonoid[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeMonoid[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: MultiplicativeMonoid[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: MultiplicativeMonoid[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: MultiplicativeMonoid[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeMonoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeMonoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/MultiplicativeMonoid.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeMonoidFunctions", "members_trait" : [{"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: M[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: M[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: M[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: M[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: M[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: M[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: M[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeMonoidFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/ring\/MultiplicativeMonoidFunctions.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeSemigroup", "members_trait" : [{"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Semigroup[A]", "member" : "algebra.ring.MultiplicativeSemigroup.multiplicative", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#multiplicative:algebra.Semigroup[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/MultiplicativeSemigroup.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/MultiplicativeSemigroup.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/ring\/MultiplicativeSemigroup$.html", "members_object" : [{"label" : "multiplicative", "tail" : "(ev: MultiplicativeSemigroup[A]): Semigroup[A]", "member" : "algebra.ring.MultiplicativeSemigroup.multiplicative", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#multiplicative[A](implicitev:algebra.ring.MultiplicativeSemigroup[A]):algebra.Semigroup[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(ev: MultiplicativeSemigroup[A]): MultiplicativeSemigroup[A]", "member" : "algebra.ring.MultiplicativeSemigroup.apply", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#apply[A](implicitev:algebra.ring.MultiplicativeSemigroup[A]):algebra.ring.MultiplicativeSemigroup[A]", "kind" : "final def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: MultiplicativeSemigroup[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: MultiplicativeSemigroup[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: MultiplicativeSemigroup[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: MultiplicativeSemigroup[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeSemigroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/MultiplicativeSemigroup.html", "kind" : "trait"}, {"name" : "algebra.ring.MultiplicativeSemigroupFunctions", "members_trait" : [{"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: S[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: S[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: S[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: S[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/ring\/MultiplicativeSemigroupFunctions.html", "kind" : "trait"}, {"name" : "algebra.ring.Rig", "members_trait" : [{"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/Rig.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/Rig.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "algebra\/ring\/Rig.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/Rig.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[A]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "algebra\/ring\/Rig.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/Rig.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/ring\/Rig.html#additive:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/Rig.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/Rig.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveMonoid.sumN", "link" : "algebra\/ring\/Rig.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/Rig.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/Rig.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/Rig.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Rig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Rig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/Rig.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/Rig.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/Rig.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/Rig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/Rig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/Rig.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/Rig.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/Rig.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/Rig.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/Rig.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "Rig consists of:", "object" : "algebra\/ring\/Rig$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Rig[A]): Rig[A]", "member" : "algebra.ring.Rig.apply", "link" : "algebra\/ring\/Rig$.html#apply[A](implicitev:algebra.ring.Rig[A]):algebra.ring.Rig[A]", "kind" : "final def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: Rig[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/Rig$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: Rig[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/Rig$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: Rig[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/Rig$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: Rig[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/Rig$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: Rig[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/Rig$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: Rig[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/Rig$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: Rig[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/Rig$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: Rig[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/Rig$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: Rig[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/Rig$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: Rig[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/Rig$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: Rig[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/Rig$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: Rig[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/Rig$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: Rig[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/Rig$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: Rig[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/Rig$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/Rig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/Rig$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/Rig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/Rig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/Rig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/Rig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/Rig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Rig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Rig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Rig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/Rig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/Rig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/Rig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/Rig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/Rig$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/Rig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/Rig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Rig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Rig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/Rig.html", "kind" : "trait"}, {"name" : "algebra.ring.Ring", "members_trait" : [{"label" : "fromBigInt", "tail" : "(n: BigInt): A", "member" : "algebra.ring.Ring.fromBigInt", "link" : "algebra\/ring\/Ring.html#fromBigInt(n:BigInt):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): A", "member" : "algebra.ring.Ring.fromInt", "link" : "algebra\/ring\/Ring.html#fromInt(n:Int):A", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/Ring.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/Ring.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/Ring.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "algebra\/ring\/Ring.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "algebra\/ring\/Ring.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "algebra\/ring\/Ring.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "algebra\/ring\/Ring.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[A]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "algebra\/ring\/Ring.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/Ring.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/Ring.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/Ring.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/Ring.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/Ring.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/Ring.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Ring.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Ring.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/Ring.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/Ring.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/Ring.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/Ring.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/Ring.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.AdditiveGroup.negate", "link" : "algebra\/ring\/Ring.html#negate(x:A):A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "algebra\/ring\/Ring.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/Ring.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/Ring.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/Ring.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/Ring.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "Ring consists of:", "object" : "algebra\/ring\/Ring$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Ring[A]): Ring[A]", "member" : "algebra.ring.Ring.apply", "link" : "algebra\/ring\/Ring$.html#apply[A](implicitev:algebra.ring.Ring[A]):algebra.ring.Ring[A]", "kind" : "final def"}, {"label" : "defaultFromDouble", "tail" : "(a: Double)(ringA: Ring[A], mgA: MultiplicativeGroup[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromDouble", "link" : "algebra\/ring\/Ring$.html#defaultFromDouble[A](a:Double)(implicitringA:algebra.ring.Ring[A],implicitmgA:algebra.ring.MultiplicativeGroup[A]):A", "kind" : "final def"}, {"label" : "defaultFromBigInt", "tail" : "(n: BigInt)(ev: Ring[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromBigInt", "link" : "algebra\/ring\/Ring$.html#defaultFromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "final def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt)(ev: Ring[A]): A", "member" : "algebra.ring.RingFunctions.fromBigInt", "link" : "algebra\/ring\/Ring$.html#fromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int)(ev: Ring[A]): A", "member" : "algebra.ring.RingFunctions.fromInt", "link" : "algebra\/ring\/Ring$.html#fromInt[A](n:Int)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: Ring[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/Ring$.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: Ring[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/Ring$.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: Ring[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/Ring$.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: Ring[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/Ring$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: Ring[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/Ring$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: Ring[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/Ring$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: Ring[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/Ring$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: Ring[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/Ring$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: Ring[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/Ring$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: Ring[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/Ring$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: Ring[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/Ring$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: Ring[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/Ring$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: Ring[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/Ring$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: Ring[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/Ring$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: Ring[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/Ring$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: Ring[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/Ring$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/Ring$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/Ring$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/Ring$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/Ring$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/Ring$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/Ring$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/Ring$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Ring$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Ring$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Ring$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/Ring$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/Ring$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/Ring$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/Ring$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/Ring$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/Ring$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/Ring$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Ring$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Ring$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/Ring.html", "kind" : "trait"}, {"name" : "algebra.ring.RingFunctions", "members_trait" : [{"label" : "defaultFromDouble", "tail" : "(a: Double)(ringA: Ring[A], mgA: MultiplicativeGroup[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromDouble", "link" : "algebra\/ring\/RingFunctions.html#defaultFromDouble[A](a:Double)(implicitringA:algebra.ring.Ring[A],implicitmgA:algebra.ring.MultiplicativeGroup[A]):A", "kind" : "final def"}, {"label" : "defaultFromBigInt", "tail" : "(n: BigInt)(ev: R[A]): A", "member" : "algebra.ring.RingFunctions.defaultFromBigInt", "link" : "algebra\/ring\/RingFunctions.html#defaultFromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "final def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt)(ev: R[A]): A", "member" : "algebra.ring.RingFunctions.fromBigInt", "link" : "algebra\/ring\/RingFunctions.html#fromBigInt[A](n:BigInt)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int)(ev: R[A]): A", "member" : "algebra.ring.RingFunctions.fromInt", "link" : "algebra\/ring\/RingFunctions.html#fromInt[A](n:Int)(implicitev:R[A]):A", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A])(ev: R[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.product", "link" : "algebra\/ring\/RingFunctions.html#product[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev0: R[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoidFunctions.isOne", "link" : "algebra\/ring\/RingFunctions.html#isOne[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: R[A]): A", "member" : "algebra.ring.MultiplicativeMonoidFunctions.one", "link" : "algebra\/ring\/RingFunctions.html#one[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: R[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/RingFunctions.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: R[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/RingFunctions.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: R[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/RingFunctions.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: R[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/RingFunctions.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: R[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/RingFunctions.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: R[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/RingFunctions.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: R[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/RingFunctions.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: R[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/RingFunctions.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: R[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/RingFunctions.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: R[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/RingFunctions.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: R[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/RingFunctions.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: R[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/RingFunctions.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: R[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/RingFunctions.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/RingFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/RingFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/RingFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/RingFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/RingFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/RingFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/RingFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/RingFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/RingFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/RingFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/RingFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/RingFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/RingFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/RingFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/RingFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/RingFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/RingFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/RingFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/RingFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/ring\/RingFunctions.html", "kind" : "trait"}, {"name" : "algebra.ring.Rng", "members_trait" : [{"label" : "additive", "tail" : "(): CommutativeGroup[A]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "algebra\/ring\/Rng.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "algebra\/ring\/Rng.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "algebra\/ring\/Rng.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/ring\/Rng.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/Rng.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/ring\/Rng.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Semigroup[A]", "member" : "algebra.ring.MultiplicativeSemigroup.multiplicative", "link" : "algebra\/ring\/Rng.html#multiplicative:algebra.Semigroup[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/Rng.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/Rng.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/Rng.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/Rng.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/Rng.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Rng.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Rng.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/Rng.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/Rng.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/Rng.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/Rng.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/Rng.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "negate", "tail" : "(x: A): A", "member" : "algebra.ring.AdditiveGroup.negate", "link" : "algebra\/ring\/Rng.html#negate(x:A):A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/Rng.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/Rng.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/Rng.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/Rng.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "Rng (pronounced \"Rung\") consists of:", "object" : "algebra\/ring\/Rng$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Rng[A]): Rng[A]", "member" : "algebra.ring.Rng.apply", "link" : "algebra\/ring\/Rng$.html#apply[A](implicitev:algebra.ring.Rng[A]):algebra.ring.Rng[A]", "kind" : "final def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: Rng[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/Rng$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: Rng[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/Rng$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: Rng[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/Rng$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: Rng[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/Rng$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "minus", "tail" : "(x: A, y: A)(ev: Rng[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.minus", "link" : "algebra\/ring\/Rng$.html#minus[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "negate", "tail" : "(x: A)(ev: Rng[A]): A", "member" : "algebra.ring.AdditiveGroupFunctions.negate", "link" : "algebra\/ring\/Rng$.html#negate[A](x:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: Rng[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/Rng$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: Rng[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/Rng$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: Rng[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/Rng$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: Rng[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/Rng$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: Rng[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/Rng$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: Rng[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/Rng$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: Rng[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/Rng$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/Rng$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/Rng$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/Rng$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/Rng$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/Rng$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/Rng$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/Rng$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Rng$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Rng$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Rng$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/Rng$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/Rng$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/Rng$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/Rng$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/Rng$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/Rng$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/Rng$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Rng$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Rng$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/Rng.html", "kind" : "trait"}, {"name" : "algebra.ring.Semiring", "members_trait" : [{"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroup.tryProduct", "link" : "algebra\/ring\/Semiring.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "algebra\/ring\/Semiring.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.pow", "link" : "algebra\/ring\/Semiring.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Semigroup[A]", "member" : "algebra.ring.MultiplicativeSemigroup.multiplicative", "link" : "algebra\/ring\/Semiring.html#multiplicative:algebra.Semigroup[A]", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeMonoid[A]", "member" : "algebra.ring.AdditiveCommutativeMonoid.additive", "link" : "algebra\/ring\/Semiring.html#additive:algebra.CommutativeMonoid[A]", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "algebra\/ring\/Semiring.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "algebra\/ring\/Semiring.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveMonoid.sumN", "link" : "algebra\/ring\/Semiring.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "algebra\/ring\/Semiring.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "algebra\/ring\/Semiring.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/ring\/Semiring.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Semiring.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Semiring.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/ring\/Semiring.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/ring\/Semiring.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/ring\/Semiring.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/ring\/Semiring.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/ring\/Semiring.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "algebra\/ring\/Semiring.html#times(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "algebra\/ring\/Semiring.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "algebra\/ring\/Semiring.html#plus(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/ring\/Semiring.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "Semiring consists of:", "object" : "algebra\/ring\/Semiring$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Semiring[A]): Semiring[A]", "member" : "algebra.ring.Semiring.apply", "link" : "algebra\/ring\/Semiring$.html#apply[A](implicitev:algebra.ring.Semiring[A]):algebra.ring.Semiring[A]", "kind" : "final def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A])(ev: Semiring[A]): Option[A]", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.tryProduct", "link" : "algebra\/ring\/Semiring$.html#tryProduct[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int)(ev: Semiring[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.pow", "link" : "algebra\/ring\/Semiring$.html#pow[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "times", "tail" : "(x: A, y: A)(ev: Semiring[A]): A", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.times", "link" : "algebra\/ring\/Semiring$.html#times[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isMultiplicativeCommutative", "tail" : "(ev: Semiring[A]): Boolean", "member" : "algebra.ring.MultiplicativeSemigroupFunctions.isMultiplicativeCommutative", "link" : "algebra\/ring\/Semiring$.html#isMultiplicativeCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[A])(ev: Semiring[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.sum", "link" : "algebra\/ring\/Semiring$.html#sum[A](as:TraversableOnce[A])(implicitev:M[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev0: Semiring[A], ev1: Eq[A]): Boolean", "member" : "algebra.ring.AdditiveMonoidFunctions.isZero", "link" : "algebra\/ring\/Semiring$.html#isZero[A](a:A)(implicitev0:M[A],implicitev1:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: Semiring[A]): A", "member" : "algebra.ring.AdditiveMonoidFunctions.zero", "link" : "algebra\/ring\/Semiring$.html#zero[A](implicitev:M[A]):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[A])(ev: Semiring[A]): Option[A]", "member" : "algebra.ring.AdditiveSemigroupFunctions.trySum", "link" : "algebra\/ring\/Semiring$.html#trySum[A](as:TraversableOnce[A])(implicitev:S[A]):Option[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: A, n: Int)(ev: Semiring[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.sumN", "link" : "algebra\/ring\/Semiring$.html#sumN[A](a:A,n:Int)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "plus", "tail" : "(x: A, y: A)(ev: Semiring[A]): A", "member" : "algebra.ring.AdditiveSemigroupFunctions.plus", "link" : "algebra\/ring\/Semiring$.html#plus[A](x:A,y:A)(implicitev:S[A]):A", "kind" : "def"}, {"label" : "isAdditiveCommutative", "tail" : "(ev: Semiring[A]): Boolean", "member" : "algebra.ring.AdditiveSemigroupFunctions.isAdditiveCommutative", "link" : "algebra\/ring\/Semiring$.html#isAdditiveCommutative[A](implicitev:S[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/ring\/Semiring$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/ring\/Semiring$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/ring\/Semiring$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/ring\/Semiring$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/ring\/Semiring$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/ring\/Semiring$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/ring\/Semiring$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Semiring$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Semiring$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/ring\/Semiring$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/ring\/Semiring$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/ring\/Semiring$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/ring\/Semiring$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/ring\/Semiring$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/ring\/Semiring$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/ring\/Semiring$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/ring\/Semiring$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/ring\/Semiring$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/ring\/Semiring$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/ring\/Semiring.html", "kind" : "trait"}], "algebra.lattice" : [{"name" : "algebra.lattice.Bool", "members_trait" : [{"label" : "asBoolRing", "tail" : "(): BoolRing[A]", "member" : "algebra.lattice.Bool.asBoolRing", "link" : "algebra\/lattice\/Bool.html#asBoolRing:algebra.ring.BoolRing[A]", "kind" : "def"}, {"label" : "dual", "tail" : "(): Bool[A]", "member" : "algebra.lattice.Bool.dual", "link" : "algebra\/lattice\/Bool.html#dual:algebra.lattice.Bool[A]", "kind" : "def"}, {"label" : "xor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Bool.xor", "link" : "algebra\/lattice\/Bool.html#xor(a:A,b:A):A", "kind" : "def"}, {"label" : "without", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Bool.without", "link" : "algebra\/lattice\/Bool.html#without(a:A,b:A):A", "kind" : "def"}, {"label" : "imp", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Bool.imp", "link" : "algebra\/lattice\/Bool.html#imp(a:A,b:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.join", "link" : "algebra\/lattice\/Bool.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.meet", "link" : "algebra\/lattice\/Bool.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "nxor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nxor", "link" : "algebra\/lattice\/Bool.html#nxor(a:A,b:A):A", "kind" : "def"}, {"label" : "nor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nor", "link" : "algebra\/lattice\/Bool.html#nor(a:A,b:A):A", "kind" : "def"}, {"label" : "nand", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nand", "link" : "algebra\/lattice\/Bool.html#nand(a:A,b:A):A", "kind" : "def"}, {"label" : "asCommutativeRig", "tail" : "(): CommutativeRig[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.asCommutativeRig", "link" : "algebra\/lattice\/Bool.html#asCommutativeRig:algebra.ring.CommutativeRig[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/Bool.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/Bool.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/Bool.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedMeetSemilattice.isOne", "link" : "algebra\/lattice\/Bool.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/Bool.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/Bool.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/Bool.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/Bool.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/Bool.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/Bool.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/Bool.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/Bool.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/Bool.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/Bool.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "or", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.or", "link" : "algebra\/lattice\/Bool.html#or(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "and", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.and", "link" : "algebra\/lattice\/Bool.html#and(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "complement", "tail" : "(a: A): A", "member" : "algebra.lattice.Heyting.complement", "link" : "algebra\/lattice\/Bool.html#complement(a:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.BoundedJoinSemilattice.zero", "link" : "algebra\/lattice\/Bool.html#zero:A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.lattice.BoundedMeetSemilattice.one", "link" : "algebra\/lattice\/Bool.html#one:A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/Bool.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "Boolean algebras are Heyting algebras with the additionalconstraint that the law of the excluded middle is true(equivalently, double-negation is true).", "object" : "algebra\/lattice\/Bool$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Bool[A]): Bool[A]", "member" : "algebra.lattice.Bool.apply", "link" : "algebra\/lattice\/Bool$.html#apply[A](implicitev:algebra.lattice.Bool[A]):algebra.lattice.Bool[A]", "kind" : "final def"}, {"label" : "xor", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.GenBoolFunctions.xor", "link" : "algebra\/lattice\/Bool$.html#xor[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "without", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.GenBoolFunctions.without", "link" : "algebra\/lattice\/Bool$.html#without[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "or", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.GenBoolFunctions.or", "link" : "algebra\/lattice\/Bool$.html#or[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "and", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.GenBoolFunctions.and", "link" : "algebra\/lattice\/Bool$.html#and[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "nand", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.HeytingFunctions.nand", "link" : "algebra\/lattice\/Bool$.html#nand[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "nxor", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.HeytingFunctions.nxor", "link" : "algebra\/lattice\/Bool$.html#nxor[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "nor", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.HeytingFunctions.nor", "link" : "algebra\/lattice\/Bool$.html#nor[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "imp", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.HeytingFunctions.imp", "link" : "algebra\/lattice\/Bool$.html#imp[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "complement", "tail" : "(x: A)(ev: Bool[A]): A", "member" : "algebra.lattice.HeytingFunctions.complement", "link" : "algebra\/lattice\/Bool$.html#complement[A](x:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: Bool[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/Bool$.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/Bool$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "one", "tail" : "(ev: Bool[A]): A", "member" : "algebra.lattice.BoundedMeetSemilatticeFunctions.one", "link" : "algebra\/lattice\/Bool$.html#one[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: Bool[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/Bool$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/Bool$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/Bool$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/Bool$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/Bool$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/Bool$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/Bool$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/Bool$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Bool$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Bool$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Bool$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/Bool$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/Bool$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/Bool$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/Bool$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/Bool$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/Bool$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/Bool$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/Bool$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/Bool$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/Bool.html", "kind" : "trait"}, {"name" : "algebra.lattice.BoolFromBoolRing", "shortDescription" : "Every Boolean ring gives rise to a Boolean algebra:", "members_class" : [{"label" : "asBoolRing", "tail" : "(): BoolRing[A]", "member" : "algebra.lattice.BoolFromBoolRing.asBoolRing", "link" : "algebra\/lattice\/BoolFromBoolRing.html#asBoolRing:algebra.ring.BoolRing[A]", "kind" : "def"}, {"label" : "without", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.BoolFromBoolRing.without", "link" : "algebra\/lattice\/BoolFromBoolRing.html#without(a:A,b:A):A", "kind" : "def"}, {"label" : "complement", "tail" : "(a: A): A", "member" : "algebra.lattice.BoolFromBoolRing.complement", "link" : "algebra\/lattice\/BoolFromBoolRing.html#complement(a:A):A", "kind" : "def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.lattice.BoolFromBoolRing.one", "link" : "algebra\/lattice\/BoolFromBoolRing.html#one:A", "kind" : "def"}, {"member" : "algebra.lattice.BoolFromBoolRing#<init>", "error" : "unsupported entity"}, {"label" : "dual", "tail" : "(): Bool[A]", "member" : "algebra.lattice.Bool.dual", "link" : "algebra\/lattice\/BoolFromBoolRing.html#dual:algebra.lattice.Bool[A]", "kind" : "def"}, {"label" : "xor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Bool.xor", "link" : "algebra\/lattice\/BoolFromBoolRing.html#xor(a:A,b:A):A", "kind" : "def"}, {"label" : "imp", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Bool.imp", "link" : "algebra\/lattice\/BoolFromBoolRing.html#imp(a:A,b:A):A", "kind" : "def"}, {"label" : "nxor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nxor", "link" : "algebra\/lattice\/BoolFromBoolRing.html#nxor(a:A,b:A):A", "kind" : "def"}, {"label" : "nor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nor", "link" : "algebra\/lattice\/BoolFromBoolRing.html#nor(a:A,b:A):A", "kind" : "def"}, {"label" : "nand", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nand", "link" : "algebra\/lattice\/BoolFromBoolRing.html#nand(a:A,b:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.join", "link" : "algebra\/lattice\/BoolFromBoolRing.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.meet", "link" : "algebra\/lattice\/BoolFromBoolRing.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "asCommutativeRig", "tail" : "(): CommutativeRig[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.asCommutativeRig", "link" : "algebra\/lattice\/BoolFromBoolRing.html#asCommutativeRig:algebra.ring.CommutativeRig[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/BoolFromBoolRing.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedMeetSemilattice.isOne", "link" : "algebra\/lattice\/BoolFromBoolRing.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "or", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBoolFromBoolRng.or", "link" : "algebra\/lattice\/BoolFromBoolRing.html#or(a:A,b:A):A", "kind" : "def"}, {"label" : "and", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBoolFromBoolRng.and", "link" : "algebra\/lattice\/BoolFromBoolRing.html#and(a:A,b:A):A", "kind" : "def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.GenBoolFromBoolRng.zero", "link" : "algebra\/lattice\/BoolFromBoolRing.html#zero:A", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/BoolFromBoolRing.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/BoolFromBoolRing.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/BoolFromBoolRing.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/BoolFromBoolRing.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/BoolFromBoolRing.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/BoolFromBoolRing.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/BoolFromBoolRing.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/BoolFromBoolRing.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/BoolFromBoolRing.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/BoolFromBoolRing.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/BoolFromBoolRing.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoolFromBoolRing.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoolFromBoolRing.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoolFromBoolRing.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/BoolFromBoolRing.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/BoolFromBoolRing.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/BoolFromBoolRing.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/BoolFromBoolRing.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/BoolFromBoolRing.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/BoolFromBoolRing.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/BoolFromBoolRing.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoolFromBoolRing.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoolFromBoolRing.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/lattice\/BoolFromBoolRing.html", "kind" : "class"}, {"name" : "algebra.lattice.BoundedDistributiveLattice", "members_trait" : [{"label" : "dual", "tail" : "(): BoundedDistributiveLattice[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.dual", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#dual:algebra.lattice.BoundedDistributiveLattice[A]", "kind" : "def"}, {"label" : "asCommutativeRig", "tail" : "(): CommutativeRig[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.asCommutativeRig", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#asCommutativeRig:algebra.ring.CommutativeRig[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedMeetSemilattice.isOne", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.BoundedJoinSemilattice.zero", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#zero:A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.lattice.BoundedMeetSemilattice.one", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#one:A", "kind" : "abstract def"}, {"label" : "meet", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.MeetSemilattice.meet", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#meet(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "join", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.JoinSemilattice.join", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#join(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/BoundedDistributiveLattice.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A bounded distributive lattice is a lattice that both bounded and distributive", "object" : "algebra\/lattice\/BoundedDistributiveLattice$.html", "members_object" : [{"label" : "minMax", "tail" : "(min: A, max: A)(ord: Order[A]): BoundedDistributiveLattice[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.minMax", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#minMax[A](min:A,max:A)(implicitord:algebra.Order[A]):algebra.lattice.BoundedDistributiveLattice[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: BoundedDistributiveLattice[A]): BoundedDistributiveLattice[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.apply", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#apply[A](implicitev:algebra.lattice.BoundedDistributiveLattice[A]):algebra.lattice.BoundedDistributiveLattice[A]", "kind" : "final def"}, {"label" : "zero", "tail" : "(ev: BoundedDistributiveLattice[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: BoundedDistributiveLattice[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "one", "tail" : "(ev: BoundedDistributiveLattice[A]): A", "member" : "algebra.lattice.BoundedMeetSemilatticeFunctions.one", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#one[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: BoundedDistributiveLattice[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedDistributiveLattice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/BoundedDistributiveLattice.html", "kind" : "trait"}, {"name" : "algebra.lattice.BoundedJoinSemilattice", "members_trait" : [{"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.BoundedJoinSemilattice.zero", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#zero:A", "kind" : "abstract def"}, {"label" : "join", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.JoinSemilattice.join", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#join(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/BoundedJoinSemilattice.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/lattice\/BoundedJoinSemilattice$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: BoundedJoinSemilattice[A]): BoundedJoinSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.apply", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#apply[A](implicitev:algebra.lattice.BoundedJoinSemilattice[A]):algebra.lattice.BoundedJoinSemilattice[A]", "kind" : "final def"}, {"label" : "zero", "tail" : "(ev: BoundedJoinSemilattice[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: BoundedJoinSemilattice[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedJoinSemilattice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/BoundedJoinSemilattice.html", "kind" : "trait"}, {"name" : "algebra.lattice.BoundedJoinSemilatticeFunctions", "members_trait" : [{"label" : "zero", "tail" : "(ev: B[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: B[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/lattice\/BoundedJoinSemilatticeFunctions.html", "kind" : "trait"}, {"name" : "algebra.lattice.BoundedLattice", "members_trait" : [{"label" : "dual", "tail" : "(): BoundedLattice[A]", "member" : "algebra.lattice.BoundedLattice.dual", "link" : "algebra\/lattice\/BoundedLattice.html#dual:algebra.lattice.BoundedLattice[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/BoundedLattice.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/BoundedLattice.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/BoundedLattice.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedMeetSemilattice.isOne", "link" : "algebra\/lattice\/BoundedLattice.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/BoundedLattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/BoundedLattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/BoundedLattice.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedLattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedLattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/BoundedLattice.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/BoundedLattice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/BoundedLattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/BoundedLattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/BoundedLattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.BoundedJoinSemilattice.zero", "link" : "algebra\/lattice\/BoundedLattice.html#zero:A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.lattice.BoundedMeetSemilattice.one", "link" : "algebra\/lattice\/BoundedLattice.html#one:A", "kind" : "abstract def"}, {"label" : "meet", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.MeetSemilattice.meet", "link" : "algebra\/lattice\/BoundedLattice.html#meet(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "join", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.JoinSemilattice.join", "link" : "algebra\/lattice\/BoundedLattice.html#join(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/BoundedLattice.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A bounded lattice is a lattice that additionally has one elementthat is the bottom (zero, also written as ⊥), and one element thatis the top (one, also written as ⊤).", "object" : "algebra\/lattice\/BoundedLattice$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: BoundedLattice[A]): BoundedLattice[A]", "member" : "algebra.lattice.BoundedLattice.apply", "link" : "algebra\/lattice\/BoundedLattice$.html#apply[A](implicitev:algebra.lattice.BoundedLattice[A]):algebra.lattice.BoundedLattice[A]", "kind" : "final def"}, {"label" : "zero", "tail" : "(ev: BoundedLattice[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/BoundedLattice$.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: BoundedLattice[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/BoundedLattice$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "one", "tail" : "(ev: BoundedLattice[A]): A", "member" : "algebra.lattice.BoundedMeetSemilatticeFunctions.one", "link" : "algebra\/lattice\/BoundedLattice$.html#one[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: BoundedLattice[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/BoundedLattice$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/BoundedLattice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/BoundedLattice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/BoundedLattice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/BoundedLattice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/BoundedLattice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/BoundedLattice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/BoundedLattice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedLattice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedLattice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedLattice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/BoundedLattice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/BoundedLattice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/BoundedLattice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/BoundedLattice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/BoundedLattice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/BoundedLattice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/BoundedLattice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedLattice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedLattice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/BoundedLattice.html", "kind" : "trait"}, {"name" : "algebra.lattice.BoundedMeetSemilattice", "members_trait" : [{"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedMeetSemilattice.isOne", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.lattice.BoundedMeetSemilattice.one", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#one:A", "kind" : "abstract def"}, {"label" : "meet", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.MeetSemilattice.meet", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#meet(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/BoundedMeetSemilattice.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "algebra\/lattice\/BoundedMeetSemilattice$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: BoundedMeetSemilattice[A]): BoundedMeetSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.apply", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#apply[A](implicitev:algebra.lattice.BoundedMeetSemilattice[A]):algebra.lattice.BoundedMeetSemilattice[A]", "kind" : "final def"}, {"label" : "one", "tail" : "(ev: BoundedMeetSemilattice[A]): A", "member" : "algebra.lattice.BoundedMeetSemilatticeFunctions.one", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#one[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: BoundedMeetSemilattice[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedMeetSemilattice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/BoundedMeetSemilattice.html", "kind" : "trait"}, {"name" : "algebra.lattice.BoundedMeetSemilatticeFunctions", "members_trait" : [{"label" : "one", "tail" : "(ev: B[A]): A", "member" : "algebra.lattice.BoundedMeetSemilatticeFunctions.one", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#one[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: B[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/lattice\/BoundedMeetSemilatticeFunctions.html", "kind" : "trait"}, {"name" : "algebra.lattice.DistributiveLattice", "members_trait" : [{"label" : "dual", "tail" : "(): Lattice[A]", "member" : "algebra.lattice.Lattice.dual", "link" : "algebra\/lattice\/DistributiveLattice.html#dual:algebra.lattice.Lattice[A]", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/DistributiveLattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.MeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/DistributiveLattice.html#meetSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/DistributiveLattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.JoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/DistributiveLattice.html#joinSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/DistributiveLattice.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/DistributiveLattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/DistributiveLattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/DistributiveLattice.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/DistributiveLattice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/DistributiveLattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/DistributiveLattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/DistributiveLattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "meet", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.MeetSemilattice.meet", "link" : "algebra\/lattice\/DistributiveLattice.html#meet(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "join", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.JoinSemilattice.join", "link" : "algebra\/lattice\/DistributiveLattice.html#join(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/DistributiveLattice.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A distributive lattice a lattice where join and meet distribute:", "object" : "algebra\/lattice\/DistributiveLattice$.html", "members_object" : [{"label" : "minMax", "tail" : "(arg0: Order[A]): DistributiveLattice[A]", "member" : "algebra.lattice.DistributiveLattice.minMax", "link" : "algebra\/lattice\/DistributiveLattice$.html#minMax[A](implicitevidence$1:algebra.Order[A]):algebra.lattice.DistributiveLattice[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: DistributiveLattice[A]): DistributiveLattice[A]", "member" : "algebra.lattice.DistributiveLattice.apply", "link" : "algebra\/lattice\/DistributiveLattice$.html#apply[A](implicitev:algebra.lattice.DistributiveLattice[A]):algebra.lattice.DistributiveLattice[A]", "kind" : "final def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: DistributiveLattice[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/DistributiveLattice$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: DistributiveLattice[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/DistributiveLattice$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/DistributiveLattice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/DistributiveLattice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/DistributiveLattice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/DistributiveLattice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/DistributiveLattice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/DistributiveLattice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/DistributiveLattice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/DistributiveLattice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/DistributiveLattice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/DistributiveLattice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/DistributiveLattice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/DistributiveLattice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/DistributiveLattice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/DistributiveLattice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/DistributiveLattice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/DistributiveLattice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/DistributiveLattice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/DistributiveLattice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/DistributiveLattice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/DistributiveLattice.html", "kind" : "trait"}, {"name" : "algebra.lattice.DualBool", "shortDescription" : "", "members_class" : [{"label" : "dual", "tail" : "(): Bool[A]", "member" : "algebra.lattice.DualBool.dual", "link" : "algebra\/lattice\/DualBool.html#dual:algebra.lattice.Bool[A]", "kind" : "def"}, {"label" : "nxor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.DualBool.nxor", "link" : "algebra\/lattice\/DualBool.html#nxor(a:A,b:A):A", "kind" : "def"}, {"label" : "nor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.DualBool.nor", "link" : "algebra\/lattice\/DualBool.html#nor(a:A,b:A):A", "kind" : "def"}, {"label" : "nand", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.DualBool.nand", "link" : "algebra\/lattice\/DualBool.html#nand(a:A,b:A):A", "kind" : "def"}, {"label" : "imp", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.DualBool.imp", "link" : "algebra\/lattice\/DualBool.html#imp(a:A,b:A):A", "kind" : "def"}, {"label" : "xor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.DualBool.xor", "link" : "algebra\/lattice\/DualBool.html#xor(a:A,b:A):A", "kind" : "def"}, {"label" : "complement", "tail" : "(a: A): A", "member" : "algebra.lattice.DualBool.complement", "link" : "algebra\/lattice\/DualBool.html#complement(a:A):A", "kind" : "def"}, {"label" : "or", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.DualBool.or", "link" : "algebra\/lattice\/DualBool.html#or(a:A,b:A):A", "kind" : "def"}, {"label" : "and", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.DualBool.and", "link" : "algebra\/lattice\/DualBool.html#and(a:A,b:A):A", "kind" : "def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.DualBool.zero", "link" : "algebra\/lattice\/DualBool.html#zero:A", "kind" : "def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.lattice.DualBool.one", "link" : "algebra\/lattice\/DualBool.html#one:A", "kind" : "def"}, {"member" : "algebra.lattice.DualBool#<init>", "error" : "unsupported entity"}, {"label" : "asBoolRing", "tail" : "(): BoolRing[A]", "member" : "algebra.lattice.Bool.asBoolRing", "link" : "algebra\/lattice\/DualBool.html#asBoolRing:algebra.ring.BoolRing[A]", "kind" : "def"}, {"label" : "without", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Bool.without", "link" : "algebra\/lattice\/DualBool.html#without(a:A,b:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.join", "link" : "algebra\/lattice\/DualBool.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.meet", "link" : "algebra\/lattice\/DualBool.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "asCommutativeRig", "tail" : "(): CommutativeRig[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.asCommutativeRig", "link" : "algebra\/lattice\/DualBool.html#asCommutativeRig:algebra.ring.CommutativeRig[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/DualBool.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/DualBool.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/DualBool.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedMeetSemilattice.isOne", "link" : "algebra\/lattice\/DualBool.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/DualBool.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/DualBool.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/DualBool.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/DualBool.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/DualBool.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/DualBool.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/DualBool.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/DualBool.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/DualBool.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/DualBool.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/DualBool.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/DualBool.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/DualBool.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/DualBool.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/DualBool.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/DualBool.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/DualBool.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/DualBool.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/DualBool.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/DualBool.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/DualBool.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/lattice\/DualBool.html", "kind" : "class"}, {"name" : "algebra.lattice.GenBool", "members_trait" : [{"label" : "asBoolRing", "tail" : "(): BoolRng[A]", "member" : "algebra.lattice.GenBool.asBoolRing", "link" : "algebra\/lattice\/GenBool.html#asBoolRing:algebra.ring.BoolRng[A]", "kind" : "def"}, {"label" : "xor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.xor", "link" : "algebra\/lattice\/GenBool.html#xor(a:A,b:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.join", "link" : "algebra\/lattice\/GenBool.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.meet", "link" : "algebra\/lattice\/GenBool.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/GenBool.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/GenBool.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "dual", "tail" : "(): Lattice[A]", "member" : "algebra.lattice.Lattice.dual", "link" : "algebra\/lattice\/GenBool.html#dual:algebra.lattice.Lattice[A]", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/GenBool.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.MeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/GenBool.html#meetSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/GenBool.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/GenBool.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/GenBool.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/GenBool.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/GenBool.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/GenBool.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/GenBool.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/GenBool.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/GenBool.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "without", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.without", "link" : "algebra\/lattice\/GenBool.html#without(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "or", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.or", "link" : "algebra\/lattice\/GenBool.html#or(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "and", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.and", "link" : "algebra\/lattice\/GenBool.html#and(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.BoundedJoinSemilattice.zero", "link" : "algebra\/lattice\/GenBool.html#zero:A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/GenBool.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "Generalized Boolean algebra, that is, a Boolean algebra withoutthe top element.", "object" : "algebra\/lattice\/GenBool$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: GenBool[A]): GenBool[A]", "member" : "algebra.lattice.GenBool.apply", "link" : "algebra\/lattice\/GenBool$.html#apply[A](implicitev:algebra.lattice.GenBool[A]):algebra.lattice.GenBool[A]", "kind" : "final def"}, {"label" : "xor", "tail" : "(x: A, y: A)(ev: GenBool[A]): A", "member" : "algebra.lattice.GenBoolFunctions.xor", "link" : "algebra\/lattice\/GenBool$.html#xor[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "without", "tail" : "(x: A, y: A)(ev: GenBool[A]): A", "member" : "algebra.lattice.GenBoolFunctions.without", "link" : "algebra\/lattice\/GenBool$.html#without[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "or", "tail" : "(x: A, y: A)(ev: GenBool[A]): A", "member" : "algebra.lattice.GenBoolFunctions.or", "link" : "algebra\/lattice\/GenBool$.html#or[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "and", "tail" : "(x: A, y: A)(ev: GenBool[A]): A", "member" : "algebra.lattice.GenBoolFunctions.and", "link" : "algebra\/lattice\/GenBool$.html#and[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: GenBool[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/GenBool$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: GenBool[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/GenBool$.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: GenBool[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/GenBool$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/GenBool$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/GenBool$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/GenBool$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/GenBool$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/GenBool$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/GenBool$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/GenBool$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBool$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBool$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBool$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/GenBool$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/GenBool$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/GenBool$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/GenBool$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/GenBool$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/GenBool$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/GenBool$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/GenBool$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/GenBool$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/GenBool.html", "kind" : "trait"}, {"name" : "algebra.lattice.GenBoolFromBoolRng", "shortDescription" : "Every Boolean rng gives rise to a Boolean algebra without top:", "members_class" : [{"label" : "asBoolRing", "tail" : "(): BoolRng[A]", "member" : "algebra.lattice.GenBoolFromBoolRng.asBoolRing", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#asBoolRing:algebra.ring.BoolRng[A]", "kind" : "def"}, {"label" : "without", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBoolFromBoolRng.without", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#without(a:A,b:A):A", "kind" : "def"}, {"label" : "or", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBoolFromBoolRng.or", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#or(a:A,b:A):A", "kind" : "def"}, {"label" : "and", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBoolFromBoolRng.and", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#and(a:A,b:A):A", "kind" : "def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.GenBoolFromBoolRng.zero", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#zero:A", "kind" : "def"}, {"member" : "algebra.lattice.GenBoolFromBoolRng#<init>", "error" : "unsupported entity"}, {"label" : "xor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.xor", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#xor(a:A,b:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.join", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.GenBool.meet", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "dual", "tail" : "(): Lattice[A]", "member" : "algebra.lattice.Lattice.dual", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#dual:algebra.lattice.Lattice[A]", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.MeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#meetSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/GenBoolFromBoolRng.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/lattice\/GenBoolFromBoolRng.html", "kind" : "class"}, {"name" : "algebra.lattice.GenBoolFunctions", "members_trait" : [{"label" : "xor", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.lattice.GenBoolFunctions.xor", "link" : "algebra\/lattice\/GenBoolFunctions.html#xor[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "without", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.lattice.GenBoolFunctions.without", "link" : "algebra\/lattice\/GenBoolFunctions.html#without[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "or", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.lattice.GenBoolFunctions.or", "link" : "algebra\/lattice\/GenBoolFunctions.html#or[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "and", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.lattice.GenBoolFunctions.and", "link" : "algebra\/lattice\/GenBoolFunctions.html#and[A](x:A,y:A)(implicitev:G[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/GenBoolFunctions.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: G[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/GenBoolFunctions.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: G[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/GenBoolFunctions.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/GenBoolFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/GenBoolFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/GenBoolFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/GenBoolFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/GenBoolFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/GenBoolFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/GenBoolFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBoolFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBoolFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/GenBoolFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/GenBoolFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/GenBoolFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/GenBoolFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/GenBoolFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/GenBoolFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/GenBoolFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/GenBoolFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/GenBoolFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/GenBoolFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/lattice\/GenBoolFunctions.html", "kind" : "trait"}, {"name" : "algebra.lattice.Heyting", "members_trait" : [{"label" : "nxor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nxor", "link" : "algebra\/lattice\/Heyting.html#nxor(a:A,b:A):A", "kind" : "def"}, {"label" : "nor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nor", "link" : "algebra\/lattice\/Heyting.html#nor(a:A,b:A):A", "kind" : "def"}, {"label" : "nand", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.nand", "link" : "algebra\/lattice\/Heyting.html#nand(a:A,b:A):A", "kind" : "def"}, {"label" : "xor", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.xor", "link" : "algebra\/lattice\/Heyting.html#xor(a:A,b:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.join", "link" : "algebra\/lattice\/Heyting.html#join(a:A,b:A):A", "kind" : "def"}, {"label" : "meet", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.meet", "link" : "algebra\/lattice\/Heyting.html#meet(a:A,b:A):A", "kind" : "def"}, {"label" : "dual", "tail" : "(): BoundedDistributiveLattice[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.dual", "link" : "algebra\/lattice\/Heyting.html#dual:algebra.lattice.BoundedDistributiveLattice[A]", "kind" : "def"}, {"label" : "asCommutativeRig", "tail" : "(): CommutativeRig[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.asCommutativeRig", "link" : "algebra\/lattice\/Heyting.html#asCommutativeRig:algebra.ring.CommutativeRig[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/Heyting.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/Heyting.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/Heyting.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedMeetSemilattice.isOne", "link" : "algebra\/lattice\/Heyting.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/Heyting.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/Heyting.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/Heyting.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/Heyting.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/Heyting.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/Heyting.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/Heyting.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/Heyting.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/Heyting.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/Heyting.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "complement", "tail" : "(a: A): A", "member" : "algebra.lattice.Heyting.complement", "link" : "algebra\/lattice\/Heyting.html#complement(a:A):A", "kind" : "abstract def"}, {"label" : "imp", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.imp", "link" : "algebra\/lattice\/Heyting.html#imp(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "or", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.or", "link" : "algebra\/lattice\/Heyting.html#or(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "and", "tail" : "(a: A, b: A): A", "member" : "algebra.lattice.Heyting.and", "link" : "algebra\/lattice\/Heyting.html#and(a:A,b:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.BoundedJoinSemilattice.zero", "link" : "algebra\/lattice\/Heyting.html#zero:A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.lattice.BoundedMeetSemilattice.one", "link" : "algebra\/lattice\/Heyting.html#one:A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/Heyting.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "Heyting algebras are bounded lattices that are also equipped withan additional binary operation imp (for impliciation, alsowritten as →).", "object" : "algebra\/lattice\/Heyting$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Heyting[A]): Heyting[A]", "member" : "algebra.lattice.Heyting.apply", "link" : "algebra\/lattice\/Heyting$.html#apply[A](implicitev:algebra.lattice.Heyting[A]):algebra.lattice.Heyting[A]", "kind" : "final def"}, {"label" : "xor", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.HeytingGenBoolOverlap.xor", "link" : "algebra\/lattice\/Heyting$.html#xor[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "or", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.HeytingGenBoolOverlap.or", "link" : "algebra\/lattice\/Heyting$.html#or[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "and", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.HeytingGenBoolOverlap.and", "link" : "algebra\/lattice\/Heyting$.html#and[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "nand", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.HeytingFunctions.nand", "link" : "algebra\/lattice\/Heyting$.html#nand[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "nxor", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.HeytingFunctions.nxor", "link" : "algebra\/lattice\/Heyting$.html#nxor[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "nor", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.HeytingFunctions.nor", "link" : "algebra\/lattice\/Heyting$.html#nor[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "imp", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.HeytingFunctions.imp", "link" : "algebra\/lattice\/Heyting$.html#imp[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "complement", "tail" : "(x: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.HeytingFunctions.complement", "link" : "algebra\/lattice\/Heyting$.html#complement[A](x:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: Heyting[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/Heyting$.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/Heyting$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "one", "tail" : "(ev: Heyting[A]): A", "member" : "algebra.lattice.BoundedMeetSemilatticeFunctions.one", "link" : "algebra\/lattice\/Heyting$.html#one[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: Heyting[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/Heyting$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/Heyting$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/Heyting$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/Heyting$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/Heyting$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/Heyting$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/Heyting$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/Heyting$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Heyting$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Heyting$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Heyting$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/Heyting$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/Heyting$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/Heyting$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/Heyting$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/Heyting$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/Heyting$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/Heyting$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/Heyting$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/Heyting$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/Heyting.html", "kind" : "trait"}, {"name" : "algebra.lattice.HeytingFunctions", "members_trait" : [{"label" : "nand", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.HeytingFunctions.nand", "link" : "algebra\/lattice\/HeytingFunctions.html#nand[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "nxor", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.HeytingFunctions.nxor", "link" : "algebra\/lattice\/HeytingFunctions.html#nxor[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "nor", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.HeytingFunctions.nor", "link" : "algebra\/lattice\/HeytingFunctions.html#nor[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "imp", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.HeytingFunctions.imp", "link" : "algebra\/lattice\/HeytingFunctions.html#imp[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "complement", "tail" : "(x: A)(ev: H[A]): A", "member" : "algebra.lattice.HeytingFunctions.complement", "link" : "algebra\/lattice\/HeytingFunctions.html#complement[A](x:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: H[A]): A", "member" : "algebra.lattice.BoundedJoinSemilatticeFunctions.zero", "link" : "algebra\/lattice\/HeytingFunctions.html#zero[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/HeytingFunctions.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "one", "tail" : "(ev: H[A]): A", "member" : "algebra.lattice.BoundedMeetSemilatticeFunctions.one", "link" : "algebra\/lattice\/HeytingFunctions.html#one[A](implicitev:B[A]):A", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/HeytingFunctions.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/HeytingFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/HeytingFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/HeytingFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/HeytingFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/HeytingFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/HeytingFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/HeytingFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/HeytingFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/HeytingFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/HeytingFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/HeytingFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/HeytingFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/HeytingFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/HeytingFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/HeytingFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/HeytingFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/HeytingFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/HeytingFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/HeytingFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/lattice\/HeytingFunctions.html", "kind" : "trait"}, {"name" : "algebra.lattice.HeytingGenBoolOverlap", "members_trait" : [{"label" : "xor", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.HeytingGenBoolOverlap.xor", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#xor[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "or", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.HeytingGenBoolOverlap.or", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#or[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "and", "tail" : "(x: A, y: A)(ev: H[A]): A", "member" : "algebra.lattice.HeytingGenBoolOverlap.and", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#and[A](x:A,y:A)(implicitev:H[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/HeytingGenBoolOverlap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/lattice\/HeytingGenBoolOverlap.html", "kind" : "trait"}, {"name" : "algebra.lattice.JoinSemilattice", "members_trait" : [{"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/JoinSemilattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.JoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/JoinSemilattice.html#joinSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/JoinSemilattice.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/JoinSemilattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/JoinSemilattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/JoinSemilattice.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/JoinSemilattice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/JoinSemilattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/JoinSemilattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/JoinSemilattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "join", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.JoinSemilattice.join", "link" : "algebra\/lattice\/JoinSemilattice.html#join(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/JoinSemilattice.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A join-semilattice (or upper semilattice) is a semilattice whoseoperation is called \"join\", and which can be thought of as a leastupper bound.", "object" : "algebra\/lattice\/JoinSemilattice$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: JoinSemilattice[A]): JoinSemilattice[A]", "member" : "algebra.lattice.JoinSemilattice.apply", "link" : "algebra\/lattice\/JoinSemilattice$.html#apply[A](implicitev:algebra.lattice.JoinSemilattice[A]):algebra.lattice.JoinSemilattice[A]", "kind" : "final def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: JoinSemilattice[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/JoinSemilattice$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/JoinSemilattice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/JoinSemilattice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/JoinSemilattice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/JoinSemilattice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/JoinSemilattice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/JoinSemilattice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/JoinSemilattice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/JoinSemilattice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/JoinSemilattice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/JoinSemilattice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/JoinSemilattice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/JoinSemilattice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/JoinSemilattice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/JoinSemilattice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/JoinSemilattice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/JoinSemilattice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/JoinSemilattice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/JoinSemilattice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/JoinSemilattice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/JoinSemilattice.html", "kind" : "trait"}, {"name" : "algebra.lattice.JoinSemilatticeFunctions", "members_trait" : [{"label" : "join", "tail" : "(x: A, y: A)(ev: J[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/JoinSemilatticeFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/lattice\/JoinSemilatticeFunctions.html", "kind" : "trait"}, {"name" : "algebra.lattice.Lattice", "members_trait" : [{"label" : "dual", "tail" : "(): Lattice[A]", "member" : "algebra.lattice.Lattice.dual", "link" : "algebra\/lattice\/Lattice.html#dual:algebra.lattice.Lattice[A]", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/Lattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.MeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/Lattice.html#meetSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/Lattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.JoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/Lattice.html#joinSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/Lattice.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/Lattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/Lattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/Lattice.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/Lattice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/Lattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/Lattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/Lattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "meet", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.MeetSemilattice.meet", "link" : "algebra\/lattice\/Lattice.html#meet(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "join", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.JoinSemilattice.join", "link" : "algebra\/lattice\/Lattice.html#join(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/Lattice.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A lattice is a set A together with two operations (meet andjoin).", "object" : "algebra\/lattice\/Lattice$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Lattice[A]): Lattice[A]", "member" : "algebra.lattice.Lattice.apply", "link" : "algebra\/lattice\/Lattice$.html#apply[A](implicitev:algebra.lattice.Lattice[A]):algebra.lattice.Lattice[A]", "kind" : "final def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: Lattice[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/Lattice$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A)(ev: Lattice[A]): A", "member" : "algebra.lattice.JoinSemilatticeFunctions.join", "link" : "algebra\/lattice\/Lattice$.html#join[A](x:A,y:A)(implicitev:J[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/Lattice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/Lattice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/Lattice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/Lattice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/Lattice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/Lattice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/Lattice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Lattice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Lattice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/Lattice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/Lattice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/Lattice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/Lattice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/Lattice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/Lattice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/Lattice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/Lattice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/Lattice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/Lattice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/Lattice.html", "kind" : "trait"}, {"name" : "algebra.lattice.MeetSemilattice", "members_trait" : [{"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/MeetSemilattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.MeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/MeetSemilattice.html#meetSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algebra\/lattice\/MeetSemilattice.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/MeetSemilattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/MeetSemilattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algebra\/lattice\/MeetSemilattice.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "algebra\/lattice\/MeetSemilattice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "algebra\/lattice\/MeetSemilattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algebra\/lattice\/MeetSemilattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algebra\/lattice\/MeetSemilattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "meet", "tail" : "(lhs: A, rhs: A): A", "member" : "algebra.lattice.MeetSemilattice.meet", "link" : "algebra\/lattice\/MeetSemilattice.html#meet(lhs:A,rhs:A):A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "algebra\/lattice\/MeetSemilattice.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A meet-semilattice (or lower semilattice) is a semilattice whoseoperation is called \"meet\", and which can be thought of as agreatest lower bound.", "object" : "algebra\/lattice\/MeetSemilattice$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: MeetSemilattice[A]): MeetSemilattice[A]", "member" : "algebra.lattice.MeetSemilattice.apply", "link" : "algebra\/lattice\/MeetSemilattice$.html#apply[A](implicitev:algebra.lattice.MeetSemilattice[A]):algebra.lattice.MeetSemilattice[A]", "kind" : "final def"}, {"label" : "meet", "tail" : "(x: A, y: A)(ev: MeetSemilattice[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/MeetSemilattice$.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/MeetSemilattice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/MeetSemilattice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/MeetSemilattice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/MeetSemilattice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/MeetSemilattice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/MeetSemilattice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/MeetSemilattice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MeetSemilattice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MeetSemilattice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MeetSemilattice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/MeetSemilattice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/MeetSemilattice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/MeetSemilattice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/MeetSemilattice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/MeetSemilattice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/MeetSemilattice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/MeetSemilattice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/MeetSemilattice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/MeetSemilattice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/lattice\/MeetSemilattice.html", "kind" : "trait"}, {"name" : "algebra.lattice.MeetSemilatticeFunctions", "members_trait" : [{"label" : "meet", "tail" : "(x: A, y: A)(ev: M[A]): A", "member" : "algebra.lattice.MeetSemilatticeFunctions.meet", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#meet[A](x:A,y:A)(implicitev:M[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/MeetSemilatticeFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "algebra\/lattice\/MeetSemilatticeFunctions.html", "kind" : "trait"}, {"name" : "algebra.lattice.MinMaxBoundedDistributiveLattice", "shortDescription" : "", "members_class" : [{"label" : "one", "tail" : "(): A", "member" : "algebra.lattice.MinMaxBoundedDistributiveLattice.one", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#one:A", "kind" : "def"}, {"label" : "zero", "tail" : "(): A", "member" : "algebra.lattice.MinMaxBoundedDistributiveLattice.zero", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#zero:A", "kind" : "def"}, {"member" : "algebra.lattice.MinMaxBoundedDistributiveLattice#<init>", "error" : "unsupported entity"}, {"label" : "dual", "tail" : "(): BoundedDistributiveLattice[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.dual", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#dual:algebra.lattice.BoundedDistributiveLattice[A]", "kind" : "def"}, {"label" : "asCommutativeRig", "tail" : "(): CommutativeRig[A]", "member" : "algebra.lattice.BoundedDistributiveLattice.asCommutativeRig", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#asCommutativeRig:algebra.ring.CommutativeRig[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedJoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#joinSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedJoinSemilattice.isZero", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): BoundedSemilattice[A]", "member" : "algebra.lattice.BoundedMeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#meetSemilattice:algebra.BoundedSemilattice[A]", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.lattice.BoundedMeetSemilattice.isOne", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "meet", "tail" : "(x: A, y: A): A", "member" : "algebra.lattice.MinMaxLattice.meet", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#meet(x:A,y:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A): A", "member" : "algebra.lattice.MinMaxLattice.join", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#join(x:A,y:A):A", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/lattice\/MinMaxBoundedDistributiveLattice.html", "kind" : "class"}, {"name" : "algebra.lattice.MinMaxLattice", "shortDescription" : "", "members_class" : [{"label" : "meet", "tail" : "(x: A, y: A): A", "member" : "algebra.lattice.MinMaxLattice.meet", "link" : "algebra\/lattice\/MinMaxLattice.html#meet(x:A,y:A):A", "kind" : "def"}, {"label" : "join", "tail" : "(x: A, y: A): A", "member" : "algebra.lattice.MinMaxLattice.join", "link" : "algebra\/lattice\/MinMaxLattice.html#join(x:A,y:A):A", "kind" : "def"}, {"member" : "algebra.lattice.MinMaxLattice#<init>", "error" : "unsupported entity"}, {"label" : "dual", "tail" : "(): Lattice[A]", "member" : "algebra.lattice.Lattice.dual", "link" : "algebra\/lattice\/MinMaxLattice.html#dual:algebra.lattice.Lattice[A]", "kind" : "def"}, {"label" : "meetPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.MeetSemilattice.meetPartialOrder", "link" : "algebra\/lattice\/MinMaxLattice.html#meetPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "meetSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.MeetSemilattice.meetSemilattice", "link" : "algebra\/lattice\/MinMaxLattice.html#meetSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "joinPartialOrder", "tail" : "(ev: Eq[A]): PartialOrder[A]", "member" : "algebra.lattice.JoinSemilattice.joinPartialOrder", "link" : "algebra\/lattice\/MinMaxLattice.html#joinPartialOrder(implicitev:algebra.Eq[A]):algebra.PartialOrder[A]", "kind" : "def"}, {"label" : "joinSemilattice", "tail" : "(): Semilattice[A]", "member" : "algebra.lattice.JoinSemilattice.joinSemilattice", "link" : "algebra\/lattice\/MinMaxLattice.html#joinSemilattice:algebra.Semilattice[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/lattice\/MinMaxLattice.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/lattice\/MinMaxLattice.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/lattice\/MinMaxLattice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/lattice\/MinMaxLattice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/lattice\/MinMaxLattice.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/lattice\/MinMaxLattice.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/lattice\/MinMaxLattice.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MinMaxLattice.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MinMaxLattice.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/lattice\/MinMaxLattice.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/lattice\/MinMaxLattice.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/lattice\/MinMaxLattice.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/lattice\/MinMaxLattice.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/lattice\/MinMaxLattice.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/lattice\/MinMaxLattice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/lattice\/MinMaxLattice.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/lattice\/MinMaxLattice.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/lattice\/MinMaxLattice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/lattice\/MinMaxLattice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "algebra\/lattice\/MinMaxLattice.html", "kind" : "class"}], "algebra" : [{"name" : "algebra.Priority", "members_trait" : [{"label" : "getFallback", "tail" : "(): Option[F]", "member" : "algebra.Priority.getFallback", "link" : "algebra\/Priority.html#getFallback:Option[F]", "kind" : "def"}, {"label" : "getPreferred", "tail" : "(): Option[P]", "member" : "algebra.Priority.getPreferred", "link" : "algebra\/Priority.html#getPreferred:Option[P]", "kind" : "def"}, {"label" : "isFallback", "tail" : "(): Boolean", "member" : "algebra.Priority.isFallback", "link" : "algebra\/Priority.html#isFallback:Boolean", "kind" : "def"}, {"label" : "isPreferred", "tail" : "(): Boolean", "member" : "algebra.Priority.isPreferred", "link" : "algebra\/Priority.html#isPreferred:Boolean", "kind" : "def"}, {"label" : "toEither", "tail" : "(): Either[P, F]", "member" : "algebra.Priority.toEither", "link" : "algebra\/Priority.html#toEither:Either[P,F]", "kind" : "def"}, {"label" : "bimap", "tail" : "(f1: (P) ⇒ P2)(f2: (F) ⇒ F2): Priority[P2, F2]", "member" : "algebra.Priority.bimap", "link" : "algebra\/Priority.html#bimap[P2,F2](f1:P=>P2)(f2:F=>F2):algebra.Priority[P2,F2]", "kind" : "def"}, {"label" : "join", "tail" : "(): U", "member" : "algebra.Priority.join", "link" : "algebra\/Priority.html#join[U>:PwithF]:U", "kind" : "def"}, {"label" : "fold", "tail" : "(f1: (P) ⇒ B)(f2: (F) ⇒ B): B", "member" : "algebra.Priority.fold", "link" : "algebra\/Priority.html#fold[B](f1:P=>B)(f2:F=>B):B", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/Priority.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/Priority.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/Priority.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/Priority.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/Priority.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/Priority.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/Priority.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/Priority.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/Priority.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/Priority.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/Priority.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/Priority.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/Priority.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/Priority.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/Priority.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/Priority.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/Priority.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/Priority.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/Priority.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Priority is a type class for prioritized implicit search.", "object" : "algebra\/Priority$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Priority[P, F]): Priority[P, F]", "member" : "algebra.Priority.apply", "link" : "algebra\/Priority$.html#apply[P,F](implicitev:algebra.Priority[P,F]):algebra.Priority[P,F]", "kind" : "def"}, {"label" : "Fallback", "tail" : "", "member" : "algebra.Priority.Fallback", "link" : "algebra\/Priority$.html#Fallback[F]extendsPriority[Nothing,F]withProductwithSerializable", "kind" : "case class"}, {"label" : "Preferred", "tail" : "", "member" : "algebra.Priority.Preferred", "link" : "algebra\/Priority$.html#Preferred[P]extendsPriority[P,Nothing]withProductwithSerializable", "kind" : "case class"}, {"label" : "preferred", "tail" : "(ev: P): Priority[P, Nothing]", "member" : "algebra.FindPreferred.preferred", "link" : "algebra\/Priority$.html#preferred[P](implicitev:P):algebra.Priority[P,Nothing]", "kind" : "implicit def"}, {"label" : "fallback", "tail" : "(ev: F): Priority[Nothing, F]", "member" : "algebra.FindFallback.fallback", "link" : "algebra\/Priority$.html#fallback[F](implicitev:F):algebra.Priority[Nothing,F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algebra\/Priority$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algebra\/Priority$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algebra\/Priority$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algebra\/Priority$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algebra\/Priority$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algebra\/Priority$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algebra\/Priority$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/Priority$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/Priority$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algebra\/Priority$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algebra\/Priority$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algebra\/Priority$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algebra\/Priority$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algebra\/Priority$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "algebra\/Priority$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algebra\/Priority$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "algebra\/Priority$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algebra\/Priority$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algebra\/Priority$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algebra\/Priority.html", "kind" : "trait"}]};